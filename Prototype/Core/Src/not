


if (cmd == 0x01){
		HAL_ADC_Stop_IT(&hadc1);
		cmd = 0x00;
		 // Reconfigure ADC to read from first channel (ADC_CHANNEL_11)
		        ADC_ChannelConfTypeDef sConfig = {0};
		        sConfig.Channel = ADC_CHANNEL_12;
		        sConfig.Rank = 1;
		        sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
		        HAL_ADC_ConfigChannel(&hadc1, &sConfig);

		        // Start the ADC and poll for completion
		        //HAL_ADC_Start(&hadc1);
		        //HAL_ADC_PollForConversion(&hadc1, 10); // Wait for conversion to complete with a timeout
		        //uhADCxConvertedValue = HAL_ADC_GetValue(&hadc1); // Read the value from ADC_CHANNEL_11

		        // Reconfigure ADC to read from second channel (ADC_CHANNEL_9)
		        sConfig.Channel = ADC_CHANNEL_10;
		        HAL_ADC_ConfigChannel(&hadc1, &sConfig);

		        // Start the ADC and poll for completion
		        //HAL_ADC_Start(&hadc1);
		        //HAL_ADC_PollForConversion(&hadc1, 10); // Wait for conversion to complete with a timeout
		        uhADCxConvertedValue = HAL_ADC_GetValue(&hadc1); // Add the value from ADC_CHANNEL_9
		    	sprintf(msg3, "Val: %d", uhADCxConvertedValue);
		    	memset(buffer2, 255, sizeof(buffer2)); // Clear buffer
		    	LCD_ShowString(buffer2, 100, 200, 16, msg3, 0);
		    	HAL_ADC_Start_IT(&hadc1);
	}

































/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include<stdlib.h>
#include<stdio.h>
#include<string.h>
#include<stdbool.h>
#include <stdint.h>
#include <serial_printing.h>
#include "GUI.h"

#define FRAMEBUFFER_WIDTH  800
#define FRAMEBUFFER_HEIGHT 480
#define FRAMEBUFFER_SIZE (FRAMEBUFFER_WIDTH * FRAMEBUFFER_HEIGHT)

// Initialize the framebuffer to a specific color, e.g., 0xFFFF (white in RGB565)
static const uint8_t framebuffer[FRAMEBUFFER_SIZE] = {
    [0 ... FRAMEBUFFER_SIZE - 1] = 0xFF  // GNU C extension to initialize all elements
};
uint8_t buffer2[312000] = {0}; /*780 x 400*/
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

uint32_t clut[256] = {
     0x000000,0x000024,0x000048,0x00006D
    ,0x000091,0x0000B6,0x0000DA,0x0000FF
    ,0x002400,0x002424,0x002448,0x00246D
    ,0x002491,0x0024B6,0x0024DA,0x0024FF
    ,0x004800,0x004824,0x004848,0x00486D
    ,0x004891,0x0048B6,0x0048DA,0x0048FF
    ,0x006D00,0x006D24,0x006D48,0x006D6D
    ,0x006D91,0x006DB6,0x006DDA,0x006DFF
    ,0x009100,0x009124,0x009148,0x00916D
    ,0x009191,0x0091B6,0x0091DA,0x0091FF
    ,0x00B600,0x00B624,0x00B648,0x00B66D
    ,0x00B691,0x00B6B6,0x00B6DA,0x00B6FF
    ,0x00DA00,0x00DA24,0x00DA48,0x00DA6D
    ,0x00DA91,0x00DAB6,0x00DADA,0x00DAFF
    ,0x00FF00,0x00FF24,0x00FF48,0x00FF6D
    ,0x00FF91,0x00FFB6,0x00FFDA,0x00FFFF
    ,0x550000,0x550024,0x550048,0x55006D
    ,0x550091,0x5500B6,0x5500DA,0x5500FF
    ,0x552400,0x552424,0x552448,0x55246D
    ,0x552491,0x5524B6,0x5524DA,0x5524FF
    ,0x554800,0x554824,0x554848,0x55486D
    ,0x554891,0x5548B6,0x5548DA,0x5548FF
    ,0x556D00,0x556D24,0x556D48,0x556D6D
    ,0x556D91,0x556DB6,0x556DDA,0x556DFF
    ,0x559100,0x559124,0x559148,0x55916D
    ,0x559191,0x5591B6,0x5591DA,0x5591FF
    ,0x55B600,0x55B624,0x55B648,0x55B66D
    ,0x55B691,0x55B6B6,0x55B6DA,0x55B6FF
    ,0x55DA00,0x55DA24,0x55DA48,0x55DA6D
    ,0x55DA91,0x55DAB6,0x55DADA,0x55DAFF
    ,0x55FF00,0x55FF24,0x55FF48,0x55FF6D
    ,0x55FF91,0x55FFB6,0x55FFDA,0x55FFFF
    ,0xAA0000,0xAA0024,0xAA0048,0xAA006D
    ,0xAA0091,0xAA00B6,0xAA00DA,0xAA00FF
    ,0xAA2400,0xAA2424,0xAA2448,0xAA246D
    ,0xAA2491,0xAA24B6,0xAA24DA,0xAA24FF
    ,0xAA4800,0xAA4824,0xAA4848,0xAA486D
    ,0xAA4891,0xAA48B6,0xAA48DA,0xAA48FF
    ,0xAA6D00,0xAA6D24,0xAA6D48,0xAA6D6D
    ,0xAA6D91,0xAA6DB6,0xAA6DDA,0xAA6DFF
    ,0xAA9100,0xAA9124,0xAA9148,0xAA916D
    ,0xAA9191,0xAA91B6,0xAA91DA,0xAA91FF
    ,0xAAB600,0xAAB624,0xAAB648,0xAAB66D
    ,0xAAB691,0xAAB6B6,0xAAB6DA,0xAAB6FF
    ,0xAADA00,0xAADA24,0xAADA48,0xAADA6D
    ,0xAADA91,0xAADAB6,0xAADADA,0xAADAFF
    ,0xAAFF00,0xAAFF24,0xAAFF48,0xAAFF6D
    ,0xAAFF91,0xAAFFB6,0xAAFFDA,0xAAFFFF
    ,0xFF0000,0xFF0024,0xFF0048,0xFF006D
    ,0xFF0091,0xFF00B6,0xFF00DA,0xFF00FF
    ,0xFF2400,0xFF2424,0xFF2448,0xFF246D
    ,0xFF2491,0xFF24B6,0xFF24DA,0xFF24FF
    ,0xFF4800,0xFF4824,0xFF4848,0xFF486D
    ,0xFF4891,0xFF48B6,0xFF48DA,0xFF48FF
    ,0xFF6D00,0xFF6D24,0xFF6D48,0xFF6D6D
    ,0xFF6D91,0xFF6DB6,0xFF6DDA,0xFF6DFF
    ,0xFF9100,0xFF9124,0xFF9148,0xFF916D
    ,0xFF9191,0xFF91B6,0xFF91DA,0xFF91FF
    ,0xFFB600,0xFFB624,0xFFB648,0xFFB66D
    ,0xFFB691,0xFFB6B6,0xFFB6DA,0xFFB6FF
    ,0xFFDA00,0xFFDA24,0xFFDA48,0xFFDA6D
    ,0xFFDA91,0xFFDAB6,0xFFDADA,0xFFDAFF
    ,0xFFFF00,0xFFFF24,0xFFFF48,0xFFFF6D
    ,0xFFFF91,0xFFFFB6,0xFFFFDA,0xFFFFFF
};
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

LTDC_HandleTypeDef hltdc;

SDRAM_HandleTypeDef hsdram1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_LTDC_Init(void);
static void MX_FMC_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
	HAL_ADC_Start(&hadc1);

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_LTDC_Init();
  MX_FMC_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  memset(buffer2, 255, sizeof(buffer2)); // Clear buffer
  HAL_LTDC_SetWindowSize(&hltdc, 780, 400, 1);
  HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t *)clut, 256, 0);
  HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t *)clut, 256, 1);
  HAL_LTDC_EnableColorKeying(&hltdc, 0);
  HAL_LTDC_ConfigColorKeying(&hltdc, 0xFFFFFF, 0);
  // Allocate buffer


  char msg[50] = "HELLO EVERYBODY IN THIS TOWN!!!!!!";
  char msg2[50] = "HELOOO EVEYBODY IN THE WORLD TECH!!! HIHO!";
  char msg3 [50] = {0};
  LCD_ShowString(buffer2, 200, 100, 16, msg, 0);
  LCD_ShowString(buffer2, 200, 150, 16, msg2, 0);


  while (1)
  { // Define the correct framebuffer address
	HAL_ADC_PollForConversion(&hadc1, 100);
	int val = HAL_ADC_GetValue(&hadc1);
	sprintf(msg3, "Val: %d", val);
	memset(buffer2, 255, sizeof(buffer2)); // Clear buffer
	LCD_ShowString(buffer2, 100, 200, 16, msg3, 0);
	HAL_Delay(2000);
	HAL_Delay(10);
	HAL_Delay(10);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
  AnalogWDGConfig.HighThreshold = 0;
  AnalogWDGConfig.LowThreshold = 0;
  AnalogWDGConfig.Channel = ADC_CHANNEL_9;
  AnalogWDGConfig.ITMode = DISABLE;
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{

  /* USER CODE BEGIN LTDC_Init 0 */
	GPIOB->BSRR = (1U << 12);

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};

  /* USER CODE BEGIN LTDC_Init 1 */



  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
  hltdc.Init.HorizontalSync = 40;
  hltdc.Init.VerticalSync = 19;
  hltdc.Init.AccumulatedHBP = 86;
  hltdc.Init.AccumulatedVBP = 42;
  hltdc.Init.AccumulatedActiveW = 886;
  hltdc.Init.AccumulatedActiveH = 522;
  hltdc.Init.TotalWidth = 1096;
  hltdc.Init.TotalHeigh = 544;
  hltdc.Init.Backcolor.Blue = 0;
  hltdc.Init.Backcolor.Green = 0;
  hltdc.Init.Backcolor.Red = 0;
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
  {
    Error_Handler();
  }
  pLayerCfg.WindowX0 = 0;
  pLayerCfg.WindowX1 = 800;
  pLayerCfg.WindowY0 = 0;
  pLayerCfg.WindowY1 = 480;
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_L8;
  pLayerCfg.Alpha = 255;
  pLayerCfg.Alpha0 = 0;
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
  pLayerCfg.FBStartAdress = (uint32_t)framebuffer;;
  pLayerCfg.ImageWidth = 0;
  pLayerCfg.ImageHeight = 0;
  pLayerCfg.Backcolor.Blue = 255;
  pLayerCfg.Backcolor.Green = 255;
  pLayerCfg.Backcolor.Red = 255;
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
  {
    Error_Handler();
  }
  pLayerCfg1.WindowX0 = 0;
  pLayerCfg1.WindowX1 = 780;
  pLayerCfg1.WindowY0 = 0;
  pLayerCfg1.WindowY1 = 400;
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_L8;
  pLayerCfg1.Alpha = 255;
  pLayerCfg1.Alpha0 = 0;
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
  pLayerCfg1.FBStartAdress = (uint32_t)buffer2;;
  pLayerCfg1.ImageWidth = 0;
  pLayerCfg1.ImageHeight = 0;
  pLayerCfg1.Backcolor.Blue = 255;
  pLayerCfg1.Backcolor.Green = 255;
  pLayerCfg1.Backcolor.Red = 255;
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}

/* FMC initialization function */
static void MX_FMC_Init(void)
{

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};

  /* USER CODE BEGIN FMC_Init 1 */

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
  SdramTiming.ExitSelfRefreshDelay = 16;
  SdramTiming.SelfRefreshTime = 16;
  SdramTiming.RowCycleDelay = 16;
  SdramTiming.WriteRecoveryTime = 16;
  SdramTiming.RPDelay = 16;
  SdramTiming.RCDDelay = 16;

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
  {
    Error_Handler( );
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
