
Prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c710  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000288c  0800c8d0  0800c8d0  0000d8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f15c  0800f15c  00011170  2**0
                  CONTENTS
  4 .ARM          00000008  0800f15c  0800f15c  0001015c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f164  0800f164  00011170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f164  0800f164  00010164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f168  0800f168  00010168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000170  20000000  0800f16c  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011170  2**0
                  CONTENTS
 10 .bss          00005b68  20000170  20000170  00011170  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005cd8  20005cd8  00011170  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011170  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002664a  00000000  00000000  000111a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005073  00000000  00000000  000377ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f48  00000000  00000000  0003c860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000183a  00000000  00000000  0003e7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024854  00000000  00000000  0003ffe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028b6d  00000000  00000000  00064836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00124da7  00000000  00000000  0008d3a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001b214a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008cac  00000000  00000000  001b2190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  001bae3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000170 	.word	0x20000170
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c8b8 	.word	0x0800c8b8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000174 	.word	0x20000174
 80001fc:	0800c8b8 	.word	0x0800c8b8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	strcpy(mainDataHolder.callingWaterTemp, "calling");
 8000ece:	4b8d      	ldr	r3, [pc, #564]	@ (8001104 <main+0x23c>)
 8000ed0:	4a8d      	ldr	r2, [pc, #564]	@ (8001108 <main+0x240>)
 8000ed2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ed6:	e883 0003 	stmia.w	r3, {r0, r1}
	strcpy(mainDataHolder.hotWaterTemp, "hot");
 8000eda:	4b8c      	ldr	r3, [pc, #560]	@ (800110c <main+0x244>)
 8000edc:	4a8c      	ldr	r2, [pc, #560]	@ (8001110 <main+0x248>)
 8000ede:	601a      	str	r2, [r3, #0]
	strcpy(mainDataHolder.motor_position, "motor");
 8000ee0:	4b8c      	ldr	r3, [pc, #560]	@ (8001114 <main+0x24c>)
 8000ee2:	4a8d      	ldr	r2, [pc, #564]	@ (8001118 <main+0x250>)
 8000ee4:	6810      	ldr	r0, [r2, #0]
 8000ee6:	6018      	str	r0, [r3, #0]
 8000ee8:	8892      	ldrh	r2, [r2, #4]
 8000eea:	809a      	strh	r2, [r3, #4]
	strcpy(mainDataHolder.showerWaterTemp, "shower");
 8000eec:	4b8b      	ldr	r3, [pc, #556]	@ (800111c <main+0x254>)
 8000eee:	4a8c      	ldr	r2, [pc, #560]	@ (8001120 <main+0x258>)
 8000ef0:	6810      	ldr	r0, [r2, #0]
 8000ef2:	6018      	str	r0, [r3, #0]
 8000ef4:	8891      	ldrh	r1, [r2, #4]
 8000ef6:	7992      	ldrb	r2, [r2, #6]
 8000ef8:	8099      	strh	r1, [r3, #4]
 8000efa:	719a      	strb	r2, [r3, #6]

	lcdDataHolder.setTemp = 25;
 8000efc:	4b89      	ldr	r3, [pc, #548]	@ (8001124 <main+0x25c>)
 8000efe:	2219      	movs	r2, #25
 8000f00:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f04:	f003 fde6 	bl	8004ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f08:	f000 f950 	bl	80011ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0c:	f000 fd04 	bl	8001918 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f10:	f000 fc5a 	bl	80017c8 <MX_DMA_Init>
  MX_LTDC_Init();
 8000f14:	f000 fa0e 	bl	8001334 <MX_LTDC_Init>
  MX_FMC_Init();
 8000f18:	f000 fc76 	bl	8001808 <MX_FMC_Init>
  MX_ADC1_Init();
 8000f1c:	f000 f9b8 	bl	8001290 <MX_ADC1_Init>
  MX_QUADSPI_Init();
 8000f20:	f000 fb72 	bl	8001608 <MX_QUADSPI_Init>
  MX_SPI2_Init();
 8000f24:	f000 fb9c 	bl	8001660 <MX_SPI2_Init>
  MX_UART4_Init();
 8000f28:	f000 fbd0 	bl	80016cc <MX_UART4_Init>
  MX_UART8_Init();
 8000f2c:	f000 fc22 	bl	8001774 <MX_UART8_Init>
  MX_UART5_Init();
 8000f30:	f000 fbf6 	bl	8001720 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  /* Infinite loop */
	// Allocate buffer

	  int y_ = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

	  uint16_t yellow_rgb565 = RGB565_Solid_pink;
 8000f38:	f648 13c8 	movw	r3, #35272	@ 0x89c8
 8000f3c:	80fb      	strh	r3, [r7, #6]
	  for (int y = 0; y < FRAMEBUFFER_HEIGHT; y++) {
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
 8000f42:	e022      	b.n	8000f8a <main+0xc2>
	          for (int x = 0; x < FRAMEBUFFER_WIDTH; x++) {
 8000f44:	2300      	movs	r3, #0
 8000f46:	61bb      	str	r3, [r7, #24]
 8000f48:	e018      	b.n	8000f7c <main+0xb4>
	        	  uint32_t index = y * FRAMEBUFFER_WIDTH + x; // 1D index
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000f50:	fb03 f202 	mul.w	r2, r3, r2
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	4413      	add	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
	        	  uint32_t address = (uint32_t)BUFFER_LAYER_1_ADDRESS + index * BYTES_PER_PIXEL; // SDRAM address
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f103 43d0 	add.w	r3, r3, #1744830464	@ 0x68000000
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	60bb      	str	r3, [r7, #8]
	              HAL_SDRAM_Write_16b(&hsdram1, (uint32_t *)address, &yellow_rgb565, 1);
 8000f64:	68b9      	ldr	r1, [r7, #8]
 8000f66:	1dba      	adds	r2, r7, #6
 8000f68:	2301      	movs	r3, #1
 8000f6a:	486f      	ldr	r0, [pc, #444]	@ (8001128 <main+0x260>)
 8000f6c:	f006 fb3c 	bl	80075e8 <HAL_SDRAM_Write_16b>
	              address += BYTES_PER_PIXEL; // Increment by 2 bytes for each pixel
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	3302      	adds	r3, #2
 8000f74:	60bb      	str	r3, [r7, #8]
	          for (int x = 0; x < FRAMEBUFFER_WIDTH; x++) {
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	61bb      	str	r3, [r7, #24]
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000f82:	dbe2      	blt.n	8000f4a <main+0x82>
	  for (int y = 0; y < FRAMEBUFFER_HEIGHT; y++) {
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	3301      	adds	r3, #1
 8000f88:	61fb      	str	r3, [r7, #28]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000f90:	dbd8      	blt.n	8000f44 <main+0x7c>
	          }
	      }
	  HAL_Delay(1000);
 8000f92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f96:	f003 fddf 	bl	8004b58 <HAL_Delay>

	//LCD_Fill(BUFFER_LAYER_1_ADDRESS, 0, 0,FRAMEBUFFER_WIDTH,FRAMEBUFFER_HEIGHT,RGB565_Celtic_blue);
	ESP_RST_GPIO_Port->BSRR = 1U << (4+16);
 8000f9a:	4b64      	ldr	r3, [pc, #400]	@ (800112c <main+0x264>)
 8000f9c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000fa0:	619a      	str	r2, [r3, #24]
	ESP_EN_GPIO_Port->BSRR = 1U << (5+16);
 8000fa2:	4b62      	ldr	r3, [pc, #392]	@ (800112c <main+0x264>)
 8000fa4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000fa8:	619a      	str	r2, [r3, #24]
	HAL_Delay(1000);
 8000faa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fae:	f003 fdd3 	bl	8004b58 <HAL_Delay>
	ESP_RST_GPIO_Port->BSRR = 1U << (4);
 8000fb2:	4b5e      	ldr	r3, [pc, #376]	@ (800112c <main+0x264>)
 8000fb4:	2210      	movs	r2, #16
 8000fb6:	619a      	str	r2, [r3, #24]
	ESP_EN_GPIO_Port->BSRR = 1U << 5;
 8000fb8:	4b5c      	ldr	r3, [pc, #368]	@ (800112c <main+0x264>)
 8000fba:	2220      	movs	r2, #32
 8000fbc:	619a      	str	r2, [r3, #24]
	//HAL_UART_Transmit(&huart8, (uint8_t *)msg2, strlen(msg2), 1000);

	//draw_terminal(BUFFER_LAYER_1_ADDRESS);
	//keypad(BUFFER_LAYER_1_ADDRESS);
	//draw_futuristic_background(BUFFER_LAYER_1_ADDRESS);
	PAGE_HOME_INIT_VAR();
 8000fbe:	f002 fb8f 	bl	80036e0 <PAGE_HOME_INIT_VAR>
	PAGE_HOME_Draw(BUFFER_LAYER_1_ADDRESS);
 8000fc2:	f04f 4050 	mov.w	r0, #3489660928	@ 0xd0000000
 8000fc6:	f002 fc69 	bl	800389c <PAGE_HOME_Draw>
	ESP_RTS_GPIO_Port->BSRR = 1U << (8+16);
 8000fca:	4b59      	ldr	r3, [pc, #356]	@ (8001130 <main+0x268>)
 8000fcc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000fd0:	619a      	str	r2, [r3, #24]
	//ESP_RTS_GPIO_Port->BSRR = 1U << (8);
	GPIOC->BSRR = 1U << 2; // YD
 8000fd2:	4b57      	ldr	r3, [pc, #348]	@ (8001130 <main+0x268>)
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	619a      	str	r2, [r3, #24]
	//char msg1[100] = "RUN 2 200";

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fd8:	f007 fc5e 	bl	8008898 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mainMutexHandle */
  mainMutexHandleHandle = osMutexNew(&mainMutexHandle_attributes);
 8000fdc:	4855      	ldr	r0, [pc, #340]	@ (8001134 <main+0x26c>)
 8000fde:	f007 fd52 	bl	8008a86 <osMutexNew>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4a54      	ldr	r2, [pc, #336]	@ (8001138 <main+0x270>)
 8000fe6:	6013      	str	r3, [r2, #0]

  /* creation of adcControllerMutex */
  adcControllerMutexHandle = osMutexNew(&adcControllerMutex_attributes);
 8000fe8:	4854      	ldr	r0, [pc, #336]	@ (800113c <main+0x274>)
 8000fea:	f007 fd4c 	bl	8008a86 <osMutexNew>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a53      	ldr	r2, [pc, #332]	@ (8001140 <main+0x278>)
 8000ff2:	6013      	str	r3, [r2, #0]

  /* creation of lcdControllerMutex */
  lcdControllerMutexHandle = osMutexNew(&lcdControllerMutex_attributes);
 8000ff4:	4853      	ldr	r0, [pc, #332]	@ (8001144 <main+0x27c>)
 8000ff6:	f007 fd46 	bl	8008a86 <osMutexNew>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a52      	ldr	r2, [pc, #328]	@ (8001148 <main+0x280>)
 8000ffe:	6013      	str	r3, [r2, #0]

  /* creation of uartControllerMutex */
  uartControllerMutexHandle = osMutexNew(&uartControllerMutex_attributes);
 8001000:	4852      	ldr	r0, [pc, #328]	@ (800114c <main+0x284>)
 8001002:	f007 fd40 	bl	8008a86 <osMutexNew>
 8001006:	4603      	mov	r3, r0
 8001008:	4a51      	ldr	r2, [pc, #324]	@ (8001150 <main+0x288>)
 800100a:	6013      	str	r3, [r2, #0]

  /* creation of adcMutex */
  adcMutexHandle = osMutexNew(&adcMutex_attributes);
 800100c:	4851      	ldr	r0, [pc, #324]	@ (8001154 <main+0x28c>)
 800100e:	f007 fd3a 	bl	8008a86 <osMutexNew>
 8001012:	4603      	mov	r3, r0
 8001014:	4a50      	ldr	r2, [pc, #320]	@ (8001158 <main+0x290>)
 8001016:	6013      	str	r3, [r2, #0]

  /* creation of uartMutex */
  uartMutexHandle = osMutexNew(&uartMutex_attributes);
 8001018:	4850      	ldr	r0, [pc, #320]	@ (800115c <main+0x294>)
 800101a:	f007 fd34 	bl	8008a86 <osMutexNew>
 800101e:	4603      	mov	r3, r0
 8001020:	4a4f      	ldr	r2, [pc, #316]	@ (8001160 <main+0x298>)
 8001022:	6013      	str	r3, [r2, #0]

  /* creation of lcdMutex */
  lcdMutexHandle = osMutexNew(&lcdMutex_attributes);
 8001024:	484f      	ldr	r0, [pc, #316]	@ (8001164 <main+0x29c>)
 8001026:	f007 fd2e 	bl	8008a86 <osMutexNew>
 800102a:	4603      	mov	r3, r0
 800102c:	4a4e      	ldr	r2, [pc, #312]	@ (8001168 <main+0x2a0>)
 800102e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(mainFunction, NULL, &mainTask_attributes);
 8001030:	4a4e      	ldr	r2, [pc, #312]	@ (800116c <main+0x2a4>)
 8001032:	2100      	movs	r1, #0
 8001034:	484e      	ldr	r0, [pc, #312]	@ (8001170 <main+0x2a8>)
 8001036:	f007 fc79 	bl	800892c <osThreadNew>
 800103a:	4603      	mov	r3, r0
 800103c:	4a4d      	ldr	r2, [pc, #308]	@ (8001174 <main+0x2ac>)
 800103e:	6013      	str	r3, [r2, #0]

  /* creation of lcdTask */
  lcdTaskHandle = osThreadNew(uartFunction, NULL, &lcdTask_attributes);
 8001040:	4a4d      	ldr	r2, [pc, #308]	@ (8001178 <main+0x2b0>)
 8001042:	2100      	movs	r1, #0
 8001044:	484d      	ldr	r0, [pc, #308]	@ (800117c <main+0x2b4>)
 8001046:	f007 fc71 	bl	800892c <osThreadNew>
 800104a:	4603      	mov	r3, r0
 800104c:	4a4c      	ldr	r2, [pc, #304]	@ (8001180 <main+0x2b8>)
 800104e:	6013      	str	r3, [r2, #0]

  /* creation of adcTask */
  adcTaskHandle = osThreadNew(adcFunction, NULL, &adcTask_attributes);
 8001050:	4a4c      	ldr	r2, [pc, #304]	@ (8001184 <main+0x2bc>)
 8001052:	2100      	movs	r1, #0
 8001054:	484c      	ldr	r0, [pc, #304]	@ (8001188 <main+0x2c0>)
 8001056:	f007 fc69 	bl	800892c <osThreadNew>
 800105a:	4603      	mov	r3, r0
 800105c:	4a4b      	ldr	r2, [pc, #300]	@ (800118c <main+0x2c4>)
 800105e:	6013      	str	r3, [r2, #0]

  /* creation of lcd_task */
  lcd_taskHandle = osThreadNew(lcd_function, NULL, &lcd_task_attributes);
 8001060:	4a4b      	ldr	r2, [pc, #300]	@ (8001190 <main+0x2c8>)
 8001062:	2100      	movs	r1, #0
 8001064:	484b      	ldr	r0, [pc, #300]	@ (8001194 <main+0x2cc>)
 8001066:	f007 fc61 	bl	800892c <osThreadNew>
 800106a:	4603      	mov	r3, r0
 800106c:	4a4a      	ldr	r2, [pc, #296]	@ (8001198 <main+0x2d0>)
 800106e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001070:	f007 fc36 	bl	80088e0 <osKernelStart>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_SDRAM_Read_8b(&hsdram1, (uint32_t *)BUFFER_LAYER_1, (uint8_t *)myReadData, 4);
	// Reconfigure ADC to use the correct input channel (e.g., ADC_CHANNEL_9 on PB1)
	RESTORE_ADC();
 8001074:	f000 fd7e 	bl	8001b74 <RESTORE_ADC>
	HAL_ADC_Start(&hadc1);
 8001078:	4848      	ldr	r0, [pc, #288]	@ (800119c <main+0x2d4>)
 800107a:	f003 fdd5 	bl	8004c28 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 800107e:	210a      	movs	r1, #10
 8001080:	4846      	ldr	r0, [pc, #280]	@ (800119c <main+0x2d4>)
 8001082:	f003 fed6 	bl	8004e32 <HAL_ADC_PollForConversion>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d125      	bne.n	80010d8 <main+0x210>
		y_ = HAL_ADC_GetValue(&hadc1);
 800108c:	4843      	ldr	r0, [pc, #268]	@ (800119c <main+0x2d4>)
 800108e:	f003 ff5b 	bl	8004f48 <HAL_ADC_GetValue>
 8001092:	4603      	mov	r3, r0
 8001094:	617b      	str	r3, [r7, #20]
		HAL_ADC_Stop(&hadc1);
 8001096:	4841      	ldr	r0, [pc, #260]	@ (800119c <main+0x2d4>)
 8001098:	f003 fe98 	bl	8004dcc <HAL_ADC_Stop>
		if (y_ > 2500) {
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80010a2:	4293      	cmp	r3, r2
 80010a4:	dd1d      	ble.n	80010e2 <main+0x21a>
			ESP_RTS_GPIO_Port->BSRR = 1U << (8+16);
 80010a6:	4b22      	ldr	r3, [pc, #136]	@ (8001130 <main+0x268>)
 80010a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80010ac:	619a      	str	r2, [r3, #24]
			scan_(BUFFER_LAYER_1_ADDRESS);
 80010ae:	f04f 4050 	mov.w	r0, #3489660928	@ 0xd0000000
 80010b2:	f002 fe35 	bl	8003d20 <scan_>
			HAL_Delay(500);
 80010b6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010ba:	f003 fd4d 	bl	8004b58 <HAL_Delay>
			if (HAL_ADC_Init(&hadc1) != HAL_OK) Error_Handler();
 80010be:	4837      	ldr	r0, [pc, #220]	@ (800119c <main+0x2d4>)
 80010c0:	f003 fd6e 	bl	8004ba0 <HAL_ADC_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <main+0x206>
 80010ca:	f000 fe69 	bl	8001da0 <Error_Handler>
			ESP_RTS_GPIO_Port->BSRR = 1U << (8);
 80010ce:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <main+0x268>)
 80010d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010d4:	619a      	str	r2, [r3, #24]
 80010d6:	e004      	b.n	80010e2 <main+0x21a>
		}
	} else {
		printf_(BUFFER_LAYER_1_ADDRESS, "ADC timeout");
 80010d8:	4931      	ldr	r1, [pc, #196]	@ (80011a0 <main+0x2d8>)
 80010da:	f04f 4050 	mov.w	r0, #3489660928	@ 0xd0000000
 80010de:	f002 f891 	bl	8003204 <printf_>
	}

	if(cmd.status_busy == true){
 80010e2:	4b30      	ldr	r3, [pc, #192]	@ (80011a4 <main+0x2dc>)
 80010e4:	f893 3964 	ldrb.w	r3, [r3, #2404]	@ 0x964
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d006      	beq.n	80010fa <main+0x232>
		char *cmdmsg = "BUSY TRUE";
 80010ec:	4b2e      	ldr	r3, [pc, #184]	@ (80011a8 <main+0x2e0>)
 80010ee:	613b      	str	r3, [r7, #16]
		printf_(BUFFER_LAYER_1_ADDRESS, cmdmsg);
 80010f0:	6939      	ldr	r1, [r7, #16]
 80010f2:	f04f 4050 	mov.w	r0, #3489660928	@ 0xd0000000
 80010f6:	f002 f885 	bl	8003204 <printf_>
	}
	CMD_HANDLER(BUFFER_LAYER_1_ADDRESS);
 80010fa:	f04f 4050 	mov.w	r0, #3489660928	@ 0xd0000000
 80010fe:	f001 fc3f 	bl	8002980 <CMD_HANDLER>
	RESTORE_ADC();
 8001102:	e7b7      	b.n	8001074 <main+0x1ac>
 8001104:	200004c4 	.word	0x200004c4
 8001108:	0800c968 	.word	0x0800c968
 800110c:	20000528 	.word	0x20000528
 8001110:	00746f68 	.word	0x00746f68
 8001114:	2000055a 	.word	0x2000055a
 8001118:	0800c970 	.word	0x0800c970
 800111c:	200004f6 	.word	0x200004f6
 8001120:	0800c978 	.word	0x0800c978
 8001124:	20000590 	.word	0x20000590
 8001128:	20000458 	.word	0x20000458
 800112c:	40020c00 	.word	0x40020c00
 8001130:	40020800 	.word	0x40020800
 8001134:	0800ced0 	.word	0x0800ced0
 8001138:	2000049c 	.word	0x2000049c
 800113c:	0800cee0 	.word	0x0800cee0
 8001140:	200004a0 	.word	0x200004a0
 8001144:	0800cef0 	.word	0x0800cef0
 8001148:	200004a4 	.word	0x200004a4
 800114c:	0800cf00 	.word	0x0800cf00
 8001150:	200004a8 	.word	0x200004a8
 8001154:	0800cf10 	.word	0x0800cf10
 8001158:	200004ac 	.word	0x200004ac
 800115c:	0800cf20 	.word	0x0800cf20
 8001160:	200004b0 	.word	0x200004b0
 8001164:	0800cf30 	.word	0x0800cf30
 8001168:	200004b4 	.word	0x200004b4
 800116c:	0800ce40 	.word	0x0800ce40
 8001170:	08001c1d 	.word	0x08001c1d
 8001174:	2000048c 	.word	0x2000048c
 8001178:	0800ce64 	.word	0x0800ce64
 800117c:	08001c61 	.word	0x08001c61
 8001180:	20000490 	.word	0x20000490
 8001184:	0800ce88 	.word	0x0800ce88
 8001188:	08001ca5 	.word	0x08001ca5
 800118c:	20000494 	.word	0x20000494
 8001190:	0800ceac 	.word	0x0800ceac
 8001194:	08001d39 	.word	0x08001d39
 8001198:	20000498 	.word	0x20000498
 800119c:	2000018c 	.word	0x2000018c
 80011a0:	0800c980 	.word	0x0800c980
 80011a4:	2000065c 	.word	0x2000065c
 80011a8:	0800c98c 	.word	0x0800c98c

080011ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b094      	sub	sp, #80	@ 0x50
 80011b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	2234      	movs	r2, #52	@ 0x34
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f00a fe36 	bl	800be2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001288 <SystemClock_Config+0xdc>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001288 <SystemClock_Config+0xdc>)
 80011da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011de:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e0:	4b29      	ldr	r3, [pc, #164]	@ (8001288 <SystemClock_Config+0xdc>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ec:	2300      	movs	r3, #0
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	4b26      	ldr	r3, [pc, #152]	@ (800128c <SystemClock_Config+0xe0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a25      	ldr	r2, [pc, #148]	@ (800128c <SystemClock_Config+0xe0>)
 80011f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b23      	ldr	r3, [pc, #140]	@ (800128c <SystemClock_Config+0xe0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001204:	603b      	str	r3, [r7, #0]
 8001206:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001208:	2302      	movs	r3, #2
 800120a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800120c:	2301      	movs	r3, #1
 800120e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001210:	2310      	movs	r3, #16
 8001212:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001214:	2302      	movs	r3, #2
 8001216:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001218:	2300      	movs	r3, #0
 800121a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800121c:	2308      	movs	r3, #8
 800121e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001220:	23b4      	movs	r3, #180	@ 0xb4
 8001222:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001224:	2302      	movs	r3, #2
 8001226:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001228:	2304      	movs	r3, #4
 800122a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800122c:	2302      	movs	r3, #2
 800122e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4618      	mov	r0, r3
 8001236:	f005 ff1f 	bl	8007078 <HAL_RCC_OscConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001240:	f000 fdae 	bl	8001da0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001244:	f005 f9b6 	bl	80065b4 <HAL_PWREx_EnableOverDrive>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800124e:	f000 fda7 	bl	8001da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001252:	230f      	movs	r3, #15
 8001254:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001256:	2302      	movs	r3, #2
 8001258:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800125e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001262:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001264:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001268:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800126a:	f107 0308 	add.w	r3, r7, #8
 800126e:	2105      	movs	r1, #5
 8001270:	4618      	mov	r0, r3
 8001272:	f005 fab1 	bl	80067d8 <HAL_RCC_ClockConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800127c:	f000 fd90 	bl	8001da0 <Error_Handler>
  }
}
 8001280:	bf00      	nop
 8001282:	3750      	adds	r7, #80	@ 0x50
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40023800 	.word	0x40023800
 800128c:	40007000 	.word	0x40007000

08001290 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001296:	463b      	mov	r3, r7
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012a2:	4b21      	ldr	r3, [pc, #132]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012a4:	4a21      	ldr	r2, [pc, #132]	@ (800132c <MX_ADC1_Init+0x9c>)
 80012a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80012b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012be:	2201      	movs	r2, #1
 80012c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012c2:	4b19      	ldr	r3, [pc, #100]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ca:	4b17      	ldr	r3, [pc, #92]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012d0:	4b15      	ldr	r3, [pc, #84]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012d2:	4a17      	ldr	r2, [pc, #92]	@ (8001330 <MX_ADC1_Init+0xa0>)
 80012d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012d6:	4b14      	ldr	r3, [pc, #80]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012d8:	2200      	movs	r2, #0
 80012da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012dc:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012de:	2201      	movs	r2, #1
 80012e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012e2:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012f0:	480d      	ldr	r0, [pc, #52]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012f2:	f003 fc55 	bl	8004ba0 <HAL_ADC_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012fc:	f000 fd50 	bl	8001da0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001300:	2311      	movs	r3, #17
 8001302:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001304:	2301      	movs	r3, #1
 8001306:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001308:	2307      	movs	r3, #7
 800130a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800130c:	463b      	mov	r3, r7
 800130e:	4619      	mov	r1, r3
 8001310:	4805      	ldr	r0, [pc, #20]	@ (8001328 <MX_ADC1_Init+0x98>)
 8001312:	f003 fe27 	bl	8004f64 <HAL_ADC_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800131c:	f000 fd40 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	2000018c 	.word	0x2000018c
 800132c:	40012000 	.word	0x40012000
 8001330:	0f000001 	.word	0x0f000001

08001334 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b09a      	sub	sp, #104	@ 0x68
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */
	GPIOB->BSRR = (1U << 12);
 800133a:	4baf      	ldr	r3, [pc, #700]	@ (80015f8 <MX_LTDC_Init+0x2c4>)
 800133c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001340:	619a      	str	r2, [r3, #24]

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001342:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001346:	2234      	movs	r2, #52	@ 0x34
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f00a fd6e 	bl	800be2c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001350:	463b      	mov	r3, r7
 8001352:	2234      	movs	r2, #52	@ 0x34
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f00a fd68 	bl	800be2c <memset>
  /* USER CODE BEGIN LTDC_Init 1 */



  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800135c:	4ba7      	ldr	r3, [pc, #668]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 800135e:	4aa8      	ldr	r2, [pc, #672]	@ (8001600 <MX_LTDC_Init+0x2cc>)
 8001360:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001362:	4ba6      	ldr	r3, [pc, #664]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 8001364:	2200      	movs	r2, #0
 8001366:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001368:	4ba4      	ldr	r3, [pc, #656]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800136e:	4ba3      	ldr	r3, [pc, #652]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 8001370:	2200      	movs	r2, #0
 8001372:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001374:	4ba1      	ldr	r3, [pc, #644]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800137a:	4ba0      	ldr	r3, [pc, #640]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 800137c:	2228      	movs	r2, #40	@ 0x28
 800137e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 19;
 8001380:	4b9e      	ldr	r3, [pc, #632]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 8001382:	2213      	movs	r2, #19
 8001384:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 86;
 8001386:	4b9d      	ldr	r3, [pc, #628]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 8001388:	2256      	movs	r2, #86	@ 0x56
 800138a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 42;
 800138c:	4b9b      	ldr	r3, [pc, #620]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 800138e:	222a      	movs	r2, #42	@ 0x2a
 8001390:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 886;
 8001392:	4b9a      	ldr	r3, [pc, #616]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 8001394:	f240 3276 	movw	r2, #886	@ 0x376
 8001398:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 522;
 800139a:	4b98      	ldr	r3, [pc, #608]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 800139c:	f240 220a 	movw	r2, #522	@ 0x20a
 80013a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 1096;
 80013a2:	4b96      	ldr	r3, [pc, #600]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 80013a4:	f44f 6289 	mov.w	r2, #1096	@ 0x448
 80013a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 544;
 80013aa:	4b94      	ldr	r3, [pc, #592]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 80013ac:	f44f 7208 	mov.w	r2, #544	@ 0x220
 80013b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80013b2:	4b92      	ldr	r3, [pc, #584]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80013ba:	4b90      	ldr	r3, [pc, #576]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80013c2:	4b8e      	ldr	r3, [pc, #568]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013ca:	488c      	ldr	r0, [pc, #560]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 80013cc:	f004 fd8a 	bl	8005ee4 <HAL_LTDC_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_LTDC_Init+0xa6>
  {
    Error_Handler();
 80013d6:	f000 fce3 	bl	8001da0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 800;
 80013de:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80013e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 480;
 80013e8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80013ec:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80013ee:	2302      	movs	r3, #2
 80013f0:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80013fa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80013fe:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001400:	2307      	movs	r3, #7
 8001402:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 800;
 8001408:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800140c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 480;
 800140e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001412:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001426:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800142a:	2200      	movs	r2, #0
 800142c:	4619      	mov	r1, r3
 800142e:	4873      	ldr	r0, [pc, #460]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 8001430:	f004 feea 	bl	8006208 <HAL_LTDC_ConfigLayer>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_LTDC_Init+0x10a>
  {
    Error_Handler();
 800143a:	f000 fcb1 	bl	8001da0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 800;
 8001442:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001446:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 480;
 800144c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001450:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001452:	2302      	movs	r3, #2
 8001454:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800145e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001462:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001464:	2307      	movs	r3, #7
 8001466:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 800;
 800146c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001470:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 255;
 8001476:	23ff      	movs	r3, #255	@ 0xff
 8001478:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 255;
 800147c:	23ff      	movs	r3, #255	@ 0xff
 800147e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 255;
 8001482:	23ff      	movs	r3, #255	@ 0xff
 8001484:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001488:	463b      	mov	r3, r7
 800148a:	2201      	movs	r2, #1
 800148c:	4619      	mov	r1, r3
 800148e:	485b      	ldr	r0, [pc, #364]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 8001490:	f004 feba 	bl	8006208 <HAL_LTDC_ConfigLayer>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_LTDC_Init+0x16a>
  {
    Error_Handler();
 800149a:	f000 fc81 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  hltdc.Instance = LTDC;
 800149e:	4b57      	ldr	r3, [pc, #348]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 80014a0:	4a57      	ldr	r2, [pc, #348]	@ (8001600 <MX_LTDC_Init+0x2cc>)
 80014a2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80014a4:	4b55      	ldr	r3, [pc, #340]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80014aa:	4b54      	ldr	r3, [pc, #336]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80014b0:	4b52      	ldr	r3, [pc, #328]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80014b6:	4b51      	ldr	r3, [pc, #324]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80014bc:	4b4f      	ldr	r3, [pc, #316]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 80014be:	2228      	movs	r2, #40	@ 0x28
 80014c0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 19;
 80014c2:	4b4e      	ldr	r3, [pc, #312]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 80014c4:	2213      	movs	r2, #19
 80014c6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 86;
 80014c8:	4b4c      	ldr	r3, [pc, #304]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 80014ca:	2256      	movs	r2, #86	@ 0x56
 80014cc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 42;
 80014ce:	4b4b      	ldr	r3, [pc, #300]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 80014d0:	222a      	movs	r2, #42	@ 0x2a
 80014d2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 886;
 80014d4:	4b49      	ldr	r3, [pc, #292]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 80014d6:	f240 3276 	movw	r2, #886	@ 0x376
 80014da:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 522;
 80014dc:	4b47      	ldr	r3, [pc, #284]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 80014de:	f240 220a 	movw	r2, #522	@ 0x20a
 80014e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 1096;
 80014e4:	4b45      	ldr	r3, [pc, #276]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 80014e6:	f44f 6289 	mov.w	r2, #1096	@ 0x448
 80014ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 544;
 80014ec:	4b43      	ldr	r3, [pc, #268]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 80014ee:	f44f 7208 	mov.w	r2, #544	@ 0x220
 80014f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80014f4:	4b41      	ldr	r3, [pc, #260]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80014fc:	4b3f      	ldr	r3, [pc, #252]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001504:	4b3d      	ldr	r3, [pc, #244]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800150c:	483b      	ldr	r0, [pc, #236]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 800150e:	f004 fce9 	bl	8005ee4 <HAL_LTDC_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_LTDC_Init+0x1e8>
  {
    Error_Handler();
 8001518:	f000 fc42 	bl	8001da0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 800;
 8001520:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001524:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 480;
 800152a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800152e:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001530:	2302      	movs	r3, #2
 8001532:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 255;
 8001534:	23ff      	movs	r3, #255	@ 0xff
 8001536:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800153c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001540:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001542:	2307      	movs	r3, #7
 8001544:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = BUFFER_LAYER_1_ADDRESS;
 8001546:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 800154a:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = FRAMEBUFFER_WIDTH;
 800154c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001550:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = FRAMEBUFFER_HEIGHT;
 8001552:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001556:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800156a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800156e:	2200      	movs	r2, #0
 8001570:	4619      	mov	r1, r3
 8001572:	4822      	ldr	r0, [pc, #136]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 8001574:	f004 fe48 	bl	8006208 <HAL_LTDC_ConfigLayer>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_LTDC_Init+0x24e>
  {
    Error_Handler();
 800157e:	f000 fc0f 	bl	8001da0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = INNERBUFFER_WIDTH;
 8001586:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800158a:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = INNERBUFFER_HEIGHT;
 8001590:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001594:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001596:	2302      	movs	r3, #2
 8001598:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80015a2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80015a6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80015a8:	2307      	movs	r3, #7
 80015aa:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = (uint32_t)BUFFER_LAYER_2_ADDRESS;
 80015ac:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <MX_LTDC_Init+0x2d0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f503 13bb 	add.w	r3, r3, #1531904	@ 0x176000
 80015b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = INNERBUFFER_WIDTH;
 80015ba:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80015be:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = INNERBUFFER_HEIGHT;
 80015c0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80015c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80015d8:	463b      	mov	r3, r7
 80015da:	2201      	movs	r2, #1
 80015dc:	4619      	mov	r1, r3
 80015de:	4807      	ldr	r0, [pc, #28]	@ (80015fc <MX_LTDC_Init+0x2c8>)
 80015e0:	f004 fe12 	bl	8006208 <HAL_LTDC_ConfigLayer>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_LTDC_Init+0x2ba>
  {
    Error_Handler();
 80015ea:	f000 fbd9 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE END LTDC_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	3768      	adds	r7, #104	@ 0x68
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40020400 	.word	0x40020400
 80015fc:	20000234 	.word	0x20000234
 8001600:	40016800 	.word	0x40016800
 8001604:	200004b8 	.word	0x200004b8

08001608 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800160c:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <MX_QUADSPI_Init+0x50>)
 800160e:	4a13      	ldr	r2, [pc, #76]	@ (800165c <MX_QUADSPI_Init+0x54>)
 8001610:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001612:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <MX_QUADSPI_Init+0x50>)
 8001614:	22ff      	movs	r2, #255	@ 0xff
 8001616:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001618:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <MX_QUADSPI_Init+0x50>)
 800161a:	2201      	movs	r2, #1
 800161c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800161e:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <MX_QUADSPI_Init+0x50>)
 8001620:	2200      	movs	r2, #0
 8001622:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001624:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <MX_QUADSPI_Init+0x50>)
 8001626:	2201      	movs	r2, #1
 8001628:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800162a:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <MX_QUADSPI_Init+0x50>)
 800162c:	2200      	movs	r2, #0
 800162e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001630:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <MX_QUADSPI_Init+0x50>)
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001636:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <MX_QUADSPI_Init+0x50>)
 8001638:	2200      	movs	r2, #0
 800163a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <MX_QUADSPI_Init+0x50>)
 800163e:	2200      	movs	r2, #0
 8001640:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001642:	4805      	ldr	r0, [pc, #20]	@ (8001658 <MX_QUADSPI_Init+0x50>)
 8001644:	f005 f806 	bl	8006654 <HAL_QSPI_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800164e:	f000 fba7 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200002dc 	.word	0x200002dc
 800165c:	a0001000 	.word	0xa0001000

08001660 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001664:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <MX_SPI2_Init+0x64>)
 8001666:	4a18      	ldr	r2, [pc, #96]	@ (80016c8 <MX_SPI2_Init+0x68>)
 8001668:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800166a:	4b16      	ldr	r3, [pc, #88]	@ (80016c4 <MX_SPI2_Init+0x64>)
 800166c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001670:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001672:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <MX_SPI2_Init+0x64>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001678:	4b12      	ldr	r3, [pc, #72]	@ (80016c4 <MX_SPI2_Init+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800167e:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <MX_SPI2_Init+0x64>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001684:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <MX_SPI2_Init+0x64>)
 8001686:	2200      	movs	r2, #0
 8001688:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800168a:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <MX_SPI2_Init+0x64>)
 800168c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001690:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001692:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <MX_SPI2_Init+0x64>)
 8001694:	2218      	movs	r2, #24
 8001696:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001698:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <MX_SPI2_Init+0x64>)
 800169a:	2200      	movs	r2, #0
 800169c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800169e:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <MX_SPI2_Init+0x64>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a4:	4b07      	ldr	r3, [pc, #28]	@ (80016c4 <MX_SPI2_Init+0x64>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016aa:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <MX_SPI2_Init+0x64>)
 80016ac:	220a      	movs	r2, #10
 80016ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016b0:	4804      	ldr	r0, [pc, #16]	@ (80016c4 <MX_SPI2_Init+0x64>)
 80016b2:	f006 f85d 	bl	8007770 <HAL_SPI_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80016bc:	f000 fb70 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000328 	.word	0x20000328
 80016c8:	40003800 	.word	0x40003800

080016cc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80016d0:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <MX_UART4_Init+0x4c>)
 80016d2:	4a12      	ldr	r2, [pc, #72]	@ (800171c <MX_UART4_Init+0x50>)
 80016d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80016d6:	4b10      	ldr	r3, [pc, #64]	@ (8001718 <MX_UART4_Init+0x4c>)
 80016d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016dc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80016de:	4b0e      	ldr	r3, [pc, #56]	@ (8001718 <MX_UART4_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80016e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <MX_UART4_Init+0x4c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80016ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <MX_UART4_Init+0x4c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80016f0:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <MX_UART4_Init+0x4c>)
 80016f2:	220c      	movs	r2, #12
 80016f4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f6:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <MX_UART4_Init+0x4c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <MX_UART4_Init+0x4c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001702:	4805      	ldr	r0, [pc, #20]	@ (8001718 <MX_UART4_Init+0x4c>)
 8001704:	f006 fb5e 	bl	8007dc4 <HAL_UART_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800170e:	f000 fb47 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000380 	.word	0x20000380
 800171c:	40004c00 	.word	0x40004c00

08001720 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001724:	4b11      	ldr	r3, [pc, #68]	@ (800176c <MX_UART5_Init+0x4c>)
 8001726:	4a12      	ldr	r2, [pc, #72]	@ (8001770 <MX_UART5_Init+0x50>)
 8001728:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800172a:	4b10      	ldr	r3, [pc, #64]	@ (800176c <MX_UART5_Init+0x4c>)
 800172c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001730:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001732:	4b0e      	ldr	r3, [pc, #56]	@ (800176c <MX_UART5_Init+0x4c>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001738:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <MX_UART5_Init+0x4c>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800173e:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <MX_UART5_Init+0x4c>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001744:	4b09      	ldr	r3, [pc, #36]	@ (800176c <MX_UART5_Init+0x4c>)
 8001746:	220c      	movs	r2, #12
 8001748:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174a:	4b08      	ldr	r3, [pc, #32]	@ (800176c <MX_UART5_Init+0x4c>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <MX_UART5_Init+0x4c>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001756:	4805      	ldr	r0, [pc, #20]	@ (800176c <MX_UART5_Init+0x4c>)
 8001758:	f006 fb34 	bl	8007dc4 <HAL_UART_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001762:	f000 fb1d 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200003c8 	.word	0x200003c8
 8001770:	40005000 	.word	0x40005000

08001774 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001778:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <MX_UART8_Init+0x4c>)
 800177a:	4a12      	ldr	r2, [pc, #72]	@ (80017c4 <MX_UART8_Init+0x50>)
 800177c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800177e:	4b10      	ldr	r3, [pc, #64]	@ (80017c0 <MX_UART8_Init+0x4c>)
 8001780:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001784:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001786:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <MX_UART8_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800178c:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <MX_UART8_Init+0x4c>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001792:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <MX_UART8_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001798:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <MX_UART8_Init+0x4c>)
 800179a:	220c      	movs	r2, #12
 800179c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179e:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <MX_UART8_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a4:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <MX_UART8_Init+0x4c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80017aa:	4805      	ldr	r0, [pc, #20]	@ (80017c0 <MX_UART8_Init+0x4c>)
 80017ac:	f006 fb0a 	bl	8007dc4 <HAL_UART_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80017b6:	f000 faf3 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000410 	.word	0x20000410
 80017c4:	40007c00 	.word	0x40007c00

080017c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <MX_DMA_Init+0x3c>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001804 <MX_DMA_Init+0x3c>)
 80017d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <MX_DMA_Init+0x3c>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	2038      	movs	r0, #56	@ 0x38
 80017f0:	f003 fe9e 	bl	8005530 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017f4:	2038      	movs	r0, #56	@ 0x38
 80017f6:	f003 feb7 	bl	8005568 <HAL_NVIC_EnableIRQ>

}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800

08001808 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08c      	sub	sp, #48	@ 0x30
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]
 800181e:	615a      	str	r2, [r3, #20]
 8001820:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001822:	4b3b      	ldr	r3, [pc, #236]	@ (8001910 <MX_FMC_Init+0x108>)
 8001824:	4a3b      	ldr	r2, [pc, #236]	@ (8001914 <MX_FMC_Init+0x10c>)
 8001826:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001828:	4b39      	ldr	r3, [pc, #228]	@ (8001910 <MX_FMC_Init+0x108>)
 800182a:	2201      	movs	r2, #1
 800182c:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800182e:	4b38      	ldr	r3, [pc, #224]	@ (8001910 <MX_FMC_Init+0x108>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8001834:	4b36      	ldr	r3, [pc, #216]	@ (8001910 <MX_FMC_Init+0x108>)
 8001836:	2208      	movs	r2, #8
 8001838:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800183a:	4b35      	ldr	r3, [pc, #212]	@ (8001910 <MX_FMC_Init+0x108>)
 800183c:	2210      	movs	r2, #16
 800183e:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001840:	4b33      	ldr	r3, [pc, #204]	@ (8001910 <MX_FMC_Init+0x108>)
 8001842:	2240      	movs	r2, #64	@ 0x40
 8001844:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001846:	4b32      	ldr	r3, [pc, #200]	@ (8001910 <MX_FMC_Init+0x108>)
 8001848:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800184c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800184e:	4b30      	ldr	r3, [pc, #192]	@ (8001910 <MX_FMC_Init+0x108>)
 8001850:	2200      	movs	r2, #0
 8001852:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001854:	4b2e      	ldr	r3, [pc, #184]	@ (8001910 <MX_FMC_Init+0x108>)
 8001856:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800185a:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800185c:	4b2c      	ldr	r3, [pc, #176]	@ (8001910 <MX_FMC_Init+0x108>)
 800185e:	2200      	movs	r2, #0
 8001860:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001862:	4b2b      	ldr	r3, [pc, #172]	@ (8001910 <MX_FMC_Init+0x108>)
 8001864:	2200      	movs	r2, #0
 8001866:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001868:	2302      	movs	r3, #2
 800186a:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800186c:	2307      	movs	r3, #7
 800186e:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 6;
 8001870:	2306      	movs	r3, #6
 8001872:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 6;
 8001874:	2306      	movs	r3, #6
 8001876:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 8001878:	2303      	movs	r3, #3
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
  SdramTiming.RPDelay = 2;
 800187c:	2302      	movs	r3, #2
 800187e:	62bb      	str	r3, [r7, #40]	@ 0x28
  SdramTiming.RCDDelay = 3;
 8001880:	2303      	movs	r3, #3
 8001882:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	4821      	ldr	r0, [pc, #132]	@ (8001910 <MX_FMC_Init+0x108>)
 800188c:	f005 fe78 	bl	8007580 <HAL_SDRAM_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 8001896:	f000 fa83 	bl	8001da0 <Error_Handler>

  /* USER CODE BEGIN FMC_Init 2 */
  FMC_SDRAM_CommandTypeDef Command;
   /* Step 1 and Step 2 already done in HAL_SDRAM_Init() */
   /* Step 3: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800189a:	2301      	movs	r3, #1
 800189c:	607b      	str	r3, [r7, #4]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2; // Corrected
 800189e:	2308      	movs	r3, #8
 80018a0:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber      = 1;
 80018a2:	2301      	movs	r3, #1
 80018a4:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80018b0:	4619      	mov	r1, r3
 80018b2:	4817      	ldr	r0, [pc, #92]	@ (8001910 <MX_FMC_Init+0x108>)
 80018b4:	f005 feff 	bl	80076b6 <HAL_SDRAM_SendCommand>
    HAL_Delay(1); /* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
 80018b8:	2001      	movs	r0, #1
 80018ba:	f003 f94d 	bl	8004b58 <HAL_Delay>
    /* Step 5: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL; /* Set MODE bits to "010" */
 80018be:	2302      	movs	r3, #2
 80018c0:	607b      	str	r3, [r7, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80018c8:	4619      	mov	r1, r3
 80018ca:	4811      	ldr	r0, [pc, #68]	@ (8001910 <MX_FMC_Init+0x108>)
 80018cc:	f005 fef3 	bl	80076b6 <HAL_SDRAM_SendCommand>
    /* Step 6: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; /* Set MODE bits to "011" */
 80018d0:	2303      	movs	r3, #3
 80018d2:	607b      	str	r3, [r7, #4]
    Command.AutoRefreshNumber      = 2;
 80018d4:	2302      	movs	r3, #2
 80018d6:	60fb      	str	r3, [r7, #12]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80018de:	4619      	mov	r1, r3
 80018e0:	480b      	ldr	r0, [pc, #44]	@ (8001910 <MX_FMC_Init+0x108>)
 80018e2:	f005 fee8 	bl	80076b6 <HAL_SDRAM_SendCommand>
    /* Step 7: Program the external memory mode register */
    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;/*set the MODE bits to "100" */
 80018e6:	2304      	movs	r3, #4
 80018e8:	607b      	str	r3, [r7, #4]
    Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 80018ea:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80018ee:	613b      	str	r3, [r7, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80018f6:	4619      	mov	r1, r3
 80018f8:	4805      	ldr	r0, [pc, #20]	@ (8001910 <MX_FMC_Init+0x108>)
 80018fa:	f005 fedc 	bl	80076b6 <HAL_SDRAM_SendCommand>
    /* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455 */
    /* Set the device refresh rate
     * COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
             = [(64ms/4096) * 100MHz] - 20 = 1562.5 - 20 ~ 1542 */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1404);
 80018fe:	f240 517c 	movw	r1, #1404	@ 0x57c
 8001902:	4803      	ldr	r0, [pc, #12]	@ (8001910 <MX_FMC_Init+0x108>)
 8001904:	f005 ff0c 	bl	8007720 <HAL_SDRAM_ProgramRefreshRate>
  /* USER CODE END FMC_Init 2 */
}
 8001908:	bf00      	nop
 800190a:	3730      	adds	r7, #48	@ 0x30
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000458 	.word	0x20000458
 8001914:	a0000140 	.word	0xa0000140

08001918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08e      	sub	sp, #56	@ 0x38
 800191c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	623b      	str	r3, [r7, #32]
 8001932:	4b89      	ldr	r3, [pc, #548]	@ (8001b58 <MX_GPIO_Init+0x240>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4a88      	ldr	r2, [pc, #544]	@ (8001b58 <MX_GPIO_Init+0x240>)
 8001938:	f043 0310 	orr.w	r3, r3, #16
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4b86      	ldr	r3, [pc, #536]	@ (8001b58 <MX_GPIO_Init+0x240>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f003 0310 	and.w	r3, r3, #16
 8001946:	623b      	str	r3, [r7, #32]
 8001948:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
 800194e:	4b82      	ldr	r3, [pc, #520]	@ (8001b58 <MX_GPIO_Init+0x240>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	4a81      	ldr	r2, [pc, #516]	@ (8001b58 <MX_GPIO_Init+0x240>)
 8001954:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001958:	6313      	str	r3, [r2, #48]	@ 0x30
 800195a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b58 <MX_GPIO_Init+0x240>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001962:	61fb      	str	r3, [r7, #28]
 8001964:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
 800196a:	4b7b      	ldr	r3, [pc, #492]	@ (8001b58 <MX_GPIO_Init+0x240>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	4a7a      	ldr	r2, [pc, #488]	@ (8001b58 <MX_GPIO_Init+0x240>)
 8001970:	f043 0320 	orr.w	r3, r3, #32
 8001974:	6313      	str	r3, [r2, #48]	@ 0x30
 8001976:	4b78      	ldr	r3, [pc, #480]	@ (8001b58 <MX_GPIO_Init+0x240>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	f003 0320 	and.w	r3, r3, #32
 800197e:	61bb      	str	r3, [r7, #24]
 8001980:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	4b74      	ldr	r3, [pc, #464]	@ (8001b58 <MX_GPIO_Init+0x240>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	4a73      	ldr	r2, [pc, #460]	@ (8001b58 <MX_GPIO_Init+0x240>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	6313      	str	r3, [r2, #48]	@ 0x30
 8001992:	4b71      	ldr	r3, [pc, #452]	@ (8001b58 <MX_GPIO_Init+0x240>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001b58 <MX_GPIO_Init+0x240>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	4a6c      	ldr	r2, [pc, #432]	@ (8001b58 <MX_GPIO_Init+0x240>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001b58 <MX_GPIO_Init+0x240>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4b66      	ldr	r3, [pc, #408]	@ (8001b58 <MX_GPIO_Init+0x240>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	4a65      	ldr	r2, [pc, #404]	@ (8001b58 <MX_GPIO_Init+0x240>)
 80019c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ca:	4b63      	ldr	r3, [pc, #396]	@ (8001b58 <MX_GPIO_Init+0x240>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	4b5f      	ldr	r3, [pc, #380]	@ (8001b58 <MX_GPIO_Init+0x240>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	4a5e      	ldr	r2, [pc, #376]	@ (8001b58 <MX_GPIO_Init+0x240>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e6:	4b5c      	ldr	r3, [pc, #368]	@ (8001b58 <MX_GPIO_Init+0x240>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	4b58      	ldr	r3, [pc, #352]	@ (8001b58 <MX_GPIO_Init+0x240>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	4a57      	ldr	r2, [pc, #348]	@ (8001b58 <MX_GPIO_Init+0x240>)
 80019fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a02:	4b55      	ldr	r3, [pc, #340]	@ (8001b58 <MX_GPIO_Init+0x240>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	603b      	str	r3, [r7, #0]
 8001a12:	4b51      	ldr	r3, [pc, #324]	@ (8001b58 <MX_GPIO_Init+0x240>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	4a50      	ldr	r2, [pc, #320]	@ (8001b58 <MX_GPIO_Init+0x240>)
 8001a18:	f043 0308 	orr.w	r3, r3, #8
 8001a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1e:	4b4e      	ldr	r3, [pc, #312]	@ (8001b58 <MX_GPIO_Init+0x240>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|FLASH_RESET_Pin|ESP_RTS_Pin, GPIO_PIN_RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f240 1113 	movw	r1, #275	@ 0x113
 8001a30:	484a      	ldr	r0, [pc, #296]	@ (8001b5c <MX_GPIO_Init+0x244>)
 8001a32:	f004 fa3d 	bl	8005eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|LCD_T_CS_Pin, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8001a3c:	4848      	ldr	r0, [pc, #288]	@ (8001b60 <MX_GPIO_Init+0x248>)
 8001a3e:	f004 fa37 	bl	8005eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|FMC_LDQM_Pin|FMC_UDQM_Pin|ESP_RST_Pin
 8001a42:	2200      	movs	r2, #0
 8001a44:	f643 0130 	movw	r1, #14384	@ 0x3830
 8001a48:	4846      	ldr	r0, [pc, #280]	@ (8001b64 <MX_GPIO_Init+0x24c>)
 8001a4a:	f004 fa31 	bl	8005eb0 <HAL_GPIO_WritePin>
                          |ESP_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_7, GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2180      	movs	r1, #128	@ 0x80
 8001a52:	4845      	ldr	r0, [pc, #276]	@ (8001b68 <MX_GPIO_Init+0x250>)
 8001a54:	f004 fa2c 	bl	8005eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a58:	2380      	movs	r3, #128	@ 0x80
 8001a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4840      	ldr	r0, [pc, #256]	@ (8001b6c <MX_GPIO_Init+0x254>)
 8001a6c:	f004 f874 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 FLASH_RESET_Pin ESP_RTS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|FLASH_RESET_Pin|ESP_RTS_Pin;
 8001a70:	f240 1313 	movw	r3, #275	@ 0x113
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a76:	2301      	movs	r3, #1
 8001a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a86:	4619      	mov	r1, r3
 8001a88:	4834      	ldr	r0, [pc, #208]	@ (8001b5c <MX_GPIO_Init+0x244>)
 8001a8a:	f004 f865 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 LCD_T_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|LCD_T_CS_Pin;
 8001a8e:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	482e      	ldr	r0, [pc, #184]	@ (8001b60 <MX_GPIO_Init+0x248>)
 8001aa8:	f004 f856 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 FMC_LDQM_Pin FMC_UDQM_Pin ESP_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|FMC_LDQM_Pin|FMC_UDQM_Pin|ESP_RST_Pin;
 8001aac:	f643 0310 	movw	r3, #14352	@ 0x3810
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aba:	2300      	movs	r3, #0
 8001abc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001abe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4827      	ldr	r0, [pc, #156]	@ (8001b64 <MX_GPIO_Init+0x24c>)
 8001ac6:	f004 f847 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001aca:	2380      	movs	r3, #128	@ 0x80
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ada:	4619      	mov	r1, r3
 8001adc:	481f      	ldr	r0, [pc, #124]	@ (8001b5c <MX_GPIO_Init+0x244>)
 8001ade:	f004 f83b 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ae2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ae8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001aec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001af6:	4619      	mov	r1, r3
 8001af8:	481d      	ldr	r0, [pc, #116]	@ (8001b70 <MX_GPIO_Init+0x258>)
 8001afa:	f004 f82d 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_EN_Pin */
  GPIO_InitStruct.Pin = ESP_EN_Pin;
 8001afe:	2320      	movs	r3, #32
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001b02:	2311      	movs	r3, #17
 8001b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b06:	2301      	movs	r3, #1
 8001b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESP_EN_GPIO_Port, &GPIO_InitStruct);
 8001b0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b12:	4619      	mov	r1, r3
 8001b14:	4813      	ldr	r0, [pc, #76]	@ (8001b64 <MX_GPIO_Init+0x24c>)
 8001b16:	f004 f81f 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b1a:	2340      	movs	r3, #64	@ 0x40
 8001b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	480e      	ldr	r0, [pc, #56]	@ (8001b68 <MX_GPIO_Init+0x250>)
 8001b2e:	f004 f813 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b32:	2380      	movs	r3, #128	@ 0x80
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b46:	4619      	mov	r1, r3
 8001b48:	4807      	ldr	r0, [pc, #28]	@ (8001b68 <MX_GPIO_Init+0x250>)
 8001b4a:	f004 f805 	bl	8005b58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b4e:	bf00      	nop
 8001b50:	3738      	adds	r7, #56	@ 0x38
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40020800 	.word	0x40020800
 8001b60:	40020400 	.word	0x40020400
 8001b64:	40020c00 	.word	0x40020c00
 8001b68:	40022000 	.word	0x40022000
 8001b6c:	40021400 	.word	0x40021400
 8001b70:	40020000 	.word	0x40020000

08001b74 <RESTORE_ADC>:

/* USER CODE BEGIN 4 */

void RESTORE_ADC(){
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	@ 0x28
 8001b78:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001b7a:	f107 0318 	add.w	r3, r7, #24
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]
 8001b94:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b96:	2304      	movs	r3, #4
 8001b98:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	481b      	ldr	r0, [pc, #108]	@ (8001c10 <RESTORE_ADC+0x9c>)
 8001ba4:	f003 ffd8 	bl	8005b58 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	2104      	movs	r1, #4
 8001bac:	4818      	ldr	r0, [pc, #96]	@ (8001c10 <RESTORE_ADC+0x9c>)
 8001bae:	f004 f97f 	bl	8005eb0 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4815      	ldr	r0, [pc, #84]	@ (8001c10 <RESTORE_ADC+0x9c>)
 8001bbc:	f003 ffcc 	bl	8005b58 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	4812      	ldr	r0, [pc, #72]	@ (8001c10 <RESTORE_ADC+0x9c>)
 8001bc6:	f004 f973 	bl	8005eb0 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	480e      	ldr	r0, [pc, #56]	@ (8001c10 <RESTORE_ADC+0x9c>)
 8001bd8:	f003 ffbe 	bl	8005b58 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	4619      	mov	r1, r3
 8001be4:	480b      	ldr	r0, [pc, #44]	@ (8001c14 <RESTORE_ADC+0xa0>)
 8001be6:	f003 ffb7 	bl	8005b58 <HAL_GPIO_Init>

	osDelay(10);
 8001bea:	200a      	movs	r0, #10
 8001bec:	f006 ff30 	bl	8008a50 <osDelay>

	sConfig.Channel = ADC_CHANNEL_9;
 8001bf0:	2309      	movs	r3, #9
 8001bf2:	61bb      	str	r3, [r7, #24]
	sConfig.Rank = 1;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	61fb      	str	r3, [r7, #28]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001bf8:	2307      	movs	r3, #7
 8001bfa:	623b      	str	r3, [r7, #32]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001bfc:	f107 0318 	add.w	r3, r7, #24
 8001c00:	4619      	mov	r1, r3
 8001c02:	4805      	ldr	r0, [pc, #20]	@ (8001c18 <RESTORE_ADC+0xa4>)
 8001c04:	f003 f9ae 	bl	8004f64 <HAL_ADC_ConfigChannel>
}
 8001c08:	bf00      	nop
 8001c0a:	3728      	adds	r7, #40	@ 0x28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40020800 	.word	0x40020800
 8001c14:	40020400 	.word	0x40020400
 8001c18:	2000018c 	.word	0x2000018c

08001c1c <mainFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_mainFunction */
void mainFunction(void *argument)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b09c      	sub	sp, #112	@ 0x70
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	char msg8[100];
	sprintf(msg8,"Main Function  ###### MAIN #####\n");
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	490b      	ldr	r1, [pc, #44]	@ (8001c58 <mainFunction+0x3c>)
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f00a f8de 	bl	800bdec <siprintf>


	HAL_UART_Transmit(&huart8, (uint8_t *)msg8, strlen(msg8), 1000);
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fae3 	bl	8000200 <strlen>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	f107 010c 	add.w	r1, r7, #12
 8001c42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c46:	4805      	ldr	r0, [pc, #20]	@ (8001c5c <mainFunction+0x40>)
 8001c48:	f006 f90c 	bl	8007e64 <HAL_UART_Transmit>
    osDelay(500);
 8001c4c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c50:	f006 fefe 	bl	8008a50 <osDelay>
  {
 8001c54:	bf00      	nop
 8001c56:	e7e5      	b.n	8001c24 <mainFunction+0x8>
 8001c58:	0800c998 	.word	0x0800c998
 8001c5c:	20000410 	.word	0x20000410

08001c60 <uartFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uartFunction */
void uartFunction(void *argument)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b09c      	sub	sp, #112	@ 0x70
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uartFunction */
  /* Infinite loop */
  for(;;)
  {	char msg8[100];
	sprintf(msg8,"Uart Function  ###### UART #####\n");
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	490b      	ldr	r1, [pc, #44]	@ (8001c9c <uartFunction+0x3c>)
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f00a f8bc 	bl	800bdec <siprintf>
	HAL_UART_Transmit(&huart8, (uint8_t *)msg8, strlen(msg8), 1000);
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fac1 	bl	8000200 <strlen>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	f107 010c 	add.w	r1, r7, #12
 8001c86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c8a:	4805      	ldr	r0, [pc, #20]	@ (8001ca0 <uartFunction+0x40>)
 8001c8c:	f006 f8ea 	bl	8007e64 <HAL_UART_Transmit>
    osDelay(200);
 8001c90:	20c8      	movs	r0, #200	@ 0xc8
 8001c92:	f006 fedd 	bl	8008a50 <osDelay>
  {	char msg8[100];
 8001c96:	bf00      	nop
 8001c98:	e7e6      	b.n	8001c68 <uartFunction+0x8>
 8001c9a:	bf00      	nop
 8001c9c:	0800c9bc 	.word	0x0800c9bc
 8001ca0:	20000410 	.word	0x20000410

08001ca4 <adcFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_adcFunction */
void adcFunction(void *argument)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b09c      	sub	sp, #112	@ 0x70
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN adcFunction */
  int y_;
  /* Infinite loop */
  for(;;)
  {	char msg8[100];
	sprintf(msg8,"ADC Function  ###### ADC #####\n");
 8001cac:	f107 0308 	add.w	r3, r7, #8
 8001cb0:	491e      	ldr	r1, [pc, #120]	@ (8001d2c <adcFunction+0x88>)
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f00a f89a 	bl	800bdec <siprintf>
	HAL_UART_Transmit(&huart8, (uint8_t *)msg8, strlen(msg8), 1000);
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fa9f 	bl	8000200 <strlen>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	f107 0108 	add.w	r1, r7, #8
 8001cca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cce:	4818      	ldr	r0, [pc, #96]	@ (8001d30 <adcFunction+0x8c>)
 8001cd0:	f006 f8c8 	bl	8007e64 <HAL_UART_Transmit>

	RESTORE_ADC(); // Restore ADC to its starting condition
 8001cd4:	f7ff ff4e 	bl	8001b74 <RESTORE_ADC>
	HAL_ADC_Start(&hadc1); // Start ADC based on starting condition
 8001cd8:	4816      	ldr	r0, [pc, #88]	@ (8001d34 <adcFunction+0x90>)
 8001cda:	f002 ffa5 	bl	8004c28 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) { // Read ADC in Polling Mode
 8001cde:	210a      	movs	r1, #10
 8001ce0:	4814      	ldr	r0, [pc, #80]	@ (8001d34 <adcFunction+0x90>)
 8001ce2:	f003 f8a6 	bl	8004e32 <HAL_ADC_PollForConversion>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d11b      	bne.n	8001d24 <adcFunction+0x80>
		y_ = HAL_ADC_GetValue(&hadc1); // Get Value stored in ADC register
 8001cec:	4811      	ldr	r0, [pc, #68]	@ (8001d34 <adcFunction+0x90>)
 8001cee:	f003 f92b 	bl	8004f48 <HAL_ADC_GetValue>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	66fb      	str	r3, [r7, #108]	@ 0x6c
		HAL_ADC_Stop(&hadc1); // Stop Conversion
 8001cf6:	480f      	ldr	r0, [pc, #60]	@ (8001d34 <adcFunction+0x90>)
 8001cf8:	f003 f868 	bl	8004dcc <HAL_ADC_Stop>
		if (y_ > 2500) { // Check Reading to identify if it was touched
 8001cfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001cfe:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001d02:	4293      	cmp	r3, r2
 8001d04:	dd0e      	ble.n	8001d24 <adcFunction+0x80>
			scan_(BUFFER_LAYER_1_ADDRESS);
 8001d06:	f04f 4050 	mov.w	r0, #3489660928	@ 0xd0000000
 8001d0a:	f002 f809 	bl	8003d20 <scan_>
			osDelay(100);
 8001d0e:	2064      	movs	r0, #100	@ 0x64
 8001d10:	f006 fe9e 	bl	8008a50 <osDelay>

			if (HAL_ADC_Init(&hadc1) != HAL_OK) Error_Handler(); // Make sure it is re-initialized
 8001d14:	4807      	ldr	r0, [pc, #28]	@ (8001d34 <adcFunction+0x90>)
 8001d16:	f002 ff43 	bl	8004ba0 <HAL_ADC_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <adcFunction+0x80>
 8001d20:	f000 f83e 	bl	8001da0 <Error_Handler>
		}
    }
    osDelay(100);
 8001d24:	2064      	movs	r0, #100	@ 0x64
 8001d26:	f006 fe93 	bl	8008a50 <osDelay>
  {	char msg8[100];
 8001d2a:	e7bf      	b.n	8001cac <adcFunction+0x8>
 8001d2c:	0800c9e0 	.word	0x0800c9e0
 8001d30:	20000410 	.word	0x20000410
 8001d34:	2000018c 	.word	0x2000018c

08001d38 <lcd_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_lcd_function */
void lcd_function(void *argument)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b09c      	sub	sp, #112	@ 0x70
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN lcd_function */
  /* Infinite loop */
  for(;;)
  {	char msg8[100];
	sprintf(msg8,"LCD Function  ###### LCD #####\n");
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	490b      	ldr	r1, [pc, #44]	@ (8001d74 <lcd_function+0x3c>)
 8001d46:	4618      	mov	r0, r3
 8001d48:	f00a f850 	bl	800bdec <siprintf>
	HAL_UART_Transmit(&huart8, (uint8_t *)msg8, strlen(msg8), 1000);
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fa55 	bl	8000200 <strlen>
 8001d56:	4603      	mov	r3, r0
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	f107 010c 	add.w	r1, r7, #12
 8001d5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d62:	4805      	ldr	r0, [pc, #20]	@ (8001d78 <lcd_function+0x40>)
 8001d64:	f006 f87e 	bl	8007e64 <HAL_UART_Transmit>
    osDelay(400);
 8001d68:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001d6c:	f006 fe70 	bl	8008a50 <osDelay>
  {	char msg8[100];
 8001d70:	bf00      	nop
 8001d72:	e7e5      	b.n	8001d40 <lcd_function+0x8>
 8001d74:	0800ca00 	.word	0x0800ca00
 8001d78:	20000410 	.word	0x20000410

08001d7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a04      	ldr	r2, [pc, #16]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d101      	bne.n	8001d92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d8e:	f002 fec3 	bl	8004b18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40001000 	.word	0x40001000

08001da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001da4:	b672      	cpsid	i
}
 8001da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001da8:	bf00      	nop
 8001daa:	e7fd      	b.n	8001da8 <Error_Handler+0x8>

08001dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	4b12      	ldr	r3, [pc, #72]	@ (8001e00 <HAL_MspInit+0x54>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dba:	4a11      	ldr	r2, [pc, #68]	@ (8001e00 <HAL_MspInit+0x54>)
 8001dbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e00 <HAL_MspInit+0x54>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dca:	607b      	str	r3, [r7, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	603b      	str	r3, [r7, #0]
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <HAL_MspInit+0x54>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e00 <HAL_MspInit+0x54>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dde:	4b08      	ldr	r3, [pc, #32]	@ (8001e00 <HAL_MspInit+0x54>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	210f      	movs	r1, #15
 8001dee:	f06f 0001 	mvn.w	r0, #1
 8001df2:	f003 fb9d 	bl	8005530 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800

08001e04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	@ 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a3c      	ldr	r2, [pc, #240]	@ (8001f14 <HAL_ADC_MspInit+0x110>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d171      	bne.n	8001f0a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f18 <HAL_ADC_MspInit+0x114>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2e:	4a3a      	ldr	r2, [pc, #232]	@ (8001f18 <HAL_ADC_MspInit+0x114>)
 8001e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e36:	4b38      	ldr	r3, [pc, #224]	@ (8001f18 <HAL_ADC_MspInit+0x114>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	4b34      	ldr	r3, [pc, #208]	@ (8001f18 <HAL_ADC_MspInit+0x114>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	4a33      	ldr	r2, [pc, #204]	@ (8001f18 <HAL_ADC_MspInit+0x114>)
 8001e4c:	f043 0304 	orr.w	r3, r3, #4
 8001e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e52:	4b31      	ldr	r3, [pc, #196]	@ (8001f18 <HAL_ADC_MspInit+0x114>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	4b2d      	ldr	r3, [pc, #180]	@ (8001f18 <HAL_ADC_MspInit+0x114>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	4a2c      	ldr	r2, [pc, #176]	@ (8001f18 <HAL_ADC_MspInit+0x114>)
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001f18 <HAL_ADC_MspInit+0x114>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4823      	ldr	r0, [pc, #140]	@ (8001f1c <HAL_ADC_MspInit+0x118>)
 8001e8e:	f003 fe63 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e92:	2302      	movs	r3, #2
 8001e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e96:	2303      	movs	r3, #3
 8001e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9e:	f107 0314 	add.w	r3, r7, #20
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	481e      	ldr	r0, [pc, #120]	@ (8001f20 <HAL_ADC_MspInit+0x11c>)
 8001ea6:	f003 fe57 	bl	8005b58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8001f24 <HAL_ADC_MspInit+0x120>)
 8001eac:	4a1e      	ldr	r2, [pc, #120]	@ (8001f28 <HAL_ADC_MspInit+0x124>)
 8001eae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f24 <HAL_ADC_MspInit+0x120>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f24 <HAL_ADC_MspInit+0x120>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ebc:	4b19      	ldr	r3, [pc, #100]	@ (8001f24 <HAL_ADC_MspInit+0x120>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ec2:	4b18      	ldr	r3, [pc, #96]	@ (8001f24 <HAL_ADC_MspInit+0x120>)
 8001ec4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ec8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001eca:	4b16      	ldr	r3, [pc, #88]	@ (8001f24 <HAL_ADC_MspInit+0x120>)
 8001ecc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ed0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ed2:	4b14      	ldr	r3, [pc, #80]	@ (8001f24 <HAL_ADC_MspInit+0x120>)
 8001ed4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ed8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001eda:	4b12      	ldr	r3, [pc, #72]	@ (8001f24 <HAL_ADC_MspInit+0x120>)
 8001edc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ee0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ee2:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <HAL_ADC_MspInit+0x120>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f24 <HAL_ADC_MspInit+0x120>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001eee:	480d      	ldr	r0, [pc, #52]	@ (8001f24 <HAL_ADC_MspInit+0x120>)
 8001ef0:	f003 fb48 	bl	8005584 <HAL_DMA_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001efa:	f7ff ff51 	bl	8001da0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a08      	ldr	r2, [pc, #32]	@ (8001f24 <HAL_ADC_MspInit+0x120>)
 8001f02:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f04:	4a07      	ldr	r2, [pc, #28]	@ (8001f24 <HAL_ADC_MspInit+0x120>)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001f0a:	bf00      	nop
 8001f0c:	3728      	adds	r7, #40	@ 0x28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40012000 	.word	0x40012000
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40020800 	.word	0x40020800
 8001f20:	40020400 	.word	0x40020400
 8001f24:	200001d4 	.word	0x200001d4
 8001f28:	40026410 	.word	0x40026410

08001f2c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b0a0      	sub	sp, #128	@ 0x80
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f44:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f48:	223c      	movs	r2, #60	@ 0x3c
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f009 ff6d 	bl	800be2c <memset>
  if(hltdc->Instance==LTDC)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4aab      	ldr	r2, [pc, #684]	@ (8002204 <HAL_LTDC_MspInit+0x2d8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	f040 814f 	bne.w	80021fc <HAL_LTDC_MspInit+0x2d0>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f5e:	2308      	movs	r3, #8
 8001f60:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 8001f62:	233c      	movs	r3, #60	@ 0x3c
 8001f64:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 8001f66:	2303      	movs	r3, #3
 8001f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f6e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f72:	4618      	mov	r0, r3
 8001f74:	f004 fe42 	bl	8006bfc <HAL_RCCEx_PeriphCLKConfig>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001f7e:	f7ff ff0f 	bl	8001da0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f86:	4ba0      	ldr	r3, [pc, #640]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8a:	4a9f      	ldr	r2, [pc, #636]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 8001f8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f92:	4b9d      	ldr	r3, [pc, #628]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f96:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fa2:	4b99      	ldr	r3, [pc, #612]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	4a98      	ldr	r2, [pc, #608]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 8001fa8:	f043 0310 	orr.w	r3, r3, #16
 8001fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fae:	4b96      	ldr	r3, [pc, #600]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fbe:	4b92      	ldr	r3, [pc, #584]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	4a91      	ldr	r2, [pc, #580]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 8001fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fca:	4b8f      	ldr	r3, [pc, #572]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
 8001fda:	4b8b      	ldr	r3, [pc, #556]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	4a8a      	ldr	r2, [pc, #552]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 8001fe0:	f043 0320 	orr.w	r3, r3, #32
 8001fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe6:	4b88      	ldr	r3, [pc, #544]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	623b      	str	r3, [r7, #32]
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	4b84      	ldr	r3, [pc, #528]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	4a83      	ldr	r2, [pc, #524]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6313      	str	r3, [r2, #48]	@ 0x30
 8002002:	4b81      	ldr	r3, [pc, #516]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	61fb      	str	r3, [r7, #28]
 800200c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	4b7d      	ldr	r3, [pc, #500]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	4a7c      	ldr	r2, [pc, #496]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 8002018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800201c:	6313      	str	r3, [r2, #48]	@ 0x30
 800201e:	4b7a      	ldr	r3, [pc, #488]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002026:	61bb      	str	r3, [r7, #24]
 8002028:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	4b76      	ldr	r3, [pc, #472]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	4a75      	ldr	r2, [pc, #468]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 8002034:	f043 0302 	orr.w	r3, r3, #2
 8002038:	6313      	str	r3, [r2, #48]	@ 0x30
 800203a:	4b73      	ldr	r3, [pc, #460]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	4b6f      	ldr	r3, [pc, #444]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	4a6e      	ldr	r2, [pc, #440]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 8002050:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002054:	6313      	str	r3, [r2, #48]	@ 0x30
 8002056:	4b6c      	ldr	r3, [pc, #432]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	4b68      	ldr	r3, [pc, #416]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	4a67      	ldr	r2, [pc, #412]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 800206c:	f043 0308 	orr.w	r3, r3, #8
 8002070:	6313      	str	r3, [r2, #48]	@ 0x30
 8002072:	4b65      	ldr	r3, [pc, #404]	@ (8002208 <HAL_LTDC_MspInit+0x2dc>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    PG12     ------> LTDC_B1
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    PI4     ------> LTDC_B4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800207e:	2370      	movs	r3, #112	@ 0x70
 8002080:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208a:	2300      	movs	r3, #0
 800208c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800208e:	230e      	movs	r3, #14
 8002090:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002092:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002096:	4619      	mov	r1, r3
 8002098:	485c      	ldr	r0, [pc, #368]	@ (800220c <HAL_LTDC_MspInit+0x2e0>)
 800209a:	f003 fd5d 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_4;
 800209e:	f44f 63c2 	mov.w	r3, #1552	@ 0x610
 80020a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2300      	movs	r3, #0
 80020ae:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020b0:	230e      	movs	r3, #14
 80020b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020b4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80020b8:	4619      	mov	r1, r3
 80020ba:	4855      	ldr	r0, [pc, #340]	@ (8002210 <HAL_LTDC_MspInit+0x2e4>)
 80020bc:	f003 fd4c 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80020c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80020d2:	2309      	movs	r3, #9
 80020d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020d6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80020da:	4619      	mov	r1, r3
 80020dc:	484c      	ldr	r0, [pc, #304]	@ (8002210 <HAL_LTDC_MspInit+0x2e4>)
 80020de:	f003 fd3b 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020f4:	230e      	movs	r3, #14
 80020f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020f8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80020fc:	4619      	mov	r1, r3
 80020fe:	4845      	ldr	r0, [pc, #276]	@ (8002214 <HAL_LTDC_MspInit+0x2e8>)
 8002100:	f003 fd2a 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8002104:	f241 136e 	movw	r3, #4462	@ 0x116e
 8002108:	66fb      	str	r3, [r7, #108]	@ 0x6c
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002112:	2300      	movs	r3, #0
 8002114:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002116:	230e      	movs	r3, #14
 8002118:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800211e:	4619      	mov	r1, r3
 8002120:	483d      	ldr	r0, [pc, #244]	@ (8002218 <HAL_LTDC_MspInit+0x2ec>)
 8002122:	f003 fd19 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8002126:	2314      	movs	r3, #20
 8002128:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212a:	2302      	movs	r3, #2
 800212c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	2300      	movs	r3, #0
 8002134:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002136:	230e      	movs	r3, #14
 8002138:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800213a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800213e:	4619      	mov	r1, r3
 8002140:	4836      	ldr	r0, [pc, #216]	@ (800221c <HAL_LTDC_MspInit+0x2f0>)
 8002142:	f003 fd09 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002146:	2301      	movs	r3, #1
 8002148:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214a:	2302      	movs	r3, #2
 800214c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002156:	2309      	movs	r3, #9
 8002158:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800215e:	4619      	mov	r1, r3
 8002160:	482f      	ldr	r0, [pc, #188]	@ (8002220 <HAL_LTDC_MspInit+0x2f4>)
 8002162:	f003 fcf9 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8002166:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 800216a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2300      	movs	r3, #0
 8002176:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002178:	230e      	movs	r3, #14
 800217a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002180:	4619      	mov	r1, r3
 8002182:	4827      	ldr	r0, [pc, #156]	@ (8002220 <HAL_LTDC_MspInit+0x2f4>)
 8002184:	f003 fce8 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_12;
 8002188:	f44f 53c6 	mov.w	r3, #6336	@ 0x18c0
 800218c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218e:	2302      	movs	r3, #2
 8002190:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800219a:	230e      	movs	r3, #14
 800219c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800219e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80021a2:	4619      	mov	r1, r3
 80021a4:	481f      	ldr	r0, [pc, #124]	@ (8002224 <HAL_LTDC_MspInit+0x2f8>)
 80021a6:	f003 fcd7 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80021aa:	2348      	movs	r3, #72	@ 0x48
 80021ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ae:	2302      	movs	r3, #2
 80021b0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b6:	2300      	movs	r3, #0
 80021b8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021ba:	230e      	movs	r3, #14
 80021bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021be:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80021c2:	4619      	mov	r1, r3
 80021c4:	4818      	ldr	r0, [pc, #96]	@ (8002228 <HAL_LTDC_MspInit+0x2fc>)
 80021c6:	f003 fcc7 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80021dc:	2309      	movs	r3, #9
 80021de:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021e0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80021e4:	4619      	mov	r1, r3
 80021e6:	480f      	ldr	r0, [pc, #60]	@ (8002224 <HAL_LTDC_MspInit+0x2f8>)
 80021e8:	f003 fcb6 	bl	8005b58 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80021ec:	2200      	movs	r2, #0
 80021ee:	2105      	movs	r1, #5
 80021f0:	2058      	movs	r0, #88	@ 0x58
 80021f2:	f003 f99d 	bl	8005530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80021f6:	2058      	movs	r0, #88	@ 0x58
 80021f8:	f003 f9b6 	bl	8005568 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80021fc:	bf00      	nop
 80021fe:	3780      	adds	r7, #128	@ 0x80
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40016800 	.word	0x40016800
 8002208:	40023800 	.word	0x40023800
 800220c:	40021000 	.word	0x40021000
 8002210:	40022000 	.word	0x40022000
 8002214:	40021400 	.word	0x40021400
 8002218:	40020000 	.word	0x40020000
 800221c:	40021c00 	.word	0x40021c00
 8002220:	40020400 	.word	0x40020400
 8002224:	40021800 	.word	0x40021800
 8002228:	40020c00 	.word	0x40020c00

0800222c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08c      	sub	sp, #48	@ 0x30
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 031c 	add.w	r3, r7, #28
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a4f      	ldr	r2, [pc, #316]	@ (8002388 <HAL_QSPI_MspInit+0x15c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	f040 8098 	bne.w	8002380 <HAL_QSPI_MspInit+0x154>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002250:	2300      	movs	r3, #0
 8002252:	61bb      	str	r3, [r7, #24]
 8002254:	4b4d      	ldr	r3, [pc, #308]	@ (800238c <HAL_QSPI_MspInit+0x160>)
 8002256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002258:	4a4c      	ldr	r2, [pc, #304]	@ (800238c <HAL_QSPI_MspInit+0x160>)
 800225a:	f043 0302 	orr.w	r3, r3, #2
 800225e:	6393      	str	r3, [r2, #56]	@ 0x38
 8002260:	4b4a      	ldr	r3, [pc, #296]	@ (800238c <HAL_QSPI_MspInit+0x160>)
 8002262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	61bb      	str	r3, [r7, #24]
 800226a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	4b46      	ldr	r3, [pc, #280]	@ (800238c <HAL_QSPI_MspInit+0x160>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002274:	4a45      	ldr	r2, [pc, #276]	@ (800238c <HAL_QSPI_MspInit+0x160>)
 8002276:	f043 0310 	orr.w	r3, r3, #16
 800227a:	6313      	str	r3, [r2, #48]	@ 0x30
 800227c:	4b43      	ldr	r3, [pc, #268]	@ (800238c <HAL_QSPI_MspInit+0x160>)
 800227e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002288:	2300      	movs	r3, #0
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	4b3f      	ldr	r3, [pc, #252]	@ (800238c <HAL_QSPI_MspInit+0x160>)
 800228e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002290:	4a3e      	ldr	r2, [pc, #248]	@ (800238c <HAL_QSPI_MspInit+0x160>)
 8002292:	f043 0320 	orr.w	r3, r3, #32
 8002296:	6313      	str	r3, [r2, #48]	@ 0x30
 8002298:	4b3c      	ldr	r3, [pc, #240]	@ (800238c <HAL_QSPI_MspInit+0x160>)
 800229a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229c:	f003 0320 	and.w	r3, r3, #32
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a4:	2300      	movs	r3, #0
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	4b38      	ldr	r3, [pc, #224]	@ (800238c <HAL_QSPI_MspInit+0x160>)
 80022aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ac:	4a37      	ldr	r2, [pc, #220]	@ (800238c <HAL_QSPI_MspInit+0x160>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b4:	4b35      	ldr	r3, [pc, #212]	@ (800238c <HAL_QSPI_MspInit+0x160>)
 80022b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c0:	2300      	movs	r3, #0
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	4b31      	ldr	r3, [pc, #196]	@ (800238c <HAL_QSPI_MspInit+0x160>)
 80022c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c8:	4a30      	ldr	r2, [pc, #192]	@ (800238c <HAL_QSPI_MspInit+0x160>)
 80022ca:	f043 0302 	orr.w	r3, r3, #2
 80022ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d0:	4b2e      	ldr	r3, [pc, #184]	@ (800238c <HAL_QSPI_MspInit+0x160>)
 80022d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PA7     ------> QUADSPI_CLK
    PB10     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022dc:	2304      	movs	r3, #4
 80022de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e8:	2303      	movs	r3, #3
 80022ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80022ec:	2309      	movs	r3, #9
 80022ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022f0:	f107 031c 	add.w	r3, r7, #28
 80022f4:	4619      	mov	r1, r3
 80022f6:	4826      	ldr	r0, [pc, #152]	@ (8002390 <HAL_QSPI_MspInit+0x164>)
 80022f8:	f003 fc2e 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022fc:	2340      	movs	r3, #64	@ 0x40
 80022fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002308:	2303      	movs	r3, #3
 800230a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800230c:	2309      	movs	r3, #9
 800230e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002310:	f107 031c 	add.w	r3, r7, #28
 8002314:	4619      	mov	r1, r3
 8002316:	481f      	ldr	r0, [pc, #124]	@ (8002394 <HAL_QSPI_MspInit+0x168>)
 8002318:	f003 fc1e 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800231c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232a:	2303      	movs	r3, #3
 800232c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 800232e:	230a      	movs	r3, #10
 8002330:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002332:	f107 031c 	add.w	r3, r7, #28
 8002336:	4619      	mov	r1, r3
 8002338:	4816      	ldr	r0, [pc, #88]	@ (8002394 <HAL_QSPI_MspInit+0x168>)
 800233a:	f003 fc0d 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800233e:	2380      	movs	r3, #128	@ 0x80
 8002340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234a:	2303      	movs	r3, #3
 800234c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 800234e:	230a      	movs	r3, #10
 8002350:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002352:	f107 031c 	add.w	r3, r7, #28
 8002356:	4619      	mov	r1, r3
 8002358:	480f      	ldr	r0, [pc, #60]	@ (8002398 <HAL_QSPI_MspInit+0x16c>)
 800235a:	f003 fbfd 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800235e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236c:	2303      	movs	r3, #3
 800236e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002370:	2309      	movs	r3, #9
 8002372:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002374:	f107 031c 	add.w	r3, r7, #28
 8002378:	4619      	mov	r1, r3
 800237a:	4808      	ldr	r0, [pc, #32]	@ (800239c <HAL_QSPI_MspInit+0x170>)
 800237c:	f003 fbec 	bl	8005b58 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002380:	bf00      	nop
 8002382:	3730      	adds	r7, #48	@ 0x30
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	a0001000 	.word	0xa0001000
 800238c:	40023800 	.word	0x40023800
 8002390:	40021000 	.word	0x40021000
 8002394:	40021400 	.word	0x40021400
 8002398:	40020000 	.word	0x40020000
 800239c:	40020400 	.word	0x40020400

080023a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	@ 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a28      	ldr	r2, [pc, #160]	@ (8002460 <HAL_SPI_MspInit+0xc0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d14a      	bne.n	8002458 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	4b27      	ldr	r3, [pc, #156]	@ (8002464 <HAL_SPI_MspInit+0xc4>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ca:	4a26      	ldr	r2, [pc, #152]	@ (8002464 <HAL_SPI_MspInit+0xc4>)
 80023cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023d2:	4b24      	ldr	r3, [pc, #144]	@ (8002464 <HAL_SPI_MspInit+0xc4>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b20      	ldr	r3, [pc, #128]	@ (8002464 <HAL_SPI_MspInit+0xc4>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002464 <HAL_SPI_MspInit+0xc4>)
 80023e8:	f043 0304 	orr.w	r3, r3, #4
 80023ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002464 <HAL_SPI_MspInit+0xc4>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	4b19      	ldr	r3, [pc, #100]	@ (8002464 <HAL_SPI_MspInit+0xc4>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	4a18      	ldr	r2, [pc, #96]	@ (8002464 <HAL_SPI_MspInit+0xc4>)
 8002404:	f043 0302 	orr.w	r3, r3, #2
 8002408:	6313      	str	r3, [r2, #48]	@ 0x30
 800240a:	4b16      	ldr	r3, [pc, #88]	@ (8002464 <HAL_SPI_MspInit+0xc4>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002416:	2308      	movs	r3, #8
 8002418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241a:	2302      	movs	r3, #2
 800241c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002422:	2303      	movs	r3, #3
 8002424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002426:	2305      	movs	r3, #5
 8002428:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800242a:	f107 0314 	add.w	r3, r7, #20
 800242e:	4619      	mov	r1, r3
 8002430:	480d      	ldr	r0, [pc, #52]	@ (8002468 <HAL_SPI_MspInit+0xc8>)
 8002432:	f003 fb91 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002436:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800243a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243c:	2302      	movs	r3, #2
 800243e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002444:	2303      	movs	r3, #3
 8002446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002448:	2305      	movs	r3, #5
 800244a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	4619      	mov	r1, r3
 8002452:	4806      	ldr	r0, [pc, #24]	@ (800246c <HAL_SPI_MspInit+0xcc>)
 8002454:	f003 fb80 	bl	8005b58 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002458:	bf00      	nop
 800245a:	3728      	adds	r7, #40	@ 0x28
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40003800 	.word	0x40003800
 8002464:	40023800 	.word	0x40023800
 8002468:	40020800 	.word	0x40020800
 800246c:	40020400 	.word	0x40020400

08002470 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08e      	sub	sp, #56	@ 0x38
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002478:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a5b      	ldr	r2, [pc, #364]	@ (80025fc <HAL_UART_MspInit+0x18c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d12d      	bne.n	80024ee <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	623b      	str	r3, [r7, #32]
 8002496:	4b5a      	ldr	r3, [pc, #360]	@ (8002600 <HAL_UART_MspInit+0x190>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	4a59      	ldr	r2, [pc, #356]	@ (8002600 <HAL_UART_MspInit+0x190>)
 800249c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80024a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024a2:	4b57      	ldr	r3, [pc, #348]	@ (8002600 <HAL_UART_MspInit+0x190>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024aa:	623b      	str	r3, [r7, #32]
 80024ac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
 80024b2:	4b53      	ldr	r3, [pc, #332]	@ (8002600 <HAL_UART_MspInit+0x190>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b6:	4a52      	ldr	r2, [pc, #328]	@ (8002600 <HAL_UART_MspInit+0x190>)
 80024b8:	f043 0304 	orr.w	r3, r3, #4
 80024bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024be:	4b50      	ldr	r3, [pc, #320]	@ (8002600 <HAL_UART_MspInit+0x190>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	61fb      	str	r3, [r7, #28]
 80024c8:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80024ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d0:	2302      	movs	r3, #2
 80024d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d8:	2303      	movs	r3, #3
 80024da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80024dc:	2308      	movs	r3, #8
 80024de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024e4:	4619      	mov	r1, r3
 80024e6:	4847      	ldr	r0, [pc, #284]	@ (8002604 <HAL_UART_MspInit+0x194>)
 80024e8:	f003 fb36 	bl	8005b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 80024ec:	e081      	b.n	80025f2 <HAL_UART_MspInit+0x182>
  else if(huart->Instance==UART5)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a45      	ldr	r2, [pc, #276]	@ (8002608 <HAL_UART_MspInit+0x198>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d14b      	bne.n	8002590 <HAL_UART_MspInit+0x120>
    __HAL_RCC_UART5_CLK_ENABLE();
 80024f8:	2300      	movs	r3, #0
 80024fa:	61bb      	str	r3, [r7, #24]
 80024fc:	4b40      	ldr	r3, [pc, #256]	@ (8002600 <HAL_UART_MspInit+0x190>)
 80024fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002500:	4a3f      	ldr	r2, [pc, #252]	@ (8002600 <HAL_UART_MspInit+0x190>)
 8002502:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002506:	6413      	str	r3, [r2, #64]	@ 0x40
 8002508:	4b3d      	ldr	r3, [pc, #244]	@ (8002600 <HAL_UART_MspInit+0x190>)
 800250a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002510:	61bb      	str	r3, [r7, #24]
 8002512:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	4b39      	ldr	r3, [pc, #228]	@ (8002600 <HAL_UART_MspInit+0x190>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251c:	4a38      	ldr	r2, [pc, #224]	@ (8002600 <HAL_UART_MspInit+0x190>)
 800251e:	f043 0304 	orr.w	r3, r3, #4
 8002522:	6313      	str	r3, [r2, #48]	@ 0x30
 8002524:	4b36      	ldr	r3, [pc, #216]	@ (8002600 <HAL_UART_MspInit+0x190>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002530:	2300      	movs	r3, #0
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	4b32      	ldr	r3, [pc, #200]	@ (8002600 <HAL_UART_MspInit+0x190>)
 8002536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002538:	4a31      	ldr	r2, [pc, #196]	@ (8002600 <HAL_UART_MspInit+0x190>)
 800253a:	f043 0308 	orr.w	r3, r3, #8
 800253e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002540:	4b2f      	ldr	r3, [pc, #188]	@ (8002600 <HAL_UART_MspInit+0x190>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800254c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002550:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255a:	2303      	movs	r3, #3
 800255c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800255e:	2308      	movs	r3, #8
 8002560:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002562:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002566:	4619      	mov	r1, r3
 8002568:	4826      	ldr	r0, [pc, #152]	@ (8002604 <HAL_UART_MspInit+0x194>)
 800256a:	f003 faf5 	bl	8005b58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800256e:	2304      	movs	r3, #4
 8002570:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257a:	2303      	movs	r3, #3
 800257c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800257e:	2308      	movs	r3, #8
 8002580:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002586:	4619      	mov	r1, r3
 8002588:	4820      	ldr	r0, [pc, #128]	@ (800260c <HAL_UART_MspInit+0x19c>)
 800258a:	f003 fae5 	bl	8005b58 <HAL_GPIO_Init>
}
 800258e:	e030      	b.n	80025f2 <HAL_UART_MspInit+0x182>
  else if(huart->Instance==UART8)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1e      	ldr	r2, [pc, #120]	@ (8002610 <HAL_UART_MspInit+0x1a0>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d12b      	bne.n	80025f2 <HAL_UART_MspInit+0x182>
    __HAL_RCC_UART8_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	4b18      	ldr	r3, [pc, #96]	@ (8002600 <HAL_UART_MspInit+0x190>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	4a17      	ldr	r2, [pc, #92]	@ (8002600 <HAL_UART_MspInit+0x190>)
 80025a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80025a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025aa:	4b15      	ldr	r3, [pc, #84]	@ (8002600 <HAL_UART_MspInit+0x190>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	4b11      	ldr	r3, [pc, #68]	@ (8002600 <HAL_UART_MspInit+0x190>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025be:	4a10      	ldr	r2, [pc, #64]	@ (8002600 <HAL_UART_MspInit+0x190>)
 80025c0:	f043 0310 	orr.w	r3, r3, #16
 80025c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002600 <HAL_UART_MspInit+0x190>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025d2:	2303      	movs	r3, #3
 80025d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d6:	2302      	movs	r3, #2
 80025d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025de:	2303      	movs	r3, #3
 80025e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80025e2:	2308      	movs	r3, #8
 80025e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025ea:	4619      	mov	r1, r3
 80025ec:	4809      	ldr	r0, [pc, #36]	@ (8002614 <HAL_UART_MspInit+0x1a4>)
 80025ee:	f003 fab3 	bl	8005b58 <HAL_GPIO_Init>
}
 80025f2:	bf00      	nop
 80025f4:	3738      	adds	r7, #56	@ 0x38
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40004c00 	.word	0x40004c00
 8002600:	40023800 	.word	0x40023800
 8002604:	40020800 	.word	0x40020800
 8002608:	40005000 	.word	0x40005000
 800260c:	40020c00 	.word	0x40020c00
 8002610:	40007c00 	.word	0x40007c00
 8002614:	40021000 	.word	0x40021000

08002618 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800262c:	4b34      	ldr	r3, [pc, #208]	@ (8002700 <HAL_FMC_MspInit+0xe8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d160      	bne.n	80026f6 <HAL_FMC_MspInit+0xde>
    return;
  }
  FMC_Initialized = 1;
 8002634:	4b32      	ldr	r3, [pc, #200]	@ (8002700 <HAL_FMC_MspInit+0xe8>)
 8002636:	2201      	movs	r2, #1
 8002638:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	603b      	str	r3, [r7, #0]
 800263e:	4b31      	ldr	r3, [pc, #196]	@ (8002704 <HAL_FMC_MspInit+0xec>)
 8002640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002642:	4a30      	ldr	r2, [pc, #192]	@ (8002704 <HAL_FMC_MspInit+0xec>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6393      	str	r3, [r2, #56]	@ 0x38
 800264a:	4b2e      	ldr	r3, [pc, #184]	@ (8002704 <HAL_FMC_MspInit+0xec>)
 800264c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	683b      	ldr	r3, [r7, #0]
  PG8   ------> FMC_SDCLK
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002656:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800265a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265c:	2302      	movs	r3, #2
 800265e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002664:	2303      	movs	r3, #3
 8002666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002668:	230c      	movs	r3, #12
 800266a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	4619      	mov	r1, r3
 8002670:	4825      	ldr	r0, [pc, #148]	@ (8002708 <HAL_FMC_MspInit+0xf0>)
 8002672:	f003 fa71 	bl	8005b58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002676:	23e0      	movs	r3, #224	@ 0xe0
 8002678:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002682:	2303      	movs	r3, #3
 8002684:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002686:	230c      	movs	r3, #12
 8002688:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800268a:	1d3b      	adds	r3, r7, #4
 800268c:	4619      	mov	r1, r3
 800268e:	481f      	ldr	r0, [pc, #124]	@ (800270c <HAL_FMC_MspInit+0xf4>)
 8002690:	f003 fa62 	bl	8005b58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8002694:	f248 1337 	movw	r3, #33079	@ 0x8137
 8002698:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269a:	2302      	movs	r3, #2
 800269c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a2:	2303      	movs	r3, #3
 80026a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026a6:	230c      	movs	r3, #12
 80026a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026aa:	1d3b      	adds	r3, r7, #4
 80026ac:	4619      	mov	r1, r3
 80026ae:	4818      	ldr	r0, [pc, #96]	@ (8002710 <HAL_FMC_MspInit+0xf8>)
 80026b0:	f003 fa52 	bl	8005b58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80026b4:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80026b8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c2:	2303      	movs	r3, #3
 80026c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026c6:	230c      	movs	r3, #12
 80026c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	4619      	mov	r1, r3
 80026ce:	4811      	ldr	r0, [pc, #68]	@ (8002714 <HAL_FMC_MspInit+0xfc>)
 80026d0:	f003 fa42 	bl	8005b58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80026d4:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80026d8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026da:	2302      	movs	r3, #2
 80026dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e2:	2303      	movs	r3, #3
 80026e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026e6:	230c      	movs	r3, #12
 80026e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	4619      	mov	r1, r3
 80026ee:	480a      	ldr	r0, [pc, #40]	@ (8002718 <HAL_FMC_MspInit+0x100>)
 80026f0:	f003 fa32 	bl	8005b58 <HAL_GPIO_Init>
 80026f4:	e000      	b.n	80026f8 <HAL_FMC_MspInit+0xe0>
    return;
 80026f6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000fcc 	.word	0x20000fcc
 8002704:	40023800 	.word	0x40023800
 8002708:	40021400 	.word	0x40021400
 800270c:	40021c00 	.word	0x40021c00
 8002710:	40021800 	.word	0x40021800
 8002714:	40021000 	.word	0x40021000
 8002718:	40020c00 	.word	0x40020c00

0800271c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002724:	f7ff ff78 	bl	8002618 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002728:	bf00      	nop
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08e      	sub	sp, #56	@ 0x38
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	4b33      	ldr	r3, [pc, #204]	@ (8002814 <HAL_InitTick+0xe4>)
 8002746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002748:	4a32      	ldr	r2, [pc, #200]	@ (8002814 <HAL_InitTick+0xe4>)
 800274a:	f043 0310 	orr.w	r3, r3, #16
 800274e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002750:	4b30      	ldr	r3, [pc, #192]	@ (8002814 <HAL_InitTick+0xe4>)
 8002752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002754:	f003 0310 	and.w	r3, r3, #16
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800275c:	f107 0210 	add.w	r2, r7, #16
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f004 fa16 	bl	8006b98 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002772:	2b00      	cmp	r3, #0
 8002774:	d103      	bne.n	800277e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002776:	f004 f9e7 	bl	8006b48 <HAL_RCC_GetPCLK1Freq>
 800277a:	6378      	str	r0, [r7, #52]	@ 0x34
 800277c:	e004      	b.n	8002788 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800277e:	f004 f9e3 	bl	8006b48 <HAL_RCC_GetPCLK1Freq>
 8002782:	4603      	mov	r3, r0
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800278a:	4a23      	ldr	r2, [pc, #140]	@ (8002818 <HAL_InitTick+0xe8>)
 800278c:	fba2 2303 	umull	r2, r3, r2, r3
 8002790:	0c9b      	lsrs	r3, r3, #18
 8002792:	3b01      	subs	r3, #1
 8002794:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002796:	4b21      	ldr	r3, [pc, #132]	@ (800281c <HAL_InitTick+0xec>)
 8002798:	4a21      	ldr	r2, [pc, #132]	@ (8002820 <HAL_InitTick+0xf0>)
 800279a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800279c:	4b1f      	ldr	r3, [pc, #124]	@ (800281c <HAL_InitTick+0xec>)
 800279e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80027a2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80027a4:	4a1d      	ldr	r2, [pc, #116]	@ (800281c <HAL_InitTick+0xec>)
 80027a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80027aa:	4b1c      	ldr	r3, [pc, #112]	@ (800281c <HAL_InitTick+0xec>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b0:	4b1a      	ldr	r3, [pc, #104]	@ (800281c <HAL_InitTick+0xec>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027b6:	4b19      	ldr	r3, [pc, #100]	@ (800281c <HAL_InitTick+0xec>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80027bc:	4817      	ldr	r0, [pc, #92]	@ (800281c <HAL_InitTick+0xec>)
 80027be:	f005 f860 	bl	8007882 <HAL_TIM_Base_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80027c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d11b      	bne.n	8002808 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80027d0:	4812      	ldr	r0, [pc, #72]	@ (800281c <HAL_InitTick+0xec>)
 80027d2:	f005 f8af 	bl	8007934 <HAL_TIM_Base_Start_IT>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80027dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d111      	bne.n	8002808 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80027e4:	2036      	movs	r0, #54	@ 0x36
 80027e6:	f002 febf 	bl	8005568 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b0f      	cmp	r3, #15
 80027ee:	d808      	bhi.n	8002802 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80027f0:	2200      	movs	r2, #0
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	2036      	movs	r0, #54	@ 0x36
 80027f6:	f002 fe9b 	bl	8005530 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002824 <HAL_InitTick+0xf4>)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	e002      	b.n	8002808 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002808:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800280c:	4618      	mov	r0, r3
 800280e:	3738      	adds	r7, #56	@ 0x38
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40023800 	.word	0x40023800
 8002818:	431bde83 	.word	0x431bde83
 800281c:	20000fd0 	.word	0x20000fd0
 8002820:	40001000 	.word	0x40001000
 8002824:	20000100 	.word	0x20000100

08002828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800282c:	bf00      	nop
 800282e:	e7fd      	b.n	800282c <NMI_Handler+0x4>

08002830 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002834:	bf00      	nop
 8002836:	e7fd      	b.n	8002834 <HardFault_Handler+0x4>

08002838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800283c:	bf00      	nop
 800283e:	e7fd      	b.n	800283c <MemManage_Handler+0x4>

08002840 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002844:	bf00      	nop
 8002846:	e7fd      	b.n	8002844 <BusFault_Handler+0x4>

08002848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800284c:	bf00      	nop
 800284e:	e7fd      	b.n	800284c <UsageFault_Handler+0x4>

08002850 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002864:	4802      	ldr	r0, [pc, #8]	@ (8002870 <TIM6_DAC_IRQHandler+0x10>)
 8002866:	f005 f8d5 	bl	8007a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000fd0 	.word	0x20000fd0

08002874 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002878:	4802      	ldr	r0, [pc, #8]	@ (8002884 <DMA2_Stream0_IRQHandler+0x10>)
 800287a:	f002 ff31 	bl	80056e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	200001d4 	.word	0x200001d4

08002888 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800288c:	4802      	ldr	r0, [pc, #8]	@ (8002898 <LTDC_IRQHandler+0x10>)
 800288e:	f003 fbf9 	bl	8006084 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000234 	.word	0x20000234

0800289c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028a4:	4a14      	ldr	r2, [pc, #80]	@ (80028f8 <_sbrk+0x5c>)
 80028a6:	4b15      	ldr	r3, [pc, #84]	@ (80028fc <_sbrk+0x60>)
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028b0:	4b13      	ldr	r3, [pc, #76]	@ (8002900 <_sbrk+0x64>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d102      	bne.n	80028be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b8:	4b11      	ldr	r3, [pc, #68]	@ (8002900 <_sbrk+0x64>)
 80028ba:	4a12      	ldr	r2, [pc, #72]	@ (8002904 <_sbrk+0x68>)
 80028bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028be:	4b10      	ldr	r3, [pc, #64]	@ (8002900 <_sbrk+0x64>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4413      	add	r3, r2
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d207      	bcs.n	80028dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028cc:	f009 fb2c 	bl	800bf28 <__errno>
 80028d0:	4603      	mov	r3, r0
 80028d2:	220c      	movs	r2, #12
 80028d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295
 80028da:	e009      	b.n	80028f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028dc:	4b08      	ldr	r3, [pc, #32]	@ (8002900 <_sbrk+0x64>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028e2:	4b07      	ldr	r3, [pc, #28]	@ (8002900 <_sbrk+0x64>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	4a05      	ldr	r2, [pc, #20]	@ (8002900 <_sbrk+0x64>)
 80028ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ee:	68fb      	ldr	r3, [r7, #12]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20050000 	.word	0x20050000
 80028fc:	00000400 	.word	0x00000400
 8002900:	20001018 	.word	0x20001018
 8002904:	20005cd8 	.word	0x20005cd8

08002908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800290c:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <SystemInit+0x20>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002912:	4a05      	ldr	r2, [pc, #20]	@ (8002928 <SystemInit+0x20>)
 8002914:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002918:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
     }
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800292c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002964 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002930:	f7ff ffea 	bl	8002908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002934:	480c      	ldr	r0, [pc, #48]	@ (8002968 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002936:	490d      	ldr	r1, [pc, #52]	@ (800296c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002938:	4a0d      	ldr	r2, [pc, #52]	@ (8002970 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800293a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800293c:	e002      	b.n	8002944 <LoopCopyDataInit>

0800293e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800293e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002942:	3304      	adds	r3, #4

08002944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002948:	d3f9      	bcc.n	800293e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800294a:	4a0a      	ldr	r2, [pc, #40]	@ (8002974 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800294c:	4c0a      	ldr	r4, [pc, #40]	@ (8002978 <LoopFillZerobss+0x22>)
  movs r3, #0
 800294e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002950:	e001      	b.n	8002956 <LoopFillZerobss>

08002952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002954:	3204      	adds	r2, #4

08002956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002958:	d3fb      	bcc.n	8002952 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800295a:	f009 faeb 	bl	800bf34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800295e:	f7fe fab3 	bl	8000ec8 <main>
  bx  lr    
 8002962:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002964:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800296c:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8002970:	0800f16c 	.word	0x0800f16c
  ldr r2, =_sbss
 8002974:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8002978:	20005cd8 	.word	0x20005cd8

0800297c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800297c:	e7fe      	b.n	800297c <ADC_IRQHandler>
	...

08002980 <CMD_HANDLER>:
#include "control.h"
char msg1[200];

void CMD_HANDLER(uint32_t frameBuffer){
 8002980:	b580      	push	{r7, lr}
 8002982:	b09c      	sub	sp, #112	@ 0x70
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
	char msg8[100];
	sprintf(msg8,"CMD HANDLER FUNCTION CALLED\n");
 8002988:	f107 030c 	add.w	r3, r7, #12
 800298c:	4995      	ldr	r1, [pc, #596]	@ (8002be4 <CMD_HANDLER+0x264>)
 800298e:	4618      	mov	r0, r3
 8002990:	f009 fa2c 	bl	800bdec <siprintf>
	HAL_UART_Transmit(&huart8, (uint8_t *)msg8, strlen(msg8), 1000);
 8002994:	f107 030c 	add.w	r3, r7, #12
 8002998:	4618      	mov	r0, r3
 800299a:	f7fd fc31 	bl	8000200 <strlen>
 800299e:	4603      	mov	r3, r0
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	f107 010c 	add.w	r1, r7, #12
 80029a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029aa:	488f      	ldr	r0, [pc, #572]	@ (8002be8 <CMD_HANDLER+0x268>)
 80029ac:	f005 fa5a 	bl	8007e64 <HAL_UART_Transmit>

	if((cmd.cmd_flag & TOUCH) == TOUCH){ // Touch screen
 80029b0:	4b8e      	ldr	r3, [pc, #568]	@ (8002bec <CMD_HANDLER+0x26c>)
 80029b2:	f8d3 3960 	ldr.w	r3, [r3, #2400]	@ 0x960
 80029b6:	f003 0310 	and.w	r3, r3, #16
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 810b 	beq.w	8002bd6 <CMD_HANDLER+0x256>
	  	sprintf(msg8,"TOUCH SCREEN FLAGGED\n");
 80029c0:	f107 030c 	add.w	r3, r7, #12
 80029c4:	498a      	ldr	r1, [pc, #552]	@ (8002bf0 <CMD_HANDLER+0x270>)
 80029c6:	4618      	mov	r0, r3
 80029c8:	f009 fa10 	bl	800bdec <siprintf>
	    HAL_UART_Transmit(&huart8, (uint8_t *)msg8, strlen(msg8), 1000);
 80029cc:	f107 030c 	add.w	r3, r7, #12
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fd fc15 	bl	8000200 <strlen>
 80029d6:	4603      	mov	r3, r0
 80029d8:	b29a      	uxth	r2, r3
 80029da:	f107 010c 	add.w	r1, r7, #12
 80029de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029e2:	4881      	ldr	r0, [pc, #516]	@ (8002be8 <CMD_HANDLER+0x268>)
 80029e4:	f005 fa3e 	bl	8007e64 <HAL_UART_Transmit>
		if(cmd.cmd_flag & SET_DECREASE){
 80029e8:	4b80      	ldr	r3, [pc, #512]	@ (8002bec <CMD_HANDLER+0x26c>)
 80029ea:	f8d3 3960 	ldr.w	r3, [r3, #2400]	@ 0x960
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d029      	beq.n	8002a4a <CMD_HANDLER+0xca>
			sprintf(msg8,"SET DECREASE FLAGGED\n");
 80029f6:	f107 030c 	add.w	r3, r7, #12
 80029fa:	497e      	ldr	r1, [pc, #504]	@ (8002bf4 <CMD_HANDLER+0x274>)
 80029fc:	4618      	mov	r0, r3
 80029fe:	f009 f9f5 	bl	800bdec <siprintf>
			HAL_UART_Transmit(&huart8, (uint8_t *)msg8, strlen(msg8), 1000);
 8002a02:	f107 030c 	add.w	r3, r7, #12
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fd fbfa 	bl	8000200 <strlen>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	f107 010c 	add.w	r1, r7, #12
 8002a14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a18:	4873      	ldr	r0, [pc, #460]	@ (8002be8 <CMD_HANDLER+0x268>)
 8002a1a:	f005 fa23 	bl	8007e64 <HAL_UART_Transmit>
			update_setBox(frameBuffer, button.data);
 8002a1e:	4b76      	ldr	r3, [pc, #472]	@ (8002bf8 <CMD_HANDLER+0x278>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4619      	mov	r1, r3
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 fff1 	bl	8003a0c <update_setBox>
			sprintf(cmd.args[0], "%d", button.data);
 8002a2a:	4b73      	ldr	r3, [pc, #460]	@ (8002bf8 <CMD_HANDLER+0x278>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	4972      	ldr	r1, [pc, #456]	@ (8002bfc <CMD_HANDLER+0x27c>)
 8002a32:	4873      	ldr	r0, [pc, #460]	@ (8002c00 <CMD_HANDLER+0x280>)
 8002a34:	f009 f9da 	bl	800bdec <siprintf>

			cmd.cmd_flag = cmd.cmd_flag &(~TOUCH);
 8002a38:	4b6c      	ldr	r3, [pc, #432]	@ (8002bec <CMD_HANDLER+0x26c>)
 8002a3a:	f8d3 3960 	ldr.w	r3, [r3, #2400]	@ 0x960
 8002a3e:	f023 0310 	bic.w	r3, r3, #16
 8002a42:	4a6a      	ldr	r2, [pc, #424]	@ (8002bec <CMD_HANDLER+0x26c>)
 8002a44:	f8c2 3960 	str.w	r3, [r2, #2400]	@ 0x960
 8002a48:	e0c5      	b.n	8002bd6 <CMD_HANDLER+0x256>
		}
		else if(cmd.status_busy & SET_INCREASE){
 8002a4a:	4b68      	ldr	r3, [pc, #416]	@ (8002bec <CMD_HANDLER+0x26c>)
 8002a4c:	f893 3964 	ldrb.w	r3, [r3, #2404]	@ 0x964
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d021      	beq.n	8002a9c <CMD_HANDLER+0x11c>
			sprintf(msg8,"SET INCREASE FLAGGED\n");
 8002a58:	f107 030c 	add.w	r3, r7, #12
 8002a5c:	4969      	ldr	r1, [pc, #420]	@ (8002c04 <CMD_HANDLER+0x284>)
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f009 f9c4 	bl	800bdec <siprintf>
			HAL_UART_Transmit(&huart8, (uint8_t *)msg8, strlen(msg8), 1000);
 8002a64:	f107 030c 	add.w	r3, r7, #12
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fd fbc9 	bl	8000200 <strlen>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	f107 010c 	add.w	r1, r7, #12
 8002a76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a7a:	485b      	ldr	r0, [pc, #364]	@ (8002be8 <CMD_HANDLER+0x268>)
 8002a7c:	f005 f9f2 	bl	8007e64 <HAL_UART_Transmit>
			update_setBox(frameBuffer, button.data);
 8002a80:	4b5d      	ldr	r3, [pc, #372]	@ (8002bf8 <CMD_HANDLER+0x278>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	4619      	mov	r1, r3
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 ffc0 	bl	8003a0c <update_setBox>
			sprintf(cmd.args[0], "%d", button.data);
 8002a8c:	4b5a      	ldr	r3, [pc, #360]	@ (8002bf8 <CMD_HANDLER+0x278>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	461a      	mov	r2, r3
 8002a92:	495a      	ldr	r1, [pc, #360]	@ (8002bfc <CMD_HANDLER+0x27c>)
 8002a94:	485a      	ldr	r0, [pc, #360]	@ (8002c00 <CMD_HANDLER+0x280>)
 8002a96:	f009 f9a9 	bl	800bdec <siprintf>
 8002a9a:	e09c      	b.n	8002bd6 <CMD_HANDLER+0x256>
		}
		else if(cmd.cmd_flag & START){
 8002a9c:	4b53      	ldr	r3, [pc, #332]	@ (8002bec <CMD_HANDLER+0x26c>)
 8002a9e:	f8d3 3960 	ldr.w	r3, [r3, #2400]	@ 0x960
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d044      	beq.n	8002b34 <CMD_HANDLER+0x1b4>
			sprintf(msg8,"START FLAGGED\n");
 8002aaa:	f107 030c 	add.w	r3, r7, #12
 8002aae:	4956      	ldr	r1, [pc, #344]	@ (8002c08 <CMD_HANDLER+0x288>)
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f009 f99b 	bl	800bdec <siprintf>
			HAL_UART_Transmit(&huart8, (uint8_t *)msg8, strlen(msg8), 1000);
 8002ab6:	f107 030c 	add.w	r3, r7, #12
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fd fba0 	bl	8000200 <strlen>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	f107 010c 	add.w	r1, r7, #12
 8002ac8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002acc:	4846      	ldr	r0, [pc, #280]	@ (8002be8 <CMD_HANDLER+0x268>)
 8002ace:	f005 f9c9 	bl	8007e64 <HAL_UART_Transmit>
			memset(cmd.command, 0, sizeof(cmd.command));
 8002ad2:	2232      	movs	r2, #50	@ 0x32
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	484d      	ldr	r0, [pc, #308]	@ (8002c0c <CMD_HANDLER+0x28c>)
 8002ad8:	f009 f9a8 	bl	800be2c <memset>
			sprintf(cmd.command, "RUN");
 8002adc:	494c      	ldr	r1, [pc, #304]	@ (8002c10 <CMD_HANDLER+0x290>)
 8002ade:	484b      	ldr	r0, [pc, #300]	@ (8002c0c <CMD_HANDLER+0x28c>)
 8002ae0:	f009 f984 	bl	800bdec <siprintf>
			sprintf(cmd.cmd_all, "%s dummy %s", cmd.command, cmd.args[0]);
 8002ae4:	4b46      	ldr	r3, [pc, #280]	@ (8002c00 <CMD_HANDLER+0x280>)
 8002ae6:	4a49      	ldr	r2, [pc, #292]	@ (8002c0c <CMD_HANDLER+0x28c>)
 8002ae8:	494a      	ldr	r1, [pc, #296]	@ (8002c14 <CMD_HANDLER+0x294>)
 8002aea:	484b      	ldr	r0, [pc, #300]	@ (8002c18 <CMD_HANDLER+0x298>)
 8002aec:	f009 f97e 	bl	800bdec <siprintf>
			HAL_UART_Transmit(&huart5, (uint8_t *)cmd.cmd_all, strlen(cmd.cmd_all), 1000);
 8002af0:	4849      	ldr	r0, [pc, #292]	@ (8002c18 <CMD_HANDLER+0x298>)
 8002af2:	f7fd fb85 	bl	8000200 <strlen>
 8002af6:	4603      	mov	r3, r0
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002afe:	4946      	ldr	r1, [pc, #280]	@ (8002c18 <CMD_HANDLER+0x298>)
 8002b00:	4846      	ldr	r0, [pc, #280]	@ (8002c1c <CMD_HANDLER+0x29c>)
 8002b02:	f005 f9af 	bl	8007e64 <HAL_UART_Transmit>
			//HAL_UART_Transmit(&huart8, (uint8_t *)cmd.cmd_all, strlen(cmd.cmd_all), 1000);
			memset(msg1, 0, sizeof(msg1));
 8002b06:	22c8      	movs	r2, #200	@ 0xc8
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4845      	ldr	r0, [pc, #276]	@ (8002c20 <CMD_HANDLER+0x2a0>)
 8002b0c:	f009 f98e 	bl	800be2c <memset>
			sprintf(msg1, "Run-> %s", cmd.args[0]);
 8002b10:	4a3b      	ldr	r2, [pc, #236]	@ (8002c00 <CMD_HANDLER+0x280>)
 8002b12:	4944      	ldr	r1, [pc, #272]	@ (8002c24 <CMD_HANDLER+0x2a4>)
 8002b14:	4842      	ldr	r0, [pc, #264]	@ (8002c20 <CMD_HANDLER+0x2a0>)
 8002b16:	f009 f969 	bl	800bdec <siprintf>
			LCD_UpdateTypedTemp(frameBuffer, msg1);
 8002b1a:	4941      	ldr	r1, [pc, #260]	@ (8002c20 <CMD_HANDLER+0x2a0>)
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 fc1f 	bl	8003360 <LCD_UpdateTypedTemp>
			cmd.cmd_flag = cmd.cmd_flag &(~START);
 8002b22:	4b32      	ldr	r3, [pc, #200]	@ (8002bec <CMD_HANDLER+0x26c>)
 8002b24:	f8d3 3960 	ldr.w	r3, [r3, #2400]	@ 0x960
 8002b28:	f023 0304 	bic.w	r3, r3, #4
 8002b2c:	4a2f      	ldr	r2, [pc, #188]	@ (8002bec <CMD_HANDLER+0x26c>)
 8002b2e:	f8c2 3960 	str.w	r3, [r2, #2400]	@ 0x960
 8002b32:	e050      	b.n	8002bd6 <CMD_HANDLER+0x256>
		}
		else if(cmd.cmd_flag & IDLE){
 8002b34:	4b2d      	ldr	r3, [pc, #180]	@ (8002bec <CMD_HANDLER+0x26c>)
 8002b36:	f8d3 3960 	ldr.w	r3, [r3, #2400]	@ 0x960
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d049      	beq.n	8002bd6 <CMD_HANDLER+0x256>
			sprintf(msg8,"IDLE FLAGGED\n");
 8002b42:	f107 030c 	add.w	r3, r7, #12
 8002b46:	4938      	ldr	r1, [pc, #224]	@ (8002c28 <CMD_HANDLER+0x2a8>)
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f009 f94f 	bl	800bdec <siprintf>
			HAL_UART_Transmit(&huart8, (uint8_t *)msg8, strlen(msg8), 1000);
 8002b4e:	f107 030c 	add.w	r3, r7, #12
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fd fb54 	bl	8000200 <strlen>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	f107 010c 	add.w	r1, r7, #12
 8002b60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b64:	4820      	ldr	r0, [pc, #128]	@ (8002be8 <CMD_HANDLER+0x268>)
 8002b66:	f005 f97d 	bl	8007e64 <HAL_UART_Transmit>
			memset(cmd.command, 0, sizeof(cmd.command));
 8002b6a:	2232      	movs	r2, #50	@ 0x32
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4827      	ldr	r0, [pc, #156]	@ (8002c0c <CMD_HANDLER+0x28c>)
 8002b70:	f009 f95c 	bl	800be2c <memset>
			memset(cmd.cmd_all, 0, sizeof(cmd.cmd_all));
 8002b74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4827      	ldr	r0, [pc, #156]	@ (8002c18 <CMD_HANDLER+0x298>)
 8002b7c:	f009 f956 	bl	800be2c <memset>
			sprintf(cmd.command, "STOP");
 8002b80:	492a      	ldr	r1, [pc, #168]	@ (8002c2c <CMD_HANDLER+0x2ac>)
 8002b82:	4822      	ldr	r0, [pc, #136]	@ (8002c0c <CMD_HANDLER+0x28c>)
 8002b84:	f009 f932 	bl	800bdec <siprintf>
			sprintf(cmd.cmd_all, "%s", cmd.command);
 8002b88:	4a20      	ldr	r2, [pc, #128]	@ (8002c0c <CMD_HANDLER+0x28c>)
 8002b8a:	4929      	ldr	r1, [pc, #164]	@ (8002c30 <CMD_HANDLER+0x2b0>)
 8002b8c:	4822      	ldr	r0, [pc, #136]	@ (8002c18 <CMD_HANDLER+0x298>)
 8002b8e:	f009 f92d 	bl	800bdec <siprintf>
			HAL_UART_Transmit(&huart5, (uint8_t *)cmd.cmd_all, strlen(cmd.cmd_all), 1000);
 8002b92:	4821      	ldr	r0, [pc, #132]	@ (8002c18 <CMD_HANDLER+0x298>)
 8002b94:	f7fd fb34 	bl	8000200 <strlen>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ba0:	491d      	ldr	r1, [pc, #116]	@ (8002c18 <CMD_HANDLER+0x298>)
 8002ba2:	481e      	ldr	r0, [pc, #120]	@ (8002c1c <CMD_HANDLER+0x29c>)
 8002ba4:	f005 f95e 	bl	8007e64 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart8, (uint8_t *)cmd.cmd_all, strlen(cmd.cmd_all), 1000);
 8002ba8:	481b      	ldr	r0, [pc, #108]	@ (8002c18 <CMD_HANDLER+0x298>)
 8002baa:	f7fd fb29 	bl	8000200 <strlen>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bb6:	4918      	ldr	r1, [pc, #96]	@ (8002c18 <CMD_HANDLER+0x298>)
 8002bb8:	480b      	ldr	r0, [pc, #44]	@ (8002be8 <CMD_HANDLER+0x268>)
 8002bba:	f005 f953 	bl	8007e64 <HAL_UART_Transmit>
			LCD_UpdateTypedTemp(frameBuffer, cmd.command);
 8002bbe:	4913      	ldr	r1, [pc, #76]	@ (8002c0c <CMD_HANDLER+0x28c>)
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 fbcd 	bl	8003360 <LCD_UpdateTypedTemp>
			cmd.cmd_flag = cmd.cmd_flag &(~IDLE);
 8002bc6:	4b09      	ldr	r3, [pc, #36]	@ (8002bec <CMD_HANDLER+0x26c>)
 8002bc8:	f8d3 3960 	ldr.w	r3, [r3, #2400]	@ 0x960
 8002bcc:	f023 0308 	bic.w	r3, r3, #8
 8002bd0:	4a06      	ldr	r2, [pc, #24]	@ (8002bec <CMD_HANDLER+0x26c>)
 8002bd2:	f8c2 3960 	str.w	r3, [r2, #2400]	@ 0x960
		}
	}
	HANDLE(frameBuffer);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f82c 	bl	8002c34 <HANDLE>
}
 8002bdc:	bf00      	nop
 8002bde:	3770      	adds	r7, #112	@ 0x70
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	0800ca20 	.word	0x0800ca20
 8002be8:	20000410 	.word	0x20000410
 8002bec:	2000065c 	.word	0x2000065c
 8002bf0:	0800ca40 	.word	0x0800ca40
 8002bf4:	0800ca58 	.word	0x0800ca58
 8002bf8:	20000000 	.word	0x20000000
 8002bfc:	0800ca70 	.word	0x0800ca70
 8002c00:	200006f2 	.word	0x200006f2
 8002c04:	0800ca74 	.word	0x0800ca74
 8002c08:	0800ca8c 	.word	0x0800ca8c
 8002c0c:	200006c0 	.word	0x200006c0
 8002c10:	0800ca9c 	.word	0x0800ca9c
 8002c14:	0800caa0 	.word	0x0800caa0
 8002c18:	200007ba 	.word	0x200007ba
 8002c1c:	200003c8 	.word	0x200003c8
 8002c20:	2000101c 	.word	0x2000101c
 8002c24:	0800caac 	.word	0x0800caac
 8002c28:	0800cab8 	.word	0x0800cab8
 8002c2c:	0800cac8 	.word	0x0800cac8
 8002c30:	0800cad0 	.word	0x0800cad0

08002c34 <HANDLE>:

void HANDLE(uint32_t frameBuffer){
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
	switch (cmd.cmd_flag){
 8002c3c:	4b15      	ldr	r3, [pc, #84]	@ (8002c94 <HANDLE+0x60>)
 8002c3e:	f8d3 3960 	ldr.w	r3, [r3, #2400]	@ 0x960
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d001      	beq.n	8002c4a <HANDLE+0x16>
 8002c46:	2b02      	cmp	r3, #2
			if(strlen(cmd.args[1]) > 0)update_outTemp(frameBuffer, cmd.args[1]);
			if(strlen(cmd.args[2]) > 0)update_hotTemp(frameBuffer, cmd.args[2]);
			cmd.cmd_flag = cmd.cmd_flag &(~TEMP_UPDATE);
			break;
		case RESEND_COMMAND:
			break;
 8002c48:	e020      	b.n	8002c8c <HANDLE+0x58>
			printf_(frameBuffer, "TEMP UPDATE");
 8002c4a:	4913      	ldr	r1, [pc, #76]	@ (8002c98 <HANDLE+0x64>)
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fad9 	bl	8003204 <printf_>
			update_setTemp(frameBuffer, "SHOULD BE HERE");
 8002c52:	4912      	ldr	r1, [pc, #72]	@ (8002c9c <HANDLE+0x68>)
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 ff61 	bl	8003b1c <update_setTemp>
			if(strlen(cmd.args[1]) > 0)update_outTemp(frameBuffer, cmd.args[1]);
 8002c5a:	4b11      	ldr	r3, [pc, #68]	@ (8002ca0 <HANDLE+0x6c>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HANDLE+0x36>
 8002c62:	490f      	ldr	r1, [pc, #60]	@ (8002ca0 <HANDLE+0x6c>)
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 ff7d 	bl	8003b64 <update_outTemp>
			if(strlen(cmd.args[2]) > 0)update_hotTemp(frameBuffer, cmd.args[2]);
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca4 <HANDLE+0x70>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HANDLE+0x46>
 8002c72:	490c      	ldr	r1, [pc, #48]	@ (8002ca4 <HANDLE+0x70>)
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 ff99 	bl	8003bac <update_hotTemp>
			cmd.cmd_flag = cmd.cmd_flag &(~TEMP_UPDATE);
 8002c7a:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <HANDLE+0x60>)
 8002c7c:	f8d3 3960 	ldr.w	r3, [r3, #2400]	@ 0x960
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	4a03      	ldr	r2, [pc, #12]	@ (8002c94 <HANDLE+0x60>)
 8002c86:	f8c2 3960 	str.w	r3, [r2, #2400]	@ 0x960
			break;
 8002c8a:	bf00      	nop
	}
}
 8002c8c:	bf00      	nop
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	2000065c 	.word	0x2000065c
 8002c98:	0800cad4 	.word	0x0800cad4
 8002c9c:	0800cae0 	.word	0x0800cae0
 8002ca0:	20000724 	.word	0x20000724
 8002ca4:	20000756 	.word	0x20000756

08002ca8 <GUI_DrawPoint>:
            address += BYTES_PER_PIXEL; // Increment by 2 bytes for each pixel
        }
    }
    */
void GUI_DrawPoint(uint32_t frameBuffer, u32 x,u32 y,u16 color)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	807b      	strh	r3, [r7, #2]
	//u32 index = (x + y*FRAMEBUFFER_WIDTH)*BYTES_PER_PIXEL;
	u32 address = (frameBuffer + (x + y*(FRAMEBUFFER_WIDTH))*BYTES_PER_PIXEL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002cbc:	fb03 f202 	mul.w	r2, r3, r2
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4413      	add	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]

	//char msg[200];
	//sprintf(msg, "Values-> x: %d, y: %d, index: %d, address: %X\n", (int)x, (int)y, (int)index, (int)address);
	//HAL_UART_Transmit(&huart8, (uint8_t *)msg, strlen(msg), 1000);

	HAL_SDRAM_Write_16b(&hsdram1, (uint32_t *)address, &color, 1);
 8002ccc:	6979      	ldr	r1, [r7, #20]
 8002cce:	1cba      	adds	r2, r7, #2
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	4803      	ldr	r0, [pc, #12]	@ (8002ce0 <GUI_DrawPoint+0x38>)
 8002cd4:	f004 fc88 	bl	80075e8 <HAL_SDRAM_Write_16b>
	//HAL_Delay(100);
	//frameBuffer[x + y*(FRAMEBUFFER_WIDTH)] = color;//���ù��λ��
}
 8002cd8:	bf00      	nop
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	20000458 	.word	0x20000458

08002ce4 <LCD_Fill>:
								ey:the ending y coordinate of the specified area
								color:the filled color value
 * @retvalue   :None
********************************************************************/
void LCD_Fill(uint32_t frameBuffer, u32 sx,u32 sy,u32 ex,u32 ey,u16 color)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	603b      	str	r3, [r7, #0]
	u32 i,j;
	u32 width=ex-sx+1;
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	617b      	str	r3, [r7, #20]
	u32 height=ey-sy+1;
 8002cfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	3301      	adds	r3, #1
 8002d04:	613b      	str	r3, [r7, #16]
	for(i=0;i<width;i++){
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
 8002d0a:	e016      	b.n	8002d3a <LCD_Fill+0x56>
		for(j=0;j<height;j++){
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	61bb      	str	r3, [r7, #24]
 8002d10:	e00c      	b.n	8002d2c <LCD_Fill+0x48>
			GUI_DrawPoint(frameBuffer, sx+i, sy+j, color);
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	18d1      	adds	r1, r2, r3
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	441a      	add	r2, r3
 8002d1e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f7ff ffc1 	bl	8002ca8 <GUI_DrawPoint>
		for(j=0;j<height;j++){
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	61bb      	str	r3, [r7, #24]
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d3ee      	bcc.n	8002d12 <LCD_Fill+0x2e>
	for(i=0;i<width;i++){
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	3301      	adds	r3, #1
 8002d38:	61fb      	str	r3, [r7, #28]
 8002d3a:	69fa      	ldr	r2, [r7, #28]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d3e4      	bcc.n	8002d0c <LCD_Fill+0x28>
		}
	}
}
 8002d42:	bf00      	nop
 8002d44:	bf00      	nop
 8002d46:	3720      	adds	r7, #32
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <LCD_ShowChar>:
								size:the size of display character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void LCD_ShowChar(uint32_t frameBuffer, u32 x,u32 y, u8 num,u8 size, u16 color)
{
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	70fb      	strb	r3, [r7, #3]
    u32 temp;
    u8 pos,t;

	num=num-' ';//�õ�ƫ�ƺ��ֵ
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	3b20      	subs	r3, #32
 8002d5e:	70fb      	strb	r3, [r7, #3]

	if(size < 20){
 8002d60:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002d64:	2b13      	cmp	r3, #19
 8002d66:	d82c      	bhi.n	8002dc2 <LCD_ShowChar+0x76>
		for(pos=0;pos<16;pos++)
 8002d68:	2300      	movs	r3, #0
 8002d6a:	74fb      	strb	r3, [r7, #19]
 8002d6c:	e025      	b.n	8002dba <LCD_ShowChar+0x6e>
		{
			temp=asc2_1608[num][pos];		 //����1608����
 8002d6e:	78fa      	ldrb	r2, [r7, #3]
 8002d70:	7cfb      	ldrb	r3, [r7, #19]
 8002d72:	4940      	ldr	r1, [pc, #256]	@ (8002e74 <LCD_ShowChar+0x128>)
 8002d74:	0112      	lsls	r2, r2, #4
 8002d76:	440a      	add	r2, r1
 8002d78:	4413      	add	r3, r2
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	617b      	str	r3, [r7, #20]
			for(t=0;t<8;t++)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	74bb      	strb	r3, [r7, #18]
 8002d82:	e014      	b.n	8002dae <LCD_ShowChar+0x62>
			{
				if(temp&0x01)GUI_DrawPoint(frameBuffer, x+t,y+pos, color);//��һ����
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d009      	beq.n	8002da2 <LCD_ShowChar+0x56>
 8002d8e:	7cba      	ldrb	r2, [r7, #18]
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	18d1      	adds	r1, r2, r3
 8002d94:	7cfa      	ldrb	r2, [r7, #19]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	441a      	add	r2, r3
 8002d9a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f7ff ff83 	bl	8002ca8 <GUI_DrawPoint>
				temp>>=1;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	085b      	lsrs	r3, r3, #1
 8002da6:	617b      	str	r3, [r7, #20]
			for(t=0;t<8;t++)
 8002da8:	7cbb      	ldrb	r3, [r7, #18]
 8002daa:	3301      	adds	r3, #1
 8002dac:	74bb      	strb	r3, [r7, #18]
 8002dae:	7cbb      	ldrb	r3, [r7, #18]
 8002db0:	2b07      	cmp	r3, #7
 8002db2:	d9e7      	bls.n	8002d84 <LCD_ShowChar+0x38>
		for(pos=0;pos<16;pos++)
 8002db4:	7cfb      	ldrb	r3, [r7, #19]
 8002db6:	3301      	adds	r3, #1
 8002db8:	74fb      	strb	r3, [r7, #19]
 8002dba:	7cfb      	ldrb	r3, [r7, #19]
 8002dbc:	2b0f      	cmp	r3, #15
 8002dbe:	d9d6      	bls.n	8002d6e <LCD_ShowChar+0x22>
				if(temp&0x800000)GUI_DrawPoint(frameBuffer, x+t,y+pos, color);//��һ����
				temp<<=1;
			}
		}
	}
}
 8002dc0:	e054      	b.n	8002e6c <LCD_ShowChar+0x120>
		for(pos=0;pos<24;pos++)
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	74fb      	strb	r3, [r7, #19]
 8002dc6:	e04e      	b.n	8002e66 <LCD_ShowChar+0x11a>
			temp=Font24[num][pos*3] << 16 | Font24[num][pos*3+1] << 8 | Font24[num][pos*3 + 2];		 //����1608����
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	7cf9      	ldrb	r1, [r7, #19]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	4419      	add	r1, r3
 8002dd2:	4829      	ldr	r0, [pc, #164]	@ (8002e78 <LCD_ShowChar+0x12c>)
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	011a      	lsls	r2, r3, #4
 8002ddc:	1ad2      	subs	r2, r2, r3
 8002dde:	1883      	adds	r3, r0, r2
 8002de0:	440b      	add	r3, r1
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	0418      	lsls	r0, r3, #16
 8002de6:	78fa      	ldrb	r2, [r7, #3]
 8002de8:	7cf9      	ldrb	r1, [r7, #19]
 8002dea:	460b      	mov	r3, r1
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	440b      	add	r3, r1
 8002df0:	1c59      	adds	r1, r3, #1
 8002df2:	4c21      	ldr	r4, [pc, #132]	@ (8002e78 <LCD_ShowChar+0x12c>)
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	011a      	lsls	r2, r3, #4
 8002dfc:	1ad2      	subs	r2, r2, r3
 8002dfe:	18a3      	adds	r3, r4, r2
 8002e00:	440b      	add	r3, r1
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	021b      	lsls	r3, r3, #8
 8002e06:	4318      	orrs	r0, r3
 8002e08:	78fa      	ldrb	r2, [r7, #3]
 8002e0a:	7cf9      	ldrb	r1, [r7, #19]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	440b      	add	r3, r1
 8002e12:	1c99      	adds	r1, r3, #2
 8002e14:	4c18      	ldr	r4, [pc, #96]	@ (8002e78 <LCD_ShowChar+0x12c>)
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	011a      	lsls	r2, r3, #4
 8002e1e:	1ad2      	subs	r2, r2, r3
 8002e20:	18a3      	adds	r3, r4, r2
 8002e22:	440b      	add	r3, r1
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	4303      	orrs	r3, r0
 8002e28:	617b      	str	r3, [r7, #20]
			for(t=0;t<24;t++)
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	74bb      	strb	r3, [r7, #18]
 8002e2e:	e014      	b.n	8002e5a <LCD_ShowChar+0x10e>
				if(temp&0x800000)GUI_DrawPoint(frameBuffer, x+t,y+pos, color);//��һ����
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <LCD_ShowChar+0x102>
 8002e3a:	7cba      	ldrb	r2, [r7, #18]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	18d1      	adds	r1, r2, r3
 8002e40:	7cfa      	ldrb	r2, [r7, #19]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	441a      	add	r2, r3
 8002e46:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f7ff ff2d 	bl	8002ca8 <GUI_DrawPoint>
				temp<<=1;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	617b      	str	r3, [r7, #20]
			for(t=0;t<24;t++)
 8002e54:	7cbb      	ldrb	r3, [r7, #18]
 8002e56:	3301      	adds	r3, #1
 8002e58:	74bb      	strb	r3, [r7, #18]
 8002e5a:	7cbb      	ldrb	r3, [r7, #18]
 8002e5c:	2b17      	cmp	r3, #23
 8002e5e:	d9e7      	bls.n	8002e30 <LCD_ShowChar+0xe4>
		for(pos=0;pos<24;pos++)
 8002e60:	7cfb      	ldrb	r3, [r7, #19]
 8002e62:	3301      	adds	r3, #1
 8002e64:	74fb      	strb	r3, [r7, #19]
 8002e66:	7cfb      	ldrb	r3, [r7, #19]
 8002e68:	2b17      	cmp	r3, #23
 8002e6a:	d9ad      	bls.n	8002dc8 <LCD_ShowChar+0x7c>
}
 8002e6c:	bf00      	nop
 8002e6e:	371c      	adds	r7, #28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd90      	pop	{r4, r7, pc}
 8002e74:	0800cf58 	.word	0x0800cf58
 8002e78:	0800d548 	.word	0x0800d548

08002e7c <LCD_ShowString>:
								size:the size of display character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void LCD_ShowString(uint32_t frameBuffer, u32 x,u32 y,u8 displaySize,char *p,u16 color_front, u16 color_back, bool background)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08a      	sub	sp, #40	@ 0x28
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	70fb      	strb	r3, [r7, #3]
	// Clear Background pixels with back color
	uint32_t xe = strlen(p)*8 + x;
 8002e8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e8c:	f7fd f9b8 	bl	8000200 <strlen>
 8002e90:	4603      	mov	r3, r0
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	4413      	add	r3, r2
 8002e98:	61fb      	str	r3, [r7, #28]
	uint32_t ye = 16 + y;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3310      	adds	r3, #16
 8002e9e:	61bb      	str	r3, [r7, #24]
	if(displaySize == 24){
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	2b18      	cmp	r3, #24
 8002ea4:	d10e      	bne.n	8002ec4 <LCD_ShowString+0x48>
		xe = strlen(p)*12 + x;
 8002ea6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ea8:	f7fd f9aa 	bl	8000200 <strlen>
 8002eac:	4602      	mov	r2, r0
 8002eae:	4613      	mov	r3, r2
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4413      	add	r3, r2
 8002ebc:	61fb      	str	r3, [r7, #28]
		ye = 20 + y;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3314      	adds	r3, #20
 8002ec2:	61bb      	str	r3, [r7, #24]
	}
	if(background) LCD_Fill(frameBuffer, x, y, xe, ye, color_back);
 8002ec4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d009      	beq.n	8002ee0 <LCD_ShowString+0x64>
 8002ecc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002ece:	9301      	str	r3, [sp, #4]
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f7ff ff02 	bl	8002ce4 <LCD_Fill>

	for(int i=0; i<strlen(p); i++)
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	e01f      	b.n	8002f26 <LCD_ShowString+0xaa>
	{
		if(x>(WIDTH - offsetX)||y>(HEIGHT-offsetY - 1))
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8002eec:	d823      	bhi.n	8002f36 <LCD_ShowString+0xba>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8002ef4:	d21f      	bcs.n	8002f36 <LCD_ShowString+0xba>
		return;
		LCD_ShowChar(frameBuffer, x,y,p[i],displaySize,color_front);
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002efa:	4413      	add	r3, r2
 8002efc:	781a      	ldrb	r2, [r3, #0]
 8002efe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	4613      	mov	r3, r2
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	68b9      	ldr	r1, [r7, #8]
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f7ff ff1d 	bl	8002d4c <LCD_ShowChar>
		x+=displaySize/2;
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	085b      	lsrs	r3, r3, #1
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	60bb      	str	r3, [r7, #8]
	for(int i=0; i<strlen(p); i++)
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	3301      	adds	r3, #1
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f28:	f7fd f96a 	bl	8000200 <strlen>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d8d8      	bhi.n	8002ee6 <LCD_ShowString+0x6a>
 8002f34:	e000      	b.n	8002f38 <LCD_ShowString+0xbc>
		return;
 8002f36:	bf00      	nop
	}
}
 8002f38:	3720      	adds	r7, #32
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <draw_terminal>:
		}
	}

}

void draw_terminal(uint32_t frameBuffer){
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b0a7      	sub	sp, #156	@ 0x9c
 8002f44:	af04      	add	r7, sp, #16
 8002f46:	6078      	str	r0, [r7, #4]
	char header[10] = "Terminal";
 8002f48:	4a30      	ldr	r2, [pc, #192]	@ (800300c <draw_terminal+0xcc>)
 8002f4a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002f4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f50:	c303      	stmia	r3!, {r0, r1}
 8002f52:	701a      	strb	r2, [r3, #0]
 8002f54:	2300      	movs	r3, #0
 8002f56:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75

	uint32_t x = terminal.x_start;
 8002f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8003010 <draw_terminal+0xd0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	uint32_t xe = x + terminal.width;
 8002f62:	4b2b      	ldr	r3, [pc, #172]	@ (8003010 <draw_terminal+0xd0>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

	uint32_t y = terminal.y_start;
 8002f70:	4b27      	ldr	r3, [pc, #156]	@ (8003010 <draw_terminal+0xd0>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	67fb      	str	r3, [r7, #124]	@ 0x7c
	uint32_t ye = y + terminal.height;
 8002f76:	4b26      	ldr	r3, [pc, #152]	@ (8003010 <draw_terminal+0xd0>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002f7c:	4413      	add	r3, r2
 8002f7e:	67bb      	str	r3, [r7, #120]	@ 0x78
	char msg[100];
	sprintf(msg, "Values-> x: %d, xe: %d, y: %d, ye: %d\n", (int)x, (int)xe, (int)y, (int)ye);
 8002f80:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002f84:	f8d7 4080 	ldr.w	r4, [r7, #128]	@ 0x80
 8002f88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f8a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002f8c:	f107 0008 	add.w	r0, r7, #8
 8002f90:	9201      	str	r2, [sp, #4]
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	4623      	mov	r3, r4
 8002f96:	460a      	mov	r2, r1
 8002f98:	491e      	ldr	r1, [pc, #120]	@ (8003014 <draw_terminal+0xd4>)
 8002f9a:	f008 ff27 	bl	800bdec <siprintf>
	HAL_UART_Transmit(&huart8, (uint8_t *)msg, strlen(msg), 1000);
 8002f9e:	f107 0308 	add.w	r3, r7, #8
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fd f92c 	bl	8000200 <strlen>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	f107 0108 	add.w	r1, r7, #8
 8002fb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fb4:	4818      	ldr	r0, [pc, #96]	@ (8003018 <draw_terminal+0xd8>)
 8002fb6:	f004 ff55 	bl	8007e64 <HAL_UART_Transmit>
	LCD_ShowString(frameBuffer, x, y + terminal.header_gap , 16, header, RGB565_Black, terminal.word_color, false);
 8002fba:	4b15      	ldr	r3, [pc, #84]	@ (8003010 <draw_terminal+0xd0>)
 8002fbc:	6a1a      	ldr	r2, [r3, #32]
 8002fbe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fc0:	441a      	add	r2, r3
 8002fc2:	4b13      	ldr	r3, [pc, #76]	@ (8003010 <draw_terminal+0xd0>)
 8002fc4:	8a5b      	ldrh	r3, [r3, #18]
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	9103      	str	r1, [sp, #12]
 8002fca:	9302      	str	r3, [sp, #8]
 8002fcc:	2300      	movs	r3, #0
 8002fce:	9301      	str	r3, [sp, #4]
 8002fd0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	2310      	movs	r3, #16
 8002fd8:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7ff ff4d 	bl	8002e7c <LCD_ShowString>
	LCD_Fill(frameBuffer, x, y, xe, ye, terminal.color);
 8002fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8003010 <draw_terminal+0xd0>)
 8002fe4:	8a1b      	ldrh	r3, [r3, #16]
 8002fe6:	9301      	str	r3, [sp, #4]
 8002fe8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ff0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002ff2:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff fe74 	bl	8002ce4 <LCD_Fill>
	draw_var(frameBuffer);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f80d 	bl	800301c <draw_var>


}
 8003002:	bf00      	nop
 8003004:	378c      	adds	r7, #140	@ 0x8c
 8003006:	46bd      	mov	sp, r7
 8003008:	bd90      	pop	{r4, r7, pc}
 800300a:	bf00      	nop
 800300c:	0800cbac 	.word	0x0800cbac
 8003010:	20000034 	.word	0x20000034
 8003014:	0800cb84 	.word	0x0800cb84
 8003018:	20000410 	.word	0x20000410

0800301c <draw_var>:

void draw_var(uint32_t frameBuffer){
 800301c:	b580      	push	{r7, lr}
 800301e:	b098      	sub	sp, #96	@ 0x60
 8003020:	af04      	add	r7, sp, #16
 8003022:	6078      	str	r0, [r7, #4]
	char set[10] = "SET-> ";
 8003024:	4a71      	ldr	r2, [pc, #452]	@ (80031ec <draw_var+0x1d0>)
 8003026:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800302a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800302e:	6018      	str	r0, [r3, #0]
 8003030:	3304      	adds	r3, #4
 8003032:	8019      	strh	r1, [r3, #0]
 8003034:	3302      	adds	r3, #2
 8003036:	0c0a      	lsrs	r2, r1, #16
 8003038:	701a      	strb	r2, [r3, #0]
 800303a:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 800303e:	2200      	movs	r2, #0
 8003040:	801a      	strh	r2, [r3, #0]
 8003042:	709a      	strb	r2, [r3, #2]
	char hot[10] = "HOT-> ";
 8003044:	4a6a      	ldr	r2, [pc, #424]	@ (80031f0 <draw_var+0x1d4>)
 8003046:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800304a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800304e:	6018      	str	r0, [r3, #0]
 8003050:	3304      	adds	r3, #4
 8003052:	8019      	strh	r1, [r3, #0]
 8003054:	3302      	adds	r3, #2
 8003056:	0c0a      	lsrs	r2, r1, #16
 8003058:	701a      	strb	r2, [r3, #0]
 800305a:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 800305e:	2200      	movs	r2, #0
 8003060:	801a      	strh	r2, [r3, #0]
 8003062:	709a      	strb	r2, [r3, #2]
	char out[10] = "OUT-> ";
 8003064:	4a63      	ldr	r2, [pc, #396]	@ (80031f4 <draw_var+0x1d8>)
 8003066:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800306a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800306e:	6018      	str	r0, [r3, #0]
 8003070:	3304      	adds	r3, #4
 8003072:	8019      	strh	r1, [r3, #0]
 8003074:	3302      	adds	r3, #2
 8003076:	0c0a      	lsrs	r2, r1, #16
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800307e:	2200      	movs	r2, #0
 8003080:	801a      	strh	r2, [r3, #0]
 8003082:	709a      	strb	r2, [r3, #2]
	char cmd[10] = "CMD-> ";
 8003084:	4a5c      	ldr	r2, [pc, #368]	@ (80031f8 <draw_var+0x1dc>)
 8003086:	f107 0318 	add.w	r3, r7, #24
 800308a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800308e:	6018      	str	r0, [r3, #0]
 8003090:	3304      	adds	r3, #4
 8003092:	8019      	strh	r1, [r3, #0]
 8003094:	3302      	adds	r3, #2
 8003096:	0c0a      	lsrs	r2, r1, #16
 8003098:	701a      	strb	r2, [r3, #0]
 800309a:	f107 031f 	add.w	r3, r7, #31
 800309e:	2200      	movs	r2, #0
 80030a0:	801a      	strh	r2, [r3, #0]
 80030a2:	709a      	strb	r2, [r3, #2]
	char stp[10] = "STP-> ";
 80030a4:	4a55      	ldr	r2, [pc, #340]	@ (80031fc <draw_var+0x1e0>)
 80030a6:	f107 030c 	add.w	r3, r7, #12
 80030aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030ae:	6018      	str	r0, [r3, #0]
 80030b0:	3304      	adds	r3, #4
 80030b2:	8019      	strh	r1, [r3, #0]
 80030b4:	3302      	adds	r3, #2
 80030b6:	0c0a      	lsrs	r2, r1, #16
 80030b8:	701a      	strb	r2, [r3, #0]
 80030ba:	f107 0313 	add.w	r3, r7, #19
 80030be:	2200      	movs	r2, #0
 80030c0:	801a      	strh	r2, [r3, #0]
 80030c2:	709a      	strb	r2, [r3, #2]
	int i = 0, space = 30;
 80030c4:	2300      	movs	r3, #0
 80030c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030c8:	231e      	movs	r3, #30
 80030ca:	64bb      	str	r3, [r7, #72]	@ 0x48
	LCD_ShowString(frameBuffer, terminal.width + 20, terminal.y_start + space*i++, 16, set, terminal.word_color, RGB565_Black, false);
 80030cc:	4b4c      	ldr	r3, [pc, #304]	@ (8003200 <draw_var+0x1e4>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f103 0014 	add.w	r0, r3, #20
 80030d4:	4b4a      	ldr	r3, [pc, #296]	@ (8003200 <draw_var+0x1e4>)
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030da:	1c59      	adds	r1, r3, #1
 80030dc:	64f9      	str	r1, [r7, #76]	@ 0x4c
 80030de:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80030e0:	fb01 f303 	mul.w	r3, r1, r3
 80030e4:	441a      	add	r2, r3
 80030e6:	4b46      	ldr	r3, [pc, #280]	@ (8003200 <draw_var+0x1e4>)
 80030e8:	8a5b      	ldrh	r3, [r3, #18]
 80030ea:	2100      	movs	r1, #0
 80030ec:	9103      	str	r1, [sp, #12]
 80030ee:	2100      	movs	r1, #0
 80030f0:	9102      	str	r1, [sp, #8]
 80030f2:	9301      	str	r3, [sp, #4]
 80030f4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	2310      	movs	r3, #16
 80030fc:	4601      	mov	r1, r0
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff febc 	bl	8002e7c <LCD_ShowString>
	LCD_ShowString(frameBuffer, terminal.width + 20, terminal.y_start + space*i++, 16, hot, terminal.word_color, RGB565_Black, false);
 8003104:	4b3e      	ldr	r3, [pc, #248]	@ (8003200 <draw_var+0x1e4>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f103 0014 	add.w	r0, r3, #20
 800310c:	4b3c      	ldr	r3, [pc, #240]	@ (8003200 <draw_var+0x1e4>)
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003112:	1c59      	adds	r1, r3, #1
 8003114:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8003116:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	441a      	add	r2, r3
 800311e:	4b38      	ldr	r3, [pc, #224]	@ (8003200 <draw_var+0x1e4>)
 8003120:	8a5b      	ldrh	r3, [r3, #18]
 8003122:	2100      	movs	r1, #0
 8003124:	9103      	str	r1, [sp, #12]
 8003126:	2100      	movs	r1, #0
 8003128:	9102      	str	r1, [sp, #8]
 800312a:	9301      	str	r3, [sp, #4]
 800312c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	2310      	movs	r3, #16
 8003134:	4601      	mov	r1, r0
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff fea0 	bl	8002e7c <LCD_ShowString>
	LCD_ShowString(frameBuffer, terminal.width + 20, terminal.y_start + space*i++, 16, out, terminal.word_color, RGB565_Black, false);
 800313c:	4b30      	ldr	r3, [pc, #192]	@ (8003200 <draw_var+0x1e4>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f103 0014 	add.w	r0, r3, #20
 8003144:	4b2e      	ldr	r3, [pc, #184]	@ (8003200 <draw_var+0x1e4>)
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800314a:	1c59      	adds	r1, r3, #1
 800314c:	64f9      	str	r1, [r7, #76]	@ 0x4c
 800314e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003150:	fb01 f303 	mul.w	r3, r1, r3
 8003154:	441a      	add	r2, r3
 8003156:	4b2a      	ldr	r3, [pc, #168]	@ (8003200 <draw_var+0x1e4>)
 8003158:	8a5b      	ldrh	r3, [r3, #18]
 800315a:	2100      	movs	r1, #0
 800315c:	9103      	str	r1, [sp, #12]
 800315e:	2100      	movs	r1, #0
 8003160:	9102      	str	r1, [sp, #8]
 8003162:	9301      	str	r3, [sp, #4]
 8003164:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	2310      	movs	r3, #16
 800316c:	4601      	mov	r1, r0
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff fe84 	bl	8002e7c <LCD_ShowString>
	LCD_ShowString(frameBuffer, terminal.width + 20, terminal.y_start + space*i++, 16, cmd, terminal.word_color, RGB565_Black, false);
 8003174:	4b22      	ldr	r3, [pc, #136]	@ (8003200 <draw_var+0x1e4>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f103 0014 	add.w	r0, r3, #20
 800317c:	4b20      	ldr	r3, [pc, #128]	@ (8003200 <draw_var+0x1e4>)
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003182:	1c59      	adds	r1, r3, #1
 8003184:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8003186:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	441a      	add	r2, r3
 800318e:	4b1c      	ldr	r3, [pc, #112]	@ (8003200 <draw_var+0x1e4>)
 8003190:	8a5b      	ldrh	r3, [r3, #18]
 8003192:	2100      	movs	r1, #0
 8003194:	9103      	str	r1, [sp, #12]
 8003196:	2100      	movs	r1, #0
 8003198:	9102      	str	r1, [sp, #8]
 800319a:	9301      	str	r3, [sp, #4]
 800319c:	f107 0318 	add.w	r3, r7, #24
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	2310      	movs	r3, #16
 80031a4:	4601      	mov	r1, r0
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff fe68 	bl	8002e7c <LCD_ShowString>
	LCD_ShowString(frameBuffer, terminal.width + 20, terminal.y_start + space*i++, 16, stp, terminal.word_color, RGB565_Black, false);
 80031ac:	4b14      	ldr	r3, [pc, #80]	@ (8003200 <draw_var+0x1e4>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f103 0014 	add.w	r0, r3, #20
 80031b4:	4b12      	ldr	r3, [pc, #72]	@ (8003200 <draw_var+0x1e4>)
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031ba:	1c59      	adds	r1, r3, #1
 80031bc:	64f9      	str	r1, [r7, #76]	@ 0x4c
 80031be:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	441a      	add	r2, r3
 80031c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003200 <draw_var+0x1e4>)
 80031c8:	8a5b      	ldrh	r3, [r3, #18]
 80031ca:	2100      	movs	r1, #0
 80031cc:	9103      	str	r1, [sp, #12]
 80031ce:	2100      	movs	r1, #0
 80031d0:	9102      	str	r1, [sp, #8]
 80031d2:	9301      	str	r3, [sp, #4]
 80031d4:	f107 030c 	add.w	r3, r7, #12
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	2310      	movs	r3, #16
 80031dc:	4601      	mov	r1, r0
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7ff fe4c 	bl	8002e7c <LCD_ShowString>

}
 80031e4:	bf00      	nop
 80031e6:	3750      	adds	r7, #80	@ 0x50
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	0800cbb8 	.word	0x0800cbb8
 80031f0:	0800cbc4 	.word	0x0800cbc4
 80031f4:	0800cbd0 	.word	0x0800cbd0
 80031f8:	0800cbdc 	.word	0x0800cbdc
 80031fc:	0800cbe8 	.word	0x0800cbe8
 8003200:	20000034 	.word	0x20000034

08003204 <printf_>:

void printf_(uint32_t frameBuffer, char *msg){
 8003204:	b5b0      	push	{r4, r5, r7, lr}
 8003206:	b08e      	sub	sp, #56	@ 0x38
 8003208:	af04      	add	r7, sp, #16
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
	if(msg == NULL) return;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d06f      	beq.n	80032f4 <printf_+0xf0>

	char p1[18];
	LINE *temp, *temp1;


	if(strlen(msg) < 23){
 8003214:	6838      	ldr	r0, [r7, #0]
 8003216:	f7fc fff3 	bl	8000200 <strlen>
 800321a:	4603      	mov	r3, r0
 800321c:	2b16      	cmp	r3, #22
 800321e:	d86a      	bhi.n	80032f6 <printf_+0xf2>
		addLine();
 8003220:	f000 f86e 	bl	8003300 <addLine>
		strcpy(p1, msg);
 8003224:	f107 030c 	add.w	r3, r7, #12
 8003228:	6839      	ldr	r1, [r7, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f008 fea8 	bl	800bf80 <strcpy>
		strcpy(terminal.last_line->line_msg, msg);
 8003230:	4b32      	ldr	r3, [pc, #200]	@ (80032fc <printf_+0xf8>)
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	6839      	ldr	r1, [r7, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f008 fea2 	bl	800bf80 <strcpy>
		if(terminal.line_count > 13){
 800323c:	4b2f      	ldr	r3, [pc, #188]	@ (80032fc <printf_+0xf8>)
 800323e:	7d1b      	ldrb	r3, [r3, #20]
 8003240:	2b0d      	cmp	r3, #13
 8003242:	d937      	bls.n	80032b4 <printf_+0xb0>
			terminal.line_count = 0;
 8003244:	4b2d      	ldr	r3, [pc, #180]	@ (80032fc <printf_+0xf8>)
 8003246:	2200      	movs	r2, #0
 8003248:	751a      	strb	r2, [r3, #20]
			temp1 = terminal.first_line;
 800324a:	4b2c      	ldr	r3, [pc, #176]	@ (80032fc <printf_+0xf8>)
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	623b      	str	r3, [r7, #32]
			terminal.first_line = terminal.first_line->next;
 8003250:	4b2a      	ldr	r3, [pc, #168]	@ (80032fc <printf_+0xf8>)
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	4a29      	ldr	r2, [pc, #164]	@ (80032fc <printf_+0xf8>)
 8003258:	6193      	str	r3, [r2, #24]
			free(temp1);
 800325a:	6a38      	ldr	r0, [r7, #32]
 800325c:	f008 fd10 	bl	800bc80 <free>
			draw_terminal(frameBuffer);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff fe6d 	bl	8002f40 <draw_terminal>

			for(temp = terminal.first_line; temp != NULL; temp = temp->next){
 8003266:	4b25      	ldr	r3, [pc, #148]	@ (80032fc <printf_+0xf8>)
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	627b      	str	r3, [r7, #36]	@ 0x24
 800326c:	e01e      	b.n	80032ac <printf_+0xa8>
				LCD_ShowString(frameBuffer, terminal.x_start, terminal.y_start+(terminal.line_count++)*word_height,
 800326e:	4b23      	ldr	r3, [pc, #140]	@ (80032fc <printf_+0xf8>)
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	4b22      	ldr	r3, [pc, #136]	@ (80032fc <printf_+0xf8>)
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	4b21      	ldr	r3, [pc, #132]	@ (80032fc <printf_+0xf8>)
 8003278:	7d1b      	ldrb	r3, [r3, #20]
 800327a:	1c59      	adds	r1, r3, #1
 800327c:	b2cc      	uxtb	r4, r1
 800327e:	491f      	ldr	r1, [pc, #124]	@ (80032fc <printf_+0xf8>)
 8003280:	750c      	strb	r4, [r1, #20]
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	18d4      	adds	r4, r2, r3
						16, temp->line_msg, terminal.word_color, terminal.color, false);
 8003286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
				LCD_ShowString(frameBuffer, terminal.x_start, terminal.y_start+(terminal.line_count++)*word_height,
 8003288:	4a1c      	ldr	r2, [pc, #112]	@ (80032fc <printf_+0xf8>)
 800328a:	8a52      	ldrh	r2, [r2, #18]
 800328c:	491b      	ldr	r1, [pc, #108]	@ (80032fc <printf_+0xf8>)
 800328e:	8a09      	ldrh	r1, [r1, #16]
 8003290:	2500      	movs	r5, #0
 8003292:	9503      	str	r5, [sp, #12]
 8003294:	9102      	str	r1, [sp, #8]
 8003296:	9201      	str	r2, [sp, #4]
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	2310      	movs	r3, #16
 800329c:	4622      	mov	r2, r4
 800329e:	4601      	mov	r1, r0
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff fdeb 	bl	8002e7c <LCD_ShowString>
			for(temp = terminal.first_line; temp != NULL; temp = temp->next){
 80032a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1dd      	bne.n	800326e <printf_+0x6a>
 80032b2:	e020      	b.n	80032f6 <printf_+0xf2>
				//HAL_Delay(1);
			}
		}
		else{
			temp = terminal.last_line;
 80032b4:	4b11      	ldr	r3, [pc, #68]	@ (80032fc <printf_+0xf8>)
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	627b      	str	r3, [r7, #36]	@ 0x24
			LCD_ShowString(frameBuffer, terminal.x_start, terminal.y_start+(terminal.line_count++)*word_height/2,
 80032ba:	4b10      	ldr	r3, [pc, #64]	@ (80032fc <printf_+0xf8>)
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	4b0f      	ldr	r3, [pc, #60]	@ (80032fc <printf_+0xf8>)
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	4b0e      	ldr	r3, [pc, #56]	@ (80032fc <printf_+0xf8>)
 80032c4:	7d1b      	ldrb	r3, [r3, #20]
 80032c6:	1c59      	adds	r1, r3, #1
 80032c8:	b2cc      	uxtb	r4, r1
 80032ca:	490c      	ldr	r1, [pc, #48]	@ (80032fc <printf_+0xf8>)
 80032cc:	750c      	strb	r4, [r1, #20]
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	18d4      	adds	r4, r2, r3
					    16, temp->line_msg, terminal.word_color, terminal.color, false);
 80032d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
			LCD_ShowString(frameBuffer, terminal.x_start, terminal.y_start+(terminal.line_count++)*word_height/2,
 80032d4:	4a09      	ldr	r2, [pc, #36]	@ (80032fc <printf_+0xf8>)
 80032d6:	8a52      	ldrh	r2, [r2, #18]
 80032d8:	4908      	ldr	r1, [pc, #32]	@ (80032fc <printf_+0xf8>)
 80032da:	8a09      	ldrh	r1, [r1, #16]
 80032dc:	2500      	movs	r5, #0
 80032de:	9503      	str	r5, [sp, #12]
 80032e0:	9102      	str	r1, [sp, #8]
 80032e2:	9201      	str	r2, [sp, #4]
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	2310      	movs	r3, #16
 80032e8:	4622      	mov	r2, r4
 80032ea:	4601      	mov	r1, r0
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff fdc5 	bl	8002e7c <LCD_ShowString>
 80032f2:	e000      	b.n	80032f6 <printf_+0xf2>
	if(msg == NULL) return;
 80032f4:	bf00      	nop
			//HAL_Delay(1);
		}
	}
}
 80032f6:	3728      	adds	r7, #40	@ 0x28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bdb0      	pop	{r4, r5, r7, pc}
 80032fc:	20000034 	.word	0x20000034

08003300 <addLine>:
void printf_g(uint32_t frameBuffer, int x, int y){
	GUI_DrawPoint(frameBuffer, (int)x, (int)y, terminal.word_color);
}

// TERMINAL
void addLine(){
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
	LINE *newLine = malloc(sizeof(LINE));
 8003306:	201c      	movs	r0, #28
 8003308:	f008 fcb2 	bl	800bc70 <malloc>
 800330c:	4603      	mov	r3, r0
 800330e:	607b      	str	r3, [r7, #4]
	newLine->next = NULL;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	619a      	str	r2, [r3, #24]
	memset(newLine->line_msg, 0, sizeof(newLine->line_msg)) ;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2215      	movs	r2, #21
 800331a:	2100      	movs	r1, #0
 800331c:	4618      	mov	r0, r3
 800331e:	f008 fd85 	bl	800be2c <memset>
    if(terminal.line_count == 0){
 8003322:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <addLine+0x5c>)
 8003324:	7d1b      	ldrb	r3, [r3, #20]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <addLine+0x38>
    	terminal.last_line = newLine;
 800332a:	4a0c      	ldr	r2, [pc, #48]	@ (800335c <addLine+0x5c>)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	61d3      	str	r3, [r2, #28]
    	terminal.first_line = newLine;
 8003330:	4a0a      	ldr	r2, [pc, #40]	@ (800335c <addLine+0x5c>)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6193      	str	r3, [r2, #24]
 8003336:	e006      	b.n	8003346 <addLine+0x46>
    }
    else{
    	terminal.last_line->next = newLine;
 8003338:	4b08      	ldr	r3, [pc, #32]	@ (800335c <addLine+0x5c>)
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	619a      	str	r2, [r3, #24]
    	terminal.last_line = newLine;
 8003340:	4a06      	ldr	r2, [pc, #24]	@ (800335c <addLine+0x5c>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	61d3      	str	r3, [r2, #28]
    }
    terminal.line_count ++;
 8003346:	4b05      	ldr	r3, [pc, #20]	@ (800335c <addLine+0x5c>)
 8003348:	7d1b      	ldrb	r3, [r3, #20]
 800334a:	3301      	adds	r3, #1
 800334c:	b2da      	uxtb	r2, r3
 800334e:	4b03      	ldr	r3, [pc, #12]	@ (800335c <addLine+0x5c>)
 8003350:	751a      	strb	r2, [r3, #20]
    return;
 8003352:	bf00      	nop
}
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20000034 	.word	0x20000034

08003360 <LCD_UpdateTypedTemp>:


void LCD_UpdateTypedTemp(uint32_t frameBuffer, char *c){
 8003360:	b580      	push	{r7, lr}
 8003362:	b08e      	sub	sp, #56	@ 0x38
 8003364:	af04      	add	r7, sp, #16
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
	char msg[30] = {0};
 800336a:	2300      	movs	r3, #0
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	f107 030c 	add.w	r3, r7, #12
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	605a      	str	r2, [r3, #4]
 8003378:	609a      	str	r2, [r3, #8]
 800337a:	60da      	str	r2, [r3, #12]
 800337c:	611a      	str	r2, [r3, #16]
 800337e:	615a      	str	r2, [r3, #20]
 8003380:	831a      	strh	r2, [r3, #24]
	sprintf(msg, "-> ");
 8003382:	f107 0308 	add.w	r3, r7, #8
 8003386:	4915      	ldr	r1, [pc, #84]	@ (80033dc <LCD_UpdateTypedTemp+0x7c>)
 8003388:	4618      	mov	r0, r3
 800338a:	f008 fd2f 	bl	800bdec <siprintf>
	strcat(msg, c);
 800338e:	f107 0308 	add.w	r3, r7, #8
 8003392:	6839      	ldr	r1, [r7, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f008 fd51 	bl	800be3c <strcat>
	LCD_Fill(frameBuffer, 400, 90, 530, 90+word_height, color_index);
 800339a:	2300      	movs	r3, #0
 800339c:	9301      	str	r3, [sp, #4]
 800339e:	236a      	movs	r3, #106	@ 0x6a
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	f240 2312 	movw	r3, #530	@ 0x212
 80033a6:	225a      	movs	r2, #90	@ 0x5a
 80033a8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff fc99 	bl	8002ce4 <LCD_Fill>
	LCD_ShowString(frameBuffer, 400, 90, 16, msg, terminal.word_color, color_index, false);
 80033b2:	4b0b      	ldr	r3, [pc, #44]	@ (80033e0 <LCD_UpdateTypedTemp+0x80>)
 80033b4:	8a5b      	ldrh	r3, [r3, #18]
 80033b6:	2200      	movs	r2, #0
 80033b8:	9203      	str	r2, [sp, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	9202      	str	r2, [sp, #8]
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	f107 0308 	add.w	r3, r7, #8
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	2310      	movs	r3, #16
 80033c8:	225a      	movs	r2, #90	@ 0x5a
 80033ca:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff fd54 	bl	8002e7c <LCD_ShowString>
}
 80033d4:	bf00      	nop
 80033d6:	3728      	adds	r7, #40	@ 0x28
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	0800cbf4 	.word	0x0800cbf4
 80033e0:	20000034 	.word	0x20000034

080033e4 <draw_futuristic_background>:


void draw_futuristic_background(uint32_t frameBuffer) {
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
    for (uint16_t y = 0; y < FRAMEBUFFER_HEIGHT; y++) {
 80033ec:	2300      	movs	r3, #0
 80033ee:	81fb      	strh	r3, [r7, #14]
 80033f0:	e084      	b.n	80034fc <draw_futuristic_background+0x118>
        for (uint16_t x = 0; x < FRAMEBUFFER_WIDTH; x++) {
 80033f2:	2300      	movs	r3, #0
 80033f4:	81bb      	strh	r3, [r7, #12]
 80033f6:	e07a      	b.n	80034ee <draw_futuristic_background+0x10a>
            // Vertical gradient from blue to black
            uint8_t brightness = 255 - (y * 255 / FRAMEBUFFER_HEIGHT);
 80033f8:	89fa      	ldrh	r2, [r7, #14]
 80033fa:	4613      	mov	r3, r2
 80033fc:	021b      	lsls	r3, r3, #8
 80033fe:	1a9b      	subs	r3, r3, r2
 8003400:	4a43      	ldr	r2, [pc, #268]	@ (8003510 <draw_futuristic_background+0x12c>)
 8003402:	fb82 1203 	smull	r1, r2, r2, r3
 8003406:	441a      	add	r2, r3
 8003408:	1212      	asrs	r2, r2, #8
 800340a:	17db      	asrs	r3, r3, #31
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	b2db      	uxtb	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	727b      	strb	r3, [r7, #9]
            uint16_t baseColor = RGB565(0, brightness / 2, brightness);
 8003414:	7a7b      	ldrb	r3, [r7, #9]
 8003416:	085b      	lsrs	r3, r3, #1
 8003418:	b2db      	uxtb	r3, r3
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	b21b      	sxth	r3, r3
 800341e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8003422:	b21a      	sxth	r2, r3
 8003424:	7a7b      	ldrb	r3, [r7, #9]
 8003426:	08db      	lsrs	r3, r3, #3
 8003428:	b2db      	uxtb	r3, r3
 800342a:	b21b      	sxth	r3, r3
 800342c:	4313      	orrs	r3, r2
 800342e:	b21b      	sxth	r3, r3
 8003430:	817b      	strh	r3, [r7, #10]

            // Add horizontal scanlines every 4 pixels
            if ((y % 4) == 0)
 8003432:	89fb      	ldrh	r3, [r7, #14]
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10f      	bne.n	800345e <draw_futuristic_background+0x7a>
                baseColor = RGB565(0, ((brightness / 2) + 30), brightness);
 800343e:	7a7b      	ldrb	r3, [r7, #9]
 8003440:	085b      	lsrs	r3, r3, #1
 8003442:	b2db      	uxtb	r3, r3
 8003444:	331e      	adds	r3, #30
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	b21b      	sxth	r3, r3
 800344a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800344e:	b21a      	sxth	r2, r3
 8003450:	7a7b      	ldrb	r3, [r7, #9]
 8003452:	08db      	lsrs	r3, r3, #3
 8003454:	b2db      	uxtb	r3, r3
 8003456:	b21b      	sxth	r3, r3
 8003458:	4313      	orrs	r3, r2
 800345a:	b21b      	sxth	r3, r3
 800345c:	817b      	strh	r3, [r7, #10]

            // Add vertical grid lines every 50 pixels
            if (x % 50 == 0)
 800345e:	89bb      	ldrh	r3, [r7, #12]
 8003460:	4a2c      	ldr	r2, [pc, #176]	@ (8003514 <draw_futuristic_background+0x130>)
 8003462:	fba2 1203 	umull	r1, r2, r2, r3
 8003466:	0912      	lsrs	r2, r2, #4
 8003468:	2132      	movs	r1, #50	@ 0x32
 800346a:	fb01 f202 	mul.w	r2, r1, r2
 800346e:	1a9b      	subs	r3, r3, r2
 8003470:	b29b      	uxth	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d120      	bne.n	80034b8 <draw_futuristic_background+0xd4>
                baseColor = RGB565(brightness, brightness / 3, brightness / 3);
 8003476:	7a7b      	ldrb	r3, [r7, #9]
 8003478:	021b      	lsls	r3, r3, #8
 800347a:	b21b      	sxth	r3, r3
 800347c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003480:	f023 0307 	bic.w	r3, r3, #7
 8003484:	b21a      	sxth	r2, r3
 8003486:	7a7b      	ldrb	r3, [r7, #9]
 8003488:	4923      	ldr	r1, [pc, #140]	@ (8003518 <draw_futuristic_background+0x134>)
 800348a:	fba1 1303 	umull	r1, r3, r1, r3
 800348e:	085b      	lsrs	r3, r3, #1
 8003490:	b2db      	uxtb	r3, r3
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	b21b      	sxth	r3, r3
 8003496:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800349a:	b21b      	sxth	r3, r3
 800349c:	4313      	orrs	r3, r2
 800349e:	b21a      	sxth	r2, r3
 80034a0:	7a7b      	ldrb	r3, [r7, #9]
 80034a2:	491d      	ldr	r1, [pc, #116]	@ (8003518 <draw_futuristic_background+0x134>)
 80034a4:	fba1 1303 	umull	r1, r3, r1, r3
 80034a8:	085b      	lsrs	r3, r3, #1
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	08db      	lsrs	r3, r3, #3
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	b21b      	sxth	r3, r3
 80034b2:	4313      	orrs	r3, r2
 80034b4:	b21b      	sxth	r3, r3
 80034b6:	817b      	strh	r3, [r7, #10]

            // Add glowing diagonal streak
            if ((x + y) % 200 < 2)
 80034b8:	89ba      	ldrh	r2, [r7, #12]
 80034ba:	89fb      	ldrh	r3, [r7, #14]
 80034bc:	441a      	add	r2, r3
 80034be:	4b15      	ldr	r3, [pc, #84]	@ (8003514 <draw_futuristic_background+0x130>)
 80034c0:	fb83 1302 	smull	r1, r3, r3, r2
 80034c4:	1199      	asrs	r1, r3, #6
 80034c6:	17d3      	asrs	r3, r2, #31
 80034c8:	1acb      	subs	r3, r1, r3
 80034ca:	21c8      	movs	r1, #200	@ 0xc8
 80034cc:	fb01 f303 	mul.w	r3, r1, r3
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	dc02      	bgt.n	80034dc <draw_futuristic_background+0xf8>
                baseColor = RGB565(0, 255, 180); // cyan glow
 80034d6:	f240 73f6 	movw	r3, #2038	@ 0x7f6
 80034da:	817b      	strh	r3, [r7, #10]

            GUI_DrawPoint(frameBuffer, x, y, baseColor);
 80034dc:	89b9      	ldrh	r1, [r7, #12]
 80034de:	89fa      	ldrh	r2, [r7, #14]
 80034e0:	897b      	ldrh	r3, [r7, #10]
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff fbe0 	bl	8002ca8 <GUI_DrawPoint>
        for (uint16_t x = 0; x < FRAMEBUFFER_WIDTH; x++) {
 80034e8:	89bb      	ldrh	r3, [r7, #12]
 80034ea:	3301      	adds	r3, #1
 80034ec:	81bb      	strh	r3, [r7, #12]
 80034ee:	89bb      	ldrh	r3, [r7, #12]
 80034f0:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80034f4:	d380      	bcc.n	80033f8 <draw_futuristic_background+0x14>
    for (uint16_t y = 0; y < FRAMEBUFFER_HEIGHT; y++) {
 80034f6:	89fb      	ldrh	r3, [r7, #14]
 80034f8:	3301      	adds	r3, #1
 80034fa:	81fb      	strh	r3, [r7, #14]
 80034fc:	89fb      	ldrh	r3, [r7, #14]
 80034fe:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8003502:	f4ff af76 	bcc.w	80033f2 <draw_futuristic_background+0xe>
        }
    }
}
 8003506:	bf00      	nop
 8003508:	bf00      	nop
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	88888889 	.word	0x88888889
 8003514:	51eb851f 	.word	0x51eb851f
 8003518:	aaaaaaab 	.word	0xaaaaaaab

0800351c <stampSquare>:
        if (e2 >= dy) { err += dy; x0 += sx; }
        if (e2 <= dx) { err += dx; y0 += sy; }
    }
}

void stampSquare(uint32_t frameBuffer, int cx, int cy, int half, uint32_t color) {
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
    for(int dy = -half; dy <= half; dy++) {
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	425b      	negs	r3, r3
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	e01a      	b.n	8003568 <stampSquare+0x4c>
        for(int dx = -half; dx <= half; dx++) {
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	425b      	negs	r3, r3
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	e00f      	b.n	800355a <stampSquare+0x3e>
            GUI_DrawPoint(frameBuffer, cx + dx, cy + dy, color);
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4413      	add	r3, r2
 8003540:	4619      	mov	r1, r3
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	4413      	add	r3, r2
 8003548:	461a      	mov	r2, r3
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	b29b      	uxth	r3, r3
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f7ff fbaa 	bl	8002ca8 <GUI_DrawPoint>
        for(int dx = -half; dx <= half; dx++) {
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	3301      	adds	r3, #1
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	ddeb      	ble.n	800353a <stampSquare+0x1e>
    for(int dy = -half; dy <= half; dy++) {
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	3301      	adds	r3, #1
 8003566:	617b      	str	r3, [r7, #20]
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	dde0      	ble.n	8003532 <stampSquare+0x16>
        }
    }
}
 8003570:	bf00      	nop
 8003572:	bf00      	nop
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <drawThickLine>:
void drawThickLine(uint32_t frameBuffer,
                          int x0, int y0,
                          int x1, int y1,
                          uint32_t color,
                          int thickness)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b08e      	sub	sp, #56	@ 0x38
 800357e:	af02      	add	r7, sp, #8
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
 8003586:	603b      	str	r3, [r7, #0]
    int dx =  abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	bfb8      	it	lt
 8003592:	425b      	neglt	r3, r3
 8003594:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	da01      	bge.n	80035a2 <drawThickLine+0x28>
 800359e:	2301      	movs	r3, #1
 80035a0:	e001      	b.n	80035a6 <drawThickLine+0x2c>
 80035a2:	f04f 33ff 	mov.w	r3, #4294967295
 80035a6:	627b      	str	r3, [r7, #36]	@ 0x24
    int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
 80035a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	bfb8      	it	lt
 80035b2:	425b      	neglt	r3, r3
 80035b4:	425b      	negs	r3, r3
 80035b6:	623b      	str	r3, [r7, #32]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035bc:	429a      	cmp	r2, r3
 80035be:	da01      	bge.n	80035c4 <drawThickLine+0x4a>
 80035c0:	2301      	movs	r3, #1
 80035c2:	e001      	b.n	80035c8 <drawThickLine+0x4e>
 80035c4:	f04f 33ff 	mov.w	r3, #4294967295
 80035c8:	61fb      	str	r3, [r7, #28]
    int err = dx + dy, e2;
 80035ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	4413      	add	r3, r2
 80035d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int half = thickness/2;
 80035d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035d4:	0fda      	lsrs	r2, r3, #31
 80035d6:	4413      	add	r3, r2
 80035d8:	105b      	asrs	r3, r3, #1
 80035da:	61bb      	str	r3, [r7, #24]
    while (1) {
        stampSquare(frameBuffer, x0, y0, half, color);
 80035dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	68b9      	ldr	r1, [r7, #8]
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f7ff ff98 	bl	800351c <stampSquare>
        if (x0 == x1 && y0 == y1) break;
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d103      	bne.n	80035fc <drawThickLine+0x82>
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d01b      	beq.n	8003634 <drawThickLine+0xba>
        e2 = 2*err;
 80035fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	617b      	str	r3, [r7, #20]
        if (e2 >= dy) { err += dy; x0 += sx; }
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	429a      	cmp	r2, r3
 8003608:	db07      	blt.n	800361a <drawThickLine+0xa0>
 800360a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	4413      	add	r3, r2
 8003610:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003616:	4413      	add	r3, r2
 8003618:	60bb      	str	r3, [r7, #8]
        if (e2 <= dx) { err += dx; y0 += sy; }
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361e:	429a      	cmp	r2, r3
 8003620:	dcdc      	bgt.n	80035dc <drawThickLine+0x62>
 8003622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003626:	4413      	add	r3, r2
 8003628:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	4413      	add	r3, r2
 8003630:	607b      	str	r3, [r7, #4]
        stampSquare(frameBuffer, x0, y0, half, color);
 8003632:	e7d3      	b.n	80035dc <drawThickLine+0x62>
        if (x0 == x1 && y0 == y1) break;
 8003634:	bf00      	nop
    }
}
 8003636:	bf00      	nop
 8003638:	3730      	adds	r7, #48	@ 0x30
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <draw_circle_filled>:
        }
    }
}

void draw_circle_filled(uint32_t frameBuffer, int cx, int cy, int radius, uint32_t color)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b088      	sub	sp, #32
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	603b      	str	r3, [r7, #0]
    for (int dy = -radius; dy <= radius; dy++) {
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	425b      	negs	r3, r3
 8003652:	61fb      	str	r3, [r7, #28]
 8003654:	e039      	b.n	80036ca <draw_circle_filled+0x8a>
        // for this scan-line, how far out do we go?
        int dx = (int)(sqrt((double)(radius*radius - dy*dy)) + 0.5);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	fb03 f203 	mul.w	r2, r3, r3
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	fb03 f303 	mul.w	r3, r3, r3
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	4618      	mov	r0, r3
 8003666:	f7fc ff75 	bl	8000554 <__aeabi_i2d>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	ec43 2b10 	vmov	d0, r2, r3
 8003672:	f009 f81b 	bl	800c6ac <sqrt>
 8003676:	ec51 0b10 	vmov	r0, r1, d0
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	4b17      	ldr	r3, [pc, #92]	@ (80036dc <draw_circle_filled+0x9c>)
 8003680:	f7fc fe1c 	bl	80002bc <__adddf3>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4610      	mov	r0, r2
 800368a:	4619      	mov	r1, r3
 800368c:	f7fd fa7c 	bl	8000b88 <__aeabi_d2iz>
 8003690:	4603      	mov	r3, r0
 8003692:	617b      	str	r3, [r7, #20]
        for (int x = -dx; x <= dx; x++) {
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	425b      	negs	r3, r3
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	e00f      	b.n	80036bc <draw_circle_filled+0x7c>
            GUI_DrawPoint(frameBuffer, cx + x, cy + dy, color);
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	4413      	add	r3, r2
 80036a2:	4619      	mov	r1, r3
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	4413      	add	r3, r2
 80036aa:	461a      	mov	r2, r3
 80036ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f7ff faf9 	bl	8002ca8 <GUI_DrawPoint>
        for (int x = -dx; x <= dx; x++) {
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	3301      	adds	r3, #1
 80036ba:	61bb      	str	r3, [r7, #24]
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	ddeb      	ble.n	800369c <draw_circle_filled+0x5c>
    for (int dy = -radius; dy <= radius; dy++) {
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	3301      	adds	r3, #1
 80036c8:	61fb      	str	r3, [r7, #28]
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	ddc1      	ble.n	8003656 <draw_circle_filled+0x16>
        }
    }
}
 80036d2:	bf00      	nop
 80036d4:	bf00      	nop
 80036d6:	3720      	adds	r7, #32
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	3fe00000 	.word	0x3fe00000

080036e0 <PAGE_HOME_INIT_VAR>:


PAGE_HOME hpage;
// void LCD_Fill(uint32_t frameBuffer, u32 sx,u32 sy,u32 ex,u32 ey,u16 color)

void PAGE_HOME_INIT_VAR(void){
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
	// Statistic Panel Var
	hpage.statisticPanel_x = statistic_box_START_X;
 80036e4:	4b6c      	ldr	r3, [pc, #432]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 80036e6:	220a      	movs	r2, #10
 80036e8:	601a      	str	r2, [r3, #0]
	hpage.statisticPanel_xe = statistic_box_START_X + statistic_box_WIDTH;
 80036ea:	4b6b      	ldr	r3, [pc, #428]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 80036ec:	f44f 720c 	mov.w	r2, #560	@ 0x230
 80036f0:	605a      	str	r2, [r3, #4]
	hpage.statisticPanel_y = statistic_box_START_Y;
 80036f2:	4b69      	ldr	r3, [pc, #420]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 80036f4:	2232      	movs	r2, #50	@ 0x32
 80036f6:	609a      	str	r2, [r3, #8]
	hpage.statisticPanel_ye = statistic_box_START_Y + statistic_box_HEIGHT;
 80036f8:	4b67      	ldr	r3, [pc, #412]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 80036fa:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80036fe:	60da      	str	r2, [r3, #12]
	hpage.statisticalPanel_backgroundColor = RGB565_Violet_blue;
 8003700:	4b65      	ldr	r3, [pc, #404]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003702:	f243 2256 	movw	r2, #12886	@ 0x3256
 8003706:	821a      	strh	r2, [r3, #16]
	hpage.statisticalPanel_hotTempColor = RGB565_Red;
 8003708:	4b63      	ldr	r3, [pc, #396]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 800370a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800370e:	825a      	strh	r2, [r3, #18]
	hpage.statisticalPanel_outTempColor = RGB565_Orange;
 8003710:	4b61      	ldr	r3, [pc, #388]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003712:	f64f 32e0 	movw	r2, #64480	@ 0xfbe0
 8003716:	829a      	strh	r2, [r3, #20]
	hpage.statisticalPanel_wordColor = RGB565_White;
 8003718:	4b5f      	ldr	r3, [pc, #380]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 800371a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800371e:	82da      	strh	r2, [r3, #22]

	// Left Arrow
	hpage.arrowLeft_x = box_1_START_X - box_1_WIDTH_GAP - arrow_WIDHT;
 8003720:	4b5d      	ldr	r3, [pc, #372]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003722:	f240 2267 	movw	r2, #615	@ 0x267
 8003726:	639a      	str	r2, [r3, #56]	@ 0x38
	hpage.arrowLeft_xe = box_1_START_X - box_1_WIDTH_GAP;
 8003728:	4b5b      	ldr	r3, [pc, #364]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 800372a:	f240 2285 	movw	r2, #645	@ 0x285
 800372e:	63da      	str	r2, [r3, #60]	@ 0x3c
	hpage.arrowLeft_y = box_1_START_Y + arrow_HEIGHT/4;
 8003730:	4b59      	ldr	r3, [pc, #356]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003732:	22cf      	movs	r2, #207	@ 0xcf
 8003734:	641a      	str	r2, [r3, #64]	@ 0x40
	hpage.arrowLeft_ye = hpage.arrowLeft_y + arrow_HEIGHT;
 8003736:	4b58      	ldr	r3, [pc, #352]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	331e      	adds	r3, #30
 800373c:	4a56      	ldr	r2, [pc, #344]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 800373e:	6453      	str	r3, [r2, #68]	@ 0x44
	// Right Arrow
	hpage.arrowRight_x = box_1_START_X + box_1_WIDTH + box_1_WIDTH_GAP;
 8003740:	4b55      	ldr	r3, [pc, #340]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003742:	f240 22c1 	movw	r2, #705	@ 0x2c1
 8003746:	64da      	str	r2, [r3, #76]	@ 0x4c
	hpage.arrowRight_xe = hpage.arrowRight_x + arrow_WIDHT;
 8003748:	4b53      	ldr	r3, [pc, #332]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 800374a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374c:	331e      	adds	r3, #30
 800374e:	4a52      	ldr	r2, [pc, #328]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003750:	6513      	str	r3, [r2, #80]	@ 0x50
	hpage.arrowRight_y = hpage.arrowLeft_y;
 8003752:	4b51      	ldr	r3, [pc, #324]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003756:	4a50      	ldr	r2, [pc, #320]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003758:	6553      	str	r3, [r2, #84]	@ 0x54
	hpage.arrowRight_ye = hpage.arrowLeft_ye;
 800375a:	4b4f      	ldr	r3, [pc, #316]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 800375c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375e:	4a4e      	ldr	r2, [pc, #312]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003760:	6593      	str	r3, [r2, #88]	@ 0x58
	// Arrows Colors
	hpage.arrow_backgroundColor = RGB565_Celadon_blue;
 8003762:	4b4d      	ldr	r3, [pc, #308]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003764:	f44f 7275 	mov.w	r2, #980	@ 0x3d4
 8003768:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	hpage.arrow_arrowColor = RGB565_Moonstone;
 800376c:	4b4a      	ldr	r3, [pc, #296]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 800376e:	f643 5257 	movw	r2, #15703	@ 0x3d57
 8003772:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

	// Box 1 - SETTINGS
	hpage.setBox_x = box_1_START_X;
 8003776:	4b48      	ldr	r3, [pc, #288]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003778:	f240 228a 	movw	r2, #650	@ 0x28a
 800377c:	625a      	str	r2, [r3, #36]	@ 0x24
	hpage.setBox_xe = box_1_START_X + box_1_WIDTH;
 800377e:	4b46      	ldr	r3, [pc, #280]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003780:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8003784:	629a      	str	r2, [r3, #40]	@ 0x28
	hpage.setBox_y = box_1_START_Y;
 8003786:	4b44      	ldr	r3, [pc, #272]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003788:	22c8      	movs	r2, #200	@ 0xc8
 800378a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hpage.setBox_ye = box_1_START_Y + box_1_HEIGHT;
 800378c:	4b42      	ldr	r3, [pc, #264]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 800378e:	22f0      	movs	r2, #240	@ 0xf0
 8003790:	631a      	str	r2, [r3, #48]	@ 0x30
	// Home Box
	hpage.homeBox_x = hpage.setBox_x;
 8003792:	4b41      	ldr	r3, [pc, #260]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003796:	4a40      	ldr	r2, [pc, #256]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003798:	65d3      	str	r3, [r2, #92]	@ 0x5c
	hpage.homeBox_xe = hpage.setBox_xe;
 800379a:	4b3f      	ldr	r3, [pc, #252]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 800379c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379e:	4a3e      	ldr	r2, [pc, #248]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 80037a0:	6613      	str	r3, [r2, #96]	@ 0x60
	hpage.homeBox_y = hpage.setBox_ye + box_1_HEIGHT_GAP;
 80037a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a6:	330a      	adds	r3, #10
 80037a8:	4a3b      	ldr	r2, [pc, #236]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 80037aa:	6653      	str	r3, [r2, #100]	@ 0x64
	hpage.homeBox_ye = hpage.homeBox_y + box_1_HEIGHT;
 80037ac:	4b3a      	ldr	r3, [pc, #232]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 80037ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037b0:	3328      	adds	r3, #40	@ 0x28
 80037b2:	4a39      	ldr	r2, [pc, #228]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 80037b4:	6693      	str	r3, [r2, #104]	@ 0x68
	// Conf Box
	hpage.confBox_x = hpage.setBox_x;
 80037b6:	4b38      	ldr	r3, [pc, #224]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 80037b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ba:	4a37      	ldr	r2, [pc, #220]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 80037bc:	6713      	str	r3, [r2, #112]	@ 0x70
	hpage.confBox_xe = hpage.setBox_xe;
 80037be:	4b36      	ldr	r3, [pc, #216]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 80037c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c2:	4a35      	ldr	r2, [pc, #212]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 80037c4:	6753      	str	r3, [r2, #116]	@ 0x74
	hpage.confBox_y = hpage.homeBox_ye + box_1_HEIGHT_GAP;
 80037c6:	4b34      	ldr	r3, [pc, #208]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 80037c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037ca:	330a      	adds	r3, #10
 80037cc:	4a32      	ldr	r2, [pc, #200]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 80037ce:	6793      	str	r3, [r2, #120]	@ 0x78
	hpage.confBox_ye = hpage.confBox_y + box_1_HEIGHT;
 80037d0:	4b31      	ldr	r3, [pc, #196]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 80037d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037d4:	3328      	adds	r3, #40	@ 0x28
 80037d6:	4a30      	ldr	r2, [pc, #192]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 80037d8:	67d3      	str	r3, [r2, #124]	@ 0x7c
	//Box 1 Colors
	hpage.setBox_backgroundColor = RGB565_Blue_pantone;
 80037da:	4b2f      	ldr	r3, [pc, #188]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 80037dc:	22d4      	movs	r2, #212	@ 0xd4
 80037de:	869a      	strh	r2, [r3, #52]	@ 0x34
	hpage.setBox_wordColor = RGB565_White;
 80037e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 80037e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80037e6:	86da      	strh	r2, [r3, #54]	@ 0x36

	//Box 2 - READINGS
	hpage.setTemperature_x = box_2_START_X;
 80037e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 80037ea:	2264      	movs	r2, #100	@ 0x64
 80037ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	hpage.setTemperature_xe = box_2_START_X + box_2_WIDTH;
 80037f0:	4b29      	ldr	r3, [pc, #164]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 80037f2:	22c8      	movs	r2, #200	@ 0xc8
 80037f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	hpage.setTemperature_y = hpage.statisticPanel_ye + box_2_HEIGHT_GAP;
 80037f8:	4b27      	ldr	r3, [pc, #156]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	330a      	adds	r3, #10
 80037fe:	4a26      	ldr	r2, [pc, #152]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003800:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	hpage.setTemperature_ye = hpage.setTemperature_y + box_2_HEIGHT;
 8003804:	4b24      	ldr	r3, [pc, #144]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003806:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800380a:	333c      	adds	r3, #60	@ 0x3c
 800380c:	4a22      	ldr	r2, [pc, #136]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 800380e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
	//Out Temp
	hpage.outTemperature_x = hpage.setTemperature_xe + box_2_WIDTH_GAP;
 8003812:	4b21      	ldr	r3, [pc, #132]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003818:	3314      	adds	r3, #20
 800381a:	4a1f      	ldr	r2, [pc, #124]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 800381c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
	hpage.outTemperature_xe = hpage.outTemperature_x + box_2_WIDTH;
 8003820:	4b1d      	ldr	r3, [pc, #116]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003822:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003826:	3364      	adds	r3, #100	@ 0x64
 8003828:	4a1b      	ldr	r2, [pc, #108]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 800382a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
	hpage.outTemperature_y = hpage.setTemperature_y;
 800382e:	4b1a      	ldr	r3, [pc, #104]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003830:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003834:	4a18      	ldr	r2, [pc, #96]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003836:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
	hpage.outTemperature_ye = hpage.setTemperature_ye;
 800383a:	4b17      	ldr	r3, [pc, #92]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 800383c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003840:	4a15      	ldr	r2, [pc, #84]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003842:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
	//Hot Temp
	hpage.hotTemperature_x = hpage.outTemperature_xe + box_2_WIDTH_GAP;
 8003846:	4b14      	ldr	r3, [pc, #80]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003848:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800384c:	3314      	adds	r3, #20
 800384e:	4a12      	ldr	r2, [pc, #72]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003850:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
	hpage.hotTemperature_xe = hpage.hotTemperature_x  + box_2_WIDTH;
 8003854:	4b10      	ldr	r3, [pc, #64]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003856:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800385a:	3364      	adds	r3, #100	@ 0x64
 800385c:	4a0e      	ldr	r2, [pc, #56]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 800385e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
	hpage.hotTemperature_y = hpage.setTemperature_y;
 8003862:	4b0d      	ldr	r3, [pc, #52]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003864:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003868:	4a0b      	ldr	r2, [pc, #44]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 800386a:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
	hpage.hotTemperature_ye = hpage.setTemperature_ye;
 800386e:	4b0a      	ldr	r3, [pc, #40]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003874:	4a08      	ldr	r2, [pc, #32]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003876:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
	//Box 2 Colors
	hpage.setTemperature_backgroundColor = RGB565_Dodger_blue;
 800387a:	4b07      	ldr	r3, [pc, #28]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 800387c:	f242 429f 	movw	r2, #9375	@ 0x249f
 8003880:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
	hpage.setTemperature_wordColor = RGB565_White;
 8003884:	4b04      	ldr	r3, [pc, #16]	@ (8003898 <PAGE_HOME_INIT_VAR+0x1b8>)
 8003886:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800388a:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96

}
 800388e:	bf00      	nop
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	200010e4 	.word	0x200010e4

0800389c <PAGE_HOME_Draw>:
void PAGE_HOME_Draw(uint32_t frameBuffer){
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
	draw_futuristic_background(frameBuffer);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff fd9d 	bl	80033e4 <draw_futuristic_background>
	draw_statistic_panel(frameBuffer);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f832 	bl	8003914 <draw_statistic_panel>
	draw_box_1(frameBuffer);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f84b 	bl	800394c <draw_box_1>
	draw_box_2(frameBuffer);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f8d4 	bl	8003a64 <draw_box_2>
}
 80038bc:	bf00      	nop
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <draw_wifi_status>:

void PAGE_CONF_Draw(uint32_t frameBuffer){
}

void draw_wifi_status(uint32_t frameBuffer){
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af04      	add	r7, sp, #16
 80038ca:	6078      	str	r0, [r7, #4]
	draw_circle_filled(frameBuffer, wifi_status_x, wifi_status_y, wifi_status_r, wifi_color_connected);
 80038cc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	230a      	movs	r3, #10
 80038d4:	2264      	movs	r2, #100	@ 0x64
 80038d6:	f44f 7116 	mov.w	r1, #600	@ 0x258
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7ff feb0 	bl	8003640 <draw_circle_filled>
	LCD_ShowString(frameBuffer, wifi_status_x + wifi_status_r + 10, wifi_status_y - wifi_status_r, 24, "WiFi Status",
 80038e0:	4b0a      	ldr	r3, [pc, #40]	@ (800390c <draw_wifi_status+0x48>)
 80038e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038e4:	4a09      	ldr	r2, [pc, #36]	@ (800390c <draw_wifi_status+0x48>)
 80038e6:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 80038e8:	2100      	movs	r1, #0
 80038ea:	9103      	str	r1, [sp, #12]
 80038ec:	9202      	str	r2, [sp, #8]
 80038ee:	9301      	str	r3, [sp, #4]
 80038f0:	4b07      	ldr	r3, [pc, #28]	@ (8003910 <draw_wifi_status+0x4c>)
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	2318      	movs	r3, #24
 80038f6:	225a      	movs	r2, #90	@ 0x5a
 80038f8:	f44f 711b 	mov.w	r1, #620	@ 0x26c
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff fabd 	bl	8002e7c <LCD_ShowString>
			hpage.setBox_wordColor, hpage.setBox_backgroundColor, false);
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	200010e4 	.word	0x200010e4
 8003910:	0800cbf8 	.word	0x0800cbf8

08003914 <draw_statistic_panel>:

void draw_statistic_panel(uint32_t frameBuffer){
 8003914:	b590      	push	{r4, r7, lr}
 8003916:	b085      	sub	sp, #20
 8003918:	af02      	add	r7, sp, #8
 800391a:	6078      	str	r0, [r7, #4]
	LCD_Fill(frameBuffer, hpage.statisticPanel_x, hpage.statisticPanel_y,
 800391c:	4b0a      	ldr	r3, [pc, #40]	@ (8003948 <draw_statistic_panel+0x34>)
 800391e:	6819      	ldr	r1, [r3, #0]
 8003920:	4b09      	ldr	r3, [pc, #36]	@ (8003948 <draw_statistic_panel+0x34>)
 8003922:	6898      	ldr	r0, [r3, #8]
 8003924:	4b08      	ldr	r3, [pc, #32]	@ (8003948 <draw_statistic_panel+0x34>)
 8003926:	685c      	ldr	r4, [r3, #4]
 8003928:	4b07      	ldr	r3, [pc, #28]	@ (8003948 <draw_statistic_panel+0x34>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	4a06      	ldr	r2, [pc, #24]	@ (8003948 <draw_statistic_panel+0x34>)
 800392e:	8a12      	ldrh	r2, [r2, #16]
 8003930:	9201      	str	r2, [sp, #4]
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	4623      	mov	r3, r4
 8003936:	4602      	mov	r2, r0
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff f9d3 	bl	8002ce4 <LCD_Fill>
			hpage.statisticPanel_xe, hpage.statisticPanel_ye, hpage.statisticalPanel_backgroundColor);
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	bd90      	pop	{r4, r7, pc}
 8003946:	bf00      	nop
 8003948:	200010e4 	.word	0x200010e4

0800394c <draw_box_1>:
void plot_statistic_panel(uint32_t frameBuffer){

}

void draw_box_1(uint32_t frameBuffer){
 800394c:	b590      	push	{r4, r7, lr}
 800394e:	b087      	sub	sp, #28
 8003950:	af04      	add	r7, sp, #16
 8003952:	6078      	str	r0, [r7, #4]
	//RGB565_Green
	draw_wifi_status(frameBuffer);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff ffb5 	bl	80038c4 <draw_wifi_status>
	//LCD_Fill(frameBuffer, hpage.arrowLeft_x, hpage.arrowLeft_y, hpage.arrowLeft_xe, hpage.arrowLeft_ye, hpage.arrow_backgroundColor);
	draw_arrow_left(frameBuffer, 4);
 800395a:	2104      	movs	r1, #4
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f949 	bl	8003bf4 <draw_arrow_left>
	//LCD_Fill(frameBuffer, hpage.arrowRight_x, hpage.arrowRight_y, hpage.arrowRight_xe, hpage.arrowRight_ye, hpage.arrow_backgroundColor, 4);
	draw_arrow_right(frameBuffer, 4);
 8003962:	2104      	movs	r1, #4
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f993 	bl	8003c90 <draw_arrow_right>
	//LCD_Fill(frameBuffer, hpage.setBox_x, hpage.setBox_y, hpage.setBox_xe, hpage.setBox_ye, hpage.setBox_backgroundColor);
	LCD_ShowString(frameBuffer, hpage.setBox_x + box_1_WIDTH/4, hpage.setBox_y + box_1_HEIGHT/4, 24, "25",
 800396a:	4b24      	ldr	r3, [pc, #144]	@ (80039fc <draw_box_1+0xb0>)
 800396c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396e:	f103 010c 	add.w	r1, r3, #12
 8003972:	4b22      	ldr	r3, [pc, #136]	@ (80039fc <draw_box_1+0xb0>)
 8003974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003976:	f103 000a 	add.w	r0, r3, #10
 800397a:	4b20      	ldr	r3, [pc, #128]	@ (80039fc <draw_box_1+0xb0>)
 800397c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800397e:	4a1f      	ldr	r2, [pc, #124]	@ (80039fc <draw_box_1+0xb0>)
 8003980:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8003982:	2400      	movs	r4, #0
 8003984:	9403      	str	r4, [sp, #12]
 8003986:	9202      	str	r2, [sp, #8]
 8003988:	9301      	str	r3, [sp, #4]
 800398a:	4b1d      	ldr	r3, [pc, #116]	@ (8003a00 <draw_box_1+0xb4>)
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	2318      	movs	r3, #24
 8003990:	4602      	mov	r2, r0
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff fa72 	bl	8002e7c <LCD_ShowString>
			hpage.setBox_wordColor, hpage.setBox_backgroundColor, false);

	//LCD_Fill(frameBuffer, hpage.homeBox_x, hpage.homeBox_y, hpage.homeBox_xe, hpage.homeBox_ye, hpage.setBox_backgroundColor);
	LCD_ShowString(frameBuffer, hpage.homeBox_x + box_1_WIDTH/4, hpage.homeBox_y + box_1_HEIGHT/4, 24, "SET",
 8003998:	4b18      	ldr	r3, [pc, #96]	@ (80039fc <draw_box_1+0xb0>)
 800399a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399c:	f103 010c 	add.w	r1, r3, #12
 80039a0:	4b16      	ldr	r3, [pc, #88]	@ (80039fc <draw_box_1+0xb0>)
 80039a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039a4:	f103 000a 	add.w	r0, r3, #10
 80039a8:	4b14      	ldr	r3, [pc, #80]	@ (80039fc <draw_box_1+0xb0>)
 80039aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039ac:	4a13      	ldr	r2, [pc, #76]	@ (80039fc <draw_box_1+0xb0>)
 80039ae:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 80039b0:	2400      	movs	r4, #0
 80039b2:	9403      	str	r4, [sp, #12]
 80039b4:	9202      	str	r2, [sp, #8]
 80039b6:	9301      	str	r3, [sp, #4]
 80039b8:	4b12      	ldr	r3, [pc, #72]	@ (8003a04 <draw_box_1+0xb8>)
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	2318      	movs	r3, #24
 80039be:	4602      	mov	r2, r0
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff fa5b 	bl	8002e7c <LCD_ShowString>
			hpage.setBox_wordColor, hpage.setBox_backgroundColor, false);
	//LCD_Fill(frameBuffer, hpage.confBox_x, hpage.confBox_y, hpage.confBox_xe, hpage.confBox_ye, hpage.setBox_backgroundColor);
	LCD_ShowString(frameBuffer, hpage.confBox_x + box_1_WIDTH/4, hpage.confBox_y + box_1_HEIGHT/4, 24, "STOP",
 80039c6:	4b0d      	ldr	r3, [pc, #52]	@ (80039fc <draw_box_1+0xb0>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ca:	f103 010c 	add.w	r1, r3, #12
 80039ce:	4b0b      	ldr	r3, [pc, #44]	@ (80039fc <draw_box_1+0xb0>)
 80039d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039d2:	f103 000a 	add.w	r0, r3, #10
 80039d6:	4b09      	ldr	r3, [pc, #36]	@ (80039fc <draw_box_1+0xb0>)
 80039d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039da:	4a08      	ldr	r2, [pc, #32]	@ (80039fc <draw_box_1+0xb0>)
 80039dc:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 80039de:	2400      	movs	r4, #0
 80039e0:	9403      	str	r4, [sp, #12]
 80039e2:	9202      	str	r2, [sp, #8]
 80039e4:	9301      	str	r3, [sp, #4]
 80039e6:	4b08      	ldr	r3, [pc, #32]	@ (8003a08 <draw_box_1+0xbc>)
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	2318      	movs	r3, #24
 80039ec:	4602      	mov	r2, r0
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7ff fa44 	bl	8002e7c <LCD_ShowString>
			hpage.setBox_wordColor, hpage.setBox_backgroundColor, false);
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd90      	pop	{r4, r7, pc}
 80039fc:	200010e4 	.word	0x200010e4
 8003a00:	0800cc04 	.word	0x0800cc04
 8003a04:	0800cc08 	.word	0x0800cc08
 8003a08:	0800cc0c 	.word	0x0800cc0c

08003a0c <update_setBox>:
// LCD_ShowChar(uint32_t frameBuffer, u32 x,u32 y, u8 num,u8 size, u16 color)
void draw_box_1_words(uint32_t frameBuffer){

}

void update_setBox(uint32_t frameBuffer, int newTemp){
 8003a0c:	b590      	push	{r4, r7, lr}
 8003a0e:	b08d      	sub	sp, #52	@ 0x34
 8003a10:	af04      	add	r7, sp, #16
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
	char temp[20];
	sprintf(temp, "%d", newTemp);
 8003a16:	f107 030c 	add.w	r3, r7, #12
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	490f      	ldr	r1, [pc, #60]	@ (8003a5c <update_setBox+0x50>)
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f008 f9e4 	bl	800bdec <siprintf>
	LCD_ShowString(frameBuffer, hpage.setBox_x + box_1_WIDTH/4, hpage.setBox_y + box_1_HEIGHT/4, 24, temp,
 8003a24:	4b0e      	ldr	r3, [pc, #56]	@ (8003a60 <update_setBox+0x54>)
 8003a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a28:	f103 010c 	add.w	r1, r3, #12
 8003a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a60 <update_setBox+0x54>)
 8003a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a30:	f103 000a 	add.w	r0, r3, #10
 8003a34:	4b0a      	ldr	r3, [pc, #40]	@ (8003a60 <update_setBox+0x54>)
 8003a36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a38:	4a09      	ldr	r2, [pc, #36]	@ (8003a60 <update_setBox+0x54>)
 8003a3a:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8003a3c:	2401      	movs	r4, #1
 8003a3e:	9403      	str	r4, [sp, #12]
 8003a40:	9202      	str	r2, [sp, #8]
 8003a42:	9301      	str	r3, [sp, #4]
 8003a44:	f107 030c 	add.w	r3, r7, #12
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	2318      	movs	r3, #24
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7ff fa14 	bl	8002e7c <LCD_ShowString>
	hpage.setBox_wordColor, hpage.setBox_backgroundColor, true);
}
 8003a54:	bf00      	nop
 8003a56:	3724      	adds	r7, #36	@ 0x24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd90      	pop	{r4, r7, pc}
 8003a5c:	0800cc14 	.word	0x0800cc14
 8003a60:	200010e4 	.word	0x200010e4

08003a64 <draw_box_2>:
}
void update_confBox(uint32_t frameBuffer){

}

void draw_box_2(uint32_t frameBuffer){
 8003a64:	b590      	push	{r4, r7, lr}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af04      	add	r7, sp, #16
 8003a6a:	6078      	str	r0, [r7, #4]
	LCD_ShowString(frameBuffer, hpage.setTemperature_x + box_1_WIDTH/4, hpage.setTemperature_y + box_1_HEIGHT/4, 24, "Calling",
 8003a6c:	4b27      	ldr	r3, [pc, #156]	@ (8003b0c <draw_box_2+0xa8>)
 8003a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a72:	f103 010c 	add.w	r1, r3, #12
 8003a76:	4b25      	ldr	r3, [pc, #148]	@ (8003b0c <draw_box_2+0xa8>)
 8003a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a7c:	f103 000a 	add.w	r0, r3, #10
 8003a80:	4b22      	ldr	r3, [pc, #136]	@ (8003b0c <draw_box_2+0xa8>)
 8003a82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a84:	4a21      	ldr	r2, [pc, #132]	@ (8003b0c <draw_box_2+0xa8>)
 8003a86:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8003a88:	2400      	movs	r4, #0
 8003a8a:	9403      	str	r4, [sp, #12]
 8003a8c:	9202      	str	r2, [sp, #8]
 8003a8e:	9301      	str	r3, [sp, #4]
 8003a90:	4b1f      	ldr	r3, [pc, #124]	@ (8003b10 <draw_box_2+0xac>)
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	2318      	movs	r3, #24
 8003a96:	4602      	mov	r2, r0
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff f9ef 	bl	8002e7c <LCD_ShowString>
			hpage.setBox_wordColor, hpage.setBox_backgroundColor, false);

	LCD_ShowString(frameBuffer, hpage.outTemperature_x + box_1_WIDTH/4, hpage.outTemperature_y + box_1_HEIGHT/4, 24, "Shower",
 8003a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8003b0c <draw_box_2+0xa8>)
 8003aa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003aa4:	f103 010c 	add.w	r1, r3, #12
 8003aa8:	4b18      	ldr	r3, [pc, #96]	@ (8003b0c <draw_box_2+0xa8>)
 8003aaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003aae:	f103 000a 	add.w	r0, r3, #10
 8003ab2:	4b16      	ldr	r3, [pc, #88]	@ (8003b0c <draw_box_2+0xa8>)
 8003ab4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ab6:	4a15      	ldr	r2, [pc, #84]	@ (8003b0c <draw_box_2+0xa8>)
 8003ab8:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8003aba:	2400      	movs	r4, #0
 8003abc:	9403      	str	r4, [sp, #12]
 8003abe:	9202      	str	r2, [sp, #8]
 8003ac0:	9301      	str	r3, [sp, #4]
 8003ac2:	4b14      	ldr	r3, [pc, #80]	@ (8003b14 <draw_box_2+0xb0>)
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	2318      	movs	r3, #24
 8003ac8:	4602      	mov	r2, r0
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff f9d6 	bl	8002e7c <LCD_ShowString>
			hpage.setBox_wordColor, hpage.setBox_backgroundColor, false);

	LCD_ShowString(frameBuffer, hpage.hotTemperature_x + box_1_WIDTH/4, hpage.hotTemperature_y + box_1_HEIGHT/4, 24, "Hot Water",
 8003ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8003b0c <draw_box_2+0xa8>)
 8003ad2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003ad6:	f103 010c 	add.w	r1, r3, #12
 8003ada:	4b0c      	ldr	r3, [pc, #48]	@ (8003b0c <draw_box_2+0xa8>)
 8003adc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ae0:	f103 000a 	add.w	r0, r3, #10
 8003ae4:	4b09      	ldr	r3, [pc, #36]	@ (8003b0c <draw_box_2+0xa8>)
 8003ae6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ae8:	4a08      	ldr	r2, [pc, #32]	@ (8003b0c <draw_box_2+0xa8>)
 8003aea:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8003aec:	2400      	movs	r4, #0
 8003aee:	9403      	str	r4, [sp, #12]
 8003af0:	9202      	str	r2, [sp, #8]
 8003af2:	9301      	str	r3, [sp, #4]
 8003af4:	4b08      	ldr	r3, [pc, #32]	@ (8003b18 <draw_box_2+0xb4>)
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	2318      	movs	r3, #24
 8003afa:	4602      	mov	r2, r0
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7ff f9bd 	bl	8002e7c <LCD_ShowString>
			hpage.setBox_wordColor, hpage.setBox_backgroundColor, false);
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd90      	pop	{r4, r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	200010e4 	.word	0x200010e4
 8003b10:	0800cc18 	.word	0x0800cc18
 8003b14:	0800cc20 	.word	0x0800cc20
 8003b18:	0800cc28 	.word	0x0800cc28

08003b1c <update_setTemp>:
void update_setTemp(uint32_t frameBuffer, char *temp){
 8003b1c:	b590      	push	{r4, r7, lr}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af04      	add	r7, sp, #16
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
	LCD_ShowString(frameBuffer, hpage.setTemperature_x + box_1_WIDTH/4, hpage.setTemperature_y + box_1_HEIGHT, 24, temp,
 8003b26:	4b0e      	ldr	r3, [pc, #56]	@ (8003b60 <update_setTemp+0x44>)
 8003b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b2c:	f103 010c 	add.w	r1, r3, #12
 8003b30:	4b0b      	ldr	r3, [pc, #44]	@ (8003b60 <update_setTemp+0x44>)
 8003b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b36:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8003b3a:	4b09      	ldr	r3, [pc, #36]	@ (8003b60 <update_setTemp+0x44>)
 8003b3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b3e:	4a08      	ldr	r2, [pc, #32]	@ (8003b60 <update_setTemp+0x44>)
 8003b40:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8003b42:	2401      	movs	r4, #1
 8003b44:	9403      	str	r4, [sp, #12]
 8003b46:	9202      	str	r2, [sp, #8]
 8003b48:	9301      	str	r3, [sp, #4]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	2318      	movs	r3, #24
 8003b50:	4602      	mov	r2, r0
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff f992 	bl	8002e7c <LCD_ShowString>
	hpage.setBox_wordColor, hpage.setBox_backgroundColor, true);
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd90      	pop	{r4, r7, pc}
 8003b60:	200010e4 	.word	0x200010e4

08003b64 <update_outTemp>:
void update_outTemp(uint32_t frameBuffer, char *temp){
 8003b64:	b590      	push	{r4, r7, lr}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af04      	add	r7, sp, #16
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
	LCD_ShowString(frameBuffer, hpage.outTemperature_x + box_1_WIDTH/4, hpage.outTemperature_y + box_1_HEIGHT, 24, temp,
 8003b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba8 <update_outTemp+0x44>)
 8003b70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b74:	f103 010c 	add.w	r1, r3, #12
 8003b78:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba8 <update_outTemp+0x44>)
 8003b7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003b7e:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8003b82:	4b09      	ldr	r3, [pc, #36]	@ (8003ba8 <update_outTemp+0x44>)
 8003b84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b86:	4a08      	ldr	r2, [pc, #32]	@ (8003ba8 <update_outTemp+0x44>)
 8003b88:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8003b8a:	2401      	movs	r4, #1
 8003b8c:	9403      	str	r4, [sp, #12]
 8003b8e:	9202      	str	r2, [sp, #8]
 8003b90:	9301      	str	r3, [sp, #4]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	2318      	movs	r3, #24
 8003b98:	4602      	mov	r2, r0
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff f96e 	bl	8002e7c <LCD_ShowString>
	hpage.setBox_wordColor, hpage.setBox_backgroundColor, true);
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd90      	pop	{r4, r7, pc}
 8003ba8:	200010e4 	.word	0x200010e4

08003bac <update_hotTemp>:
void update_hotTemp(uint32_t frameBuffer, char *temp){
 8003bac:	b590      	push	{r4, r7, lr}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af04      	add	r7, sp, #16
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
	LCD_ShowString(frameBuffer, hpage.hotTemperature_x + box_1_WIDTH/4, hpage.hotTemperature_y + box_1_HEIGHT, 24, temp,
 8003bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf0 <update_hotTemp+0x44>)
 8003bb8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003bbc:	f103 010c 	add.w	r1, r3, #12
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf0 <update_hotTemp+0x44>)
 8003bc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bc6:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8003bca:	4b09      	ldr	r3, [pc, #36]	@ (8003bf0 <update_hotTemp+0x44>)
 8003bcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bce:	4a08      	ldr	r2, [pc, #32]	@ (8003bf0 <update_hotTemp+0x44>)
 8003bd0:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8003bd2:	2401      	movs	r4, #1
 8003bd4:	9403      	str	r4, [sp, #12]
 8003bd6:	9202      	str	r2, [sp, #8]
 8003bd8:	9301      	str	r3, [sp, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	2318      	movs	r3, #24
 8003be0:	4602      	mov	r2, r0
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff f94a 	bl	8002e7c <LCD_ShowString>
	hpage.setBox_wordColor, hpage.setBox_backgroundColor, true);
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd90      	pop	{r4, r7, pc}
 8003bf0:	200010e4 	.word	0x200010e4

08003bf4 <draw_arrow_left>:

void draw_arrow_left(uint32_t frameBuffer, int thickness){
 8003bf4:	b590      	push	{r4, r7, lr}
 8003bf6:	b08b      	sub	sp, #44	@ 0x2c
 8003bf8:	af04      	add	r7, sp, #16
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]

    const int W = arrow_WIDHT;
 8003bfe:	231e      	movs	r3, #30
 8003c00:	617b      	str	r3, [r7, #20]
    const int H = arrow_HEIGHT;
 8003c02:	231e      	movs	r3, #30
 8003c04:	613b      	str	r3, [r7, #16]
    int midY = hpage.arrowLeft_y + H/2;
 8003c06:	4b21      	ldr	r3, [pc, #132]	@ (8003c8c <draw_arrow_left+0x98>)
 8003c08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	0fd9      	lsrs	r1, r3, #31
 8003c0e:	440b      	add	r3, r1
 8003c10:	105b      	asrs	r3, r3, #1
 8003c12:	4413      	add	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]

    // upper arm: from top-right down to midpoint
    drawThickLine(frameBuffer,
    		hpage.arrowLeft_x + (W - 1), hpage.arrowLeft_y,
 8003c16:	4b1d      	ldr	r3, [pc, #116]	@ (8003c8c <draw_arrow_left+0x98>)
 8003c18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3b01      	subs	r3, #1
    drawThickLine(frameBuffer,
 8003c20:	4619      	mov	r1, r3
    		hpage.arrowLeft_x + (W - 1), hpage.arrowLeft_y,
 8003c22:	4b1a      	ldr	r3, [pc, #104]	@ (8003c8c <draw_arrow_left+0x98>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    drawThickLine(frameBuffer,
 8003c26:	4618      	mov	r0, r3
			hpage.arrowLeft_x,             midY,
 8003c28:	4b18      	ldr	r3, [pc, #96]	@ (8003c8c <draw_arrow_left+0x98>)
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    drawThickLine(frameBuffer,
 8003c2c:	461c      	mov	r4, r3
				  hpage.arrow_arrowColor, thickness);
 8003c2e:	4b17      	ldr	r3, [pc, #92]	@ (8003c8c <draw_arrow_left+0x98>)
 8003c30:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
    drawThickLine(frameBuffer,
 8003c34:	461a      	mov	r2, r3
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	9302      	str	r3, [sp, #8]
 8003c3a:	9201      	str	r2, [sp, #4]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	4623      	mov	r3, r4
 8003c42:	4602      	mov	r2, r0
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff fc98 	bl	800357a <drawThickLine>

    // lower arm: from bottom-right up to midpoint
    drawThickLine(frameBuffer,
    		hpage.arrowLeft_x + (W - 1), hpage.arrowLeft_y + (H - 1),
 8003c4a:	4b10      	ldr	r3, [pc, #64]	@ (8003c8c <draw_arrow_left+0x98>)
 8003c4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	4413      	add	r3, r2
 8003c52:	3b01      	subs	r3, #1
    drawThickLine(frameBuffer,
 8003c54:	4619      	mov	r1, r3
    		hpage.arrowLeft_x + (W - 1), hpage.arrowLeft_y + (H - 1),
 8003c56:	4b0d      	ldr	r3, [pc, #52]	@ (8003c8c <draw_arrow_left+0x98>)
 8003c58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	3b01      	subs	r3, #1
    drawThickLine(frameBuffer,
 8003c60:	4618      	mov	r0, r3
			hpage.arrowLeft_x,             midY,
 8003c62:	4b0a      	ldr	r3, [pc, #40]	@ (8003c8c <draw_arrow_left+0x98>)
 8003c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    drawThickLine(frameBuffer,
 8003c66:	461c      	mov	r4, r3
				  hpage.arrow_arrowColor, thickness);
 8003c68:	4b08      	ldr	r3, [pc, #32]	@ (8003c8c <draw_arrow_left+0x98>)
 8003c6a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
    drawThickLine(frameBuffer,
 8003c6e:	461a      	mov	r2, r3
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	9302      	str	r3, [sp, #8]
 8003c74:	9201      	str	r2, [sp, #4]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	4623      	mov	r3, r4
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff fc7b 	bl	800357a <drawThickLine>
}
 8003c84:	bf00      	nop
 8003c86:	371c      	adds	r7, #28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd90      	pop	{r4, r7, pc}
 8003c8c:	200010e4 	.word	0x200010e4

08003c90 <draw_arrow_right>:
	HAL_Delay(500);
	draw_arrow_left(frameBuffer, 4);

}

void draw_arrow_right(uint32_t frameBuffer, int thickness){
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08c      	sub	sp, #48	@ 0x30
 8003c94:	af04      	add	r7, sp, #16
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]

    const int W = arrow_WIDHT;
 8003c9a:	231e      	movs	r3, #30
 8003c9c:	61fb      	str	r3, [r7, #28]
    const int H = arrow_HEIGHT;
 8003c9e:	231e      	movs	r3, #30
 8003ca0:	61bb      	str	r3, [r7, #24]
    int x = hpage.arrowRight_x;
 8003ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8003d1c <draw_arrow_right+0x8c>)
 8003ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ca6:	617b      	str	r3, [r7, #20]
    int y = hpage.arrowRight_y;
 8003ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8003d1c <draw_arrow_right+0x8c>)
 8003caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cac:	613b      	str	r3, [r7, #16]
    int midY = y + H/2;
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	0fda      	lsrs	r2, r3, #31
 8003cb2:	4413      	add	r3, r2
 8003cb4:	105b      	asrs	r3, r3, #1
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	4413      	add	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]

    // top-left to center-right
    drawThickLine(frameBuffer,
        x,         y,
        x + W - 1, midY,
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	4413      	add	r3, r2
    drawThickLine(frameBuffer,
 8003cc4:	1e5a      	subs	r2, r3, #1
        hpage.arrow_arrowColor, thickness);
 8003cc6:	4b15      	ldr	r3, [pc, #84]	@ (8003d1c <draw_arrow_right+0x8c>)
 8003cc8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
    drawThickLine(frameBuffer,
 8003ccc:	4619      	mov	r1, r3
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	9302      	str	r3, [sp, #8]
 8003cd2:	9101      	str	r1, [sp, #4]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	6979      	ldr	r1, [r7, #20]
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7ff fc4b 	bl	800357a <drawThickLine>

    // bottom-left to center-right
    drawThickLine(frameBuffer,
        x,         y + H - 1,
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	4413      	add	r3, r2
    drawThickLine(frameBuffer,
 8003cea:	1e59      	subs	r1, r3, #1
        x + W - 1, midY,
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	4413      	add	r3, r2
    drawThickLine(frameBuffer,
 8003cf2:	1e5a      	subs	r2, r3, #1
        hpage.arrow_arrowColor, thickness);
 8003cf4:	4b09      	ldr	r3, [pc, #36]	@ (8003d1c <draw_arrow_right+0x8c>)
 8003cf6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
    drawThickLine(frameBuffer,
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	9302      	str	r3, [sp, #8]
 8003d00:	9001      	str	r0, [sp, #4]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	4613      	mov	r3, r2
 8003d08:	460a      	mov	r2, r1
 8003d0a:	6979      	ldr	r1, [r7, #20]
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff fc34 	bl	800357a <drawThickLine>
}
 8003d12:	bf00      	nop
 8003d14:	3720      	adds	r7, #32
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	200010e4 	.word	0x200010e4

08003d20 <scan_>:
            // Optional: log or handle unsupported channel
            break;
    }
}

void scan_(uint32_t frameBuffer) {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b0e2      	sub	sp, #392	@ 0x188
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8003d2a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003d2e:	6018      	str	r0, [r3, #0]
    int x_reading[SAMPLE_SIZE] = {0};
 8003d30:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8003d34:	223c      	movs	r2, #60	@ 0x3c
 8003d36:	2100      	movs	r1, #0
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f008 f877 	bl	800be2c <memset>
    int y_reading[SAMPLE_SIZE] = {0};
 8003d3e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8003d42:	223c      	movs	r2, #60	@ 0x3c
 8003d44:	2100      	movs	r1, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f008 f870 	bl	800be2c <memset>
    int result[2] = {0};
 8003d4c:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	605a      	str	r2, [r3, #4]
    int x_ = 2500, y_ = 500, i=0;
 8003d56:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8003d5a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003d5e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003d62:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003d66:	2300      	movs	r3, #0
 8003d68:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    char msg8[100], msg[100];

	sprintf(msg8,"ENTERED SCAN_\n");
 8003d6c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003d70:	49c8      	ldr	r1, [pc, #800]	@ (8004094 <scan_+0x374>)
 8003d72:	4618      	mov	r0, r3
 8003d74:	f008 f83a 	bl	800bdec <siprintf>
	HAL_UART_Transmit(&huart8, (uint8_t *)msg8, strlen(msg8), 100);
 8003d78:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fc fa3f 	bl	8000200 <strlen>
 8003d82:	4603      	mov	r3, r0
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8003d8a:	2364      	movs	r3, #100	@ 0x64
 8003d8c:	48c2      	ldr	r0, [pc, #776]	@ (8004098 <scan_+0x378>)
 8003d8e:	f004 f869 	bl	8007e64 <HAL_UART_Transmit>

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d92:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8003d96:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	6053      	str	r3, [r2, #4]
 8003da2:	6093      	str	r3, [r2, #8]
 8003da4:	60d3      	str	r3, [r2, #12]
 8003da6:	6113      	str	r3, [r2, #16]
    ADC_ChannelConfTypeDef sConfig = {0};
 8003da8:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8003dac:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8003db0:	461a      	mov	r2, r3
 8003db2:	2300      	movs	r3, #0
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	6053      	str	r3, [r2, #4]
 8003db8:	6093      	str	r3, [r2, #8]
 8003dba:	60d3      	str	r3, [r2, #12]

    while (x_ > 2100 && i < SAMPLE_SIZE) {
 8003dbc:	e187      	b.n	80040ce <scan_+0x3ae>
    	// === READ X POSITION ===
    	// Y+ (PC2) → VCC
    	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003dbe:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8003dc2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003dc6:	2204      	movs	r2, #4
 8003dc8:	601a      	str	r2, [r3, #0]
    	sprintf(msg8,"ENTERED SCAN_ while loop1\n");
 8003dca:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003dce:	49b3      	ldr	r1, [pc, #716]	@ (800409c <scan_+0x37c>)
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f008 f80b 	bl	800bdec <siprintf>
    	HAL_UART_Transmit(&huart8, (uint8_t *)msg8, strlen(msg8), 100);
 8003dd6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fc fa10 	bl	8000200 <strlen>
 8003de0:	4603      	mov	r3, r0
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8003de8:	2364      	movs	r3, #100	@ 0x64
 8003dea:	48ab      	ldr	r0, [pc, #684]	@ (8004098 <scan_+0x378>)
 8003dec:	f004 f83a 	bl	8007e64 <HAL_UART_Transmit>
    	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003df0:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8003df4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003df8:	2201      	movs	r2, #1
 8003dfa:	605a      	str	r2, [r3, #4]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfc:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8003e00:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003e04:	2200      	movs	r2, #0
 8003e06:	609a      	str	r2, [r3, #8]
    	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e08:	f107 031c 	add.w	r3, r7, #28
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	48a4      	ldr	r0, [pc, #656]	@ (80040a0 <scan_+0x380>)
 8003e10:	f001 fea2 	bl	8005b58 <HAL_GPIO_Init>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8003e14:	2201      	movs	r2, #1
 8003e16:	2104      	movs	r1, #4
 8003e18:	48a1      	ldr	r0, [pc, #644]	@ (80040a0 <scan_+0x380>)
 8003e1a:	f002 f849 	bl	8005eb0 <HAL_GPIO_WritePin>

    	// Y− (PC0) → GND
    	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003e1e:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8003e22:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003e26:	2201      	movs	r2, #1
 8003e28:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e2a:	f107 031c 	add.w	r3, r7, #28
 8003e2e:	4619      	mov	r1, r3
 8003e30:	489b      	ldr	r0, [pc, #620]	@ (80040a0 <scan_+0x380>)
 8003e32:	f001 fe91 	bl	8005b58 <HAL_GPIO_Init>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8003e36:	2200      	movs	r2, #0
 8003e38:	2101      	movs	r1, #1
 8003e3a:	4899      	ldr	r0, [pc, #612]	@ (80040a0 <scan_+0x380>)
 8003e3c:	f002 f838 	bl	8005eb0 <HAL_GPIO_WritePin>

    	// X+ and X− floating (PC1 + PB1)
    	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e40:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8003e44:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003e48:	2202      	movs	r2, #2
 8003e4a:	601a      	str	r2, [r3, #0]
    	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e4c:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8003e50:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003e54:	2203      	movs	r2, #3
 8003e56:	605a      	str	r2, [r3, #4]
    	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e58:	f107 031c 	add.w	r3, r7, #28
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4890      	ldr	r0, [pc, #576]	@ (80040a0 <scan_+0x380>)
 8003e60:	f001 fe7a 	bl	8005b58 <HAL_GPIO_Init>
    	osDelay(20);
 8003e64:	2014      	movs	r0, #20
 8003e66:	f004 fdf3 	bl	8008a50 <osDelay>
    	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e6a:	f107 031c 	add.w	r3, r7, #28
 8003e6e:	4619      	mov	r1, r3
 8003e70:	488c      	ldr	r0, [pc, #560]	@ (80040a4 <scan_+0x384>)
 8003e72:	f001 fe71 	bl	8005b58 <HAL_GPIO_Init>
    	osDelay(20);
 8003e76:	2014      	movs	r0, #20
 8003e78:	f004 fdea 	bl	8008a50 <osDelay>

    	sprintf(msg8,"ENTERED SCAN_ while loop2\n");
 8003e7c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003e80:	4989      	ldr	r1, [pc, #548]	@ (80040a8 <scan_+0x388>)
 8003e82:	4618      	mov	r0, r3
 8003e84:	f007 ffb2 	bl	800bdec <siprintf>
    	HAL_UART_Transmit(&huart8, (uint8_t *)msg8, strlen(msg8), 100);
 8003e88:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fc f9b7 	bl	8000200 <strlen>
 8003e92:	4603      	mov	r3, r0
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8003e9a:	2364      	movs	r3, #100	@ 0x64
 8003e9c:	487e      	ldr	r0, [pc, #504]	@ (8004098 <scan_+0x378>)
 8003e9e:	f003 ffe1 	bl	8007e64 <HAL_UART_Transmit>
    	// ADC CHANNEL 9 - PB1 (X read)
    	sConfig.Channel = ADC_CHANNEL_9;
 8003ea2:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8003ea6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8003eaa:	2209      	movs	r2, #9
 8003eac:	601a      	str	r2, [r3, #0]
    	sConfig.Rank = 1;
 8003eae:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8003eb2:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	605a      	str	r2, [r3, #4]
    	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003eba:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8003ebe:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8003ec2:	2207      	movs	r2, #7
 8003ec4:	609a      	str	r2, [r3, #8]
    	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) Error_Handler();
 8003ec6:	f107 030c 	add.w	r3, r7, #12
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4877      	ldr	r0, [pc, #476]	@ (80040ac <scan_+0x38c>)
 8003ece:	f001 f849 	bl	8004f64 <HAL_ADC_ConfigChannel>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <scan_+0x1bc>
 8003ed8:	f7fd ff62 	bl	8001da0 <Error_Handler>

    	HAL_ADC_Start(&hadc1);
 8003edc:	4873      	ldr	r0, [pc, #460]	@ (80040ac <scan_+0x38c>)
 8003ede:	f000 fea3 	bl	8004c28 <HAL_ADC_Start>
    	if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK){
 8003ee2:	210a      	movs	r1, #10
 8003ee4:	4871      	ldr	r0, [pc, #452]	@ (80040ac <scan_+0x38c>)
 8003ee6:	f000 ffa4 	bl	8004e32 <HAL_ADC_PollForConversion>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d177      	bne.n	8003fe0 <scan_+0x2c0>
    	    y_ = HAL_ADC_GetValue(&hadc1);
 8003ef0:	486e      	ldr	r0, [pc, #440]	@ (80040ac <scan_+0x38c>)
 8003ef2:	f001 f829 	bl	8004f48 <HAL_ADC_GetValue>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    		y_reading[i] = y_;}
 8003efc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003f06:	443b      	add	r3, r7
 8003f08:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8003f0c:	f843 2c88 	str.w	r2, [r3, #-136]
    	else {
    	    printf_(frameBuffer, "Y ADC Timeout");
    	    continue;
    	}
    	HAL_ADC_Stop(&hadc1);
 8003f10:	4866      	ldr	r0, [pc, #408]	@ (80040ac <scan_+0x38c>)
 8003f12:	f000 ff5b 	bl	8004dcc <HAL_ADC_Stop>

    	// === READ Y POSITION ===
    	// X+ (PB1) → VCC
    	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003f16:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8003f1a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003f1e:	2202      	movs	r2, #2
 8003f20:	601a      	str	r2, [r3, #0]
    	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f22:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8003f26:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	605a      	str	r2, [r3, #4]
    	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f2e:	f107 031c 	add.w	r3, r7, #28
 8003f32:	4619      	mov	r1, r3
 8003f34:	485b      	ldr	r0, [pc, #364]	@ (80040a4 <scan_+0x384>)
 8003f36:	f001 fe0f 	bl	8005b58 <HAL_GPIO_Init>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	2102      	movs	r1, #2
 8003f3e:	4859      	ldr	r0, [pc, #356]	@ (80040a4 <scan_+0x384>)
 8003f40:	f001 ffb6 	bl	8005eb0 <HAL_GPIO_WritePin>

    	// X− (PC1) → GND
    	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003f44:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8003f48:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f50:	f107 031c 	add.w	r3, r7, #28
 8003f54:	4619      	mov	r1, r3
 8003f56:	4852      	ldr	r0, [pc, #328]	@ (80040a0 <scan_+0x380>)
 8003f58:	f001 fdfe 	bl	8005b58 <HAL_GPIO_Init>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	2102      	movs	r1, #2
 8003f60:	484f      	ldr	r0, [pc, #316]	@ (80040a0 <scan_+0x380>)
 8003f62:	f001 ffa5 	bl	8005eb0 <HAL_GPIO_WritePin>

    	// Y+ and Y− floating (PC2, PC0)
    	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f66:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8003f6a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003f6e:	2204      	movs	r2, #4
 8003f70:	601a      	str	r2, [r3, #0]
    	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f72:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8003f76:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	605a      	str	r2, [r3, #4]
    	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f7e:	f107 031c 	add.w	r3, r7, #28
 8003f82:	4619      	mov	r1, r3
 8003f84:	4846      	ldr	r0, [pc, #280]	@ (80040a0 <scan_+0x380>)
 8003f86:	f001 fde7 	bl	8005b58 <HAL_GPIO_Init>

    	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003f8a:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8003f8e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003f92:	2201      	movs	r2, #1
 8003f94:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f96:	f107 031c 	add.w	r3, r7, #28
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4840      	ldr	r0, [pc, #256]	@ (80040a0 <scan_+0x380>)
 8003f9e:	f001 fddb 	bl	8005b58 <HAL_GPIO_Init>

    	osDelay(10);
 8003fa2:	200a      	movs	r0, #10
 8003fa4:	f004 fd54 	bl	8008a50 <osDelay>

    	// ADC CHANNEL 12 - PC2 (Y read)
    	sConfig.Channel = ADC_CHANNEL_12;
 8003fa8:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8003fac:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8003fb0:	220c      	movs	r2, #12
 8003fb2:	601a      	str	r2, [r3, #0]
    	sConfig.Rank = 1;
 8003fb4:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8003fb8:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	605a      	str	r2, [r3, #4]
    	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003fc0:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8003fc4:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8003fc8:	2207      	movs	r2, #7
 8003fca:	609a      	str	r2, [r3, #8]
    	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) Error_Handler();
 8003fcc:	f107 030c 	add.w	r3, r7, #12
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4836      	ldr	r0, [pc, #216]	@ (80040ac <scan_+0x38c>)
 8003fd4:	f000 ffc6 	bl	8004f64 <HAL_ADC_ConfigChannel>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00b      	beq.n	8003ff6 <scan_+0x2d6>
 8003fde:	e008      	b.n	8003ff2 <scan_+0x2d2>
    	    printf_(frameBuffer, "Y ADC Timeout");
 8003fe0:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8003fe4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003fe8:	4931      	ldr	r1, [pc, #196]	@ (80040b0 <scan_+0x390>)
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	f7ff f90a 	bl	8003204 <printf_>
    	    continue;
 8003ff0:	e06d      	b.n	80040ce <scan_+0x3ae>
    	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) Error_Handler();
 8003ff2:	f7fd fed5 	bl	8001da0 <Error_Handler>

    	HAL_ADC_Start(&hadc1);
 8003ff6:	482d      	ldr	r0, [pc, #180]	@ (80040ac <scan_+0x38c>)
 8003ff8:	f000 fe16 	bl	8004c28 <HAL_ADC_Start>
    	if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK){
 8003ffc:	210a      	movs	r1, #10
 8003ffe:	482b      	ldr	r0, [pc, #172]	@ (80040ac <scan_+0x38c>)
 8004000:	f000 ff17 	bl	8004e32 <HAL_ADC_PollForConversion>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d158      	bne.n	80040bc <scan_+0x39c>
    	    x_ = HAL_ADC_GetValue(&hadc1);
 800400a:	4828      	ldr	r0, [pc, #160]	@ (80040ac <scan_+0x38c>)
 800400c:	f000 ff9c 	bl	8004f48 <HAL_ADC_GetValue>
 8004010:	4603      	mov	r3, r0
 8004012:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    		x_reading[i] = x_;}
 8004016:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004020:	443b      	add	r3, r7
 8004022:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8004026:	f843 2c4c 	str.w	r2, [r3, #-76]
    	else {
    	    printf_(frameBuffer, "X ADC Timeout");
    	    continue;
    	}
    	HAL_ADC_Stop(&hadc1);
 800402a:	4820      	ldr	r0, [pc, #128]	@ (80040ac <scan_+0x38c>)
 800402c:	f000 fece 	bl	8004dcc <HAL_ADC_Stop>

    	// Print values
    	//sprintf(msg, "X: %d | Y: %d", x_, y_);
    	//printf_(frameBuffer, msg);
    	sprintf(msg8,"X: %d | Y: %d\n", x_, y_);
 8004030:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8004034:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004038:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 800403c:	491d      	ldr	r1, [pc, #116]	@ (80040b4 <scan_+0x394>)
 800403e:	f007 fed5 	bl	800bdec <siprintf>
    	HAL_UART_Transmit(&huart8, (uint8_t *)msg8, strlen(msg8), 100);
 8004042:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004046:	4618      	mov	r0, r3
 8004048:	f7fc f8da 	bl	8000200 <strlen>
 800404c:	4603      	mov	r3, r0
 800404e:	b29a      	uxth	r2, r3
 8004050:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8004054:	2364      	movs	r3, #100	@ 0x64
 8004056:	4810      	ldr	r0, [pc, #64]	@ (8004098 <scan_+0x378>)
 8004058:	f003 ff04 	bl	8007e64 <HAL_UART_Transmit>

    	i++;
 800405c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004060:	3301      	adds	r3, #1
 8004062:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    	sprintf(msg8,"LOOPING #%d\n", i);
 8004066:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800406a:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 800406e:	4912      	ldr	r1, [pc, #72]	@ (80040b8 <scan_+0x398>)
 8004070:	4618      	mov	r0, r3
 8004072:	f007 febb 	bl	800bdec <siprintf>
        HAL_UART_Transmit(&huart8, (uint8_t *)msg8, strlen(msg8), 100);
 8004076:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800407a:	4618      	mov	r0, r3
 800407c:	f7fc f8c0 	bl	8000200 <strlen>
 8004080:	4603      	mov	r3, r0
 8004082:	b29a      	uxth	r2, r3
 8004084:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8004088:	2364      	movs	r3, #100	@ 0x64
 800408a:	4803      	ldr	r0, [pc, #12]	@ (8004098 <scan_+0x378>)
 800408c:	f003 feea 	bl	8007e64 <HAL_UART_Transmit>
 8004090:	e01d      	b.n	80040ce <scan_+0x3ae>
 8004092:	bf00      	nop
 8004094:	0800cc68 	.word	0x0800cc68
 8004098:	20000410 	.word	0x20000410
 800409c:	0800cc78 	.word	0x0800cc78
 80040a0:	40020800 	.word	0x40020800
 80040a4:	40020400 	.word	0x40020400
 80040a8:	0800cc94 	.word	0x0800cc94
 80040ac:	2000018c 	.word	0x2000018c
 80040b0:	0800cc34 	.word	0x0800cc34
 80040b4:	0800ccb0 	.word	0x0800ccb0
 80040b8:	0800ccc0 	.word	0x0800ccc0
    	    printf_(frameBuffer, "X ADC Timeout");
 80040bc:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80040c0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80040c4:	49ab      	ldr	r1, [pc, #684]	@ (8004374 <scan_+0x654>)
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	f7ff f89c 	bl	8003204 <printf_>
    	    continue;
 80040cc:	bf00      	nop
    while (x_ > 2100 && i < SAMPLE_SIZE) {
 80040ce:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80040d2:	f640 0234 	movw	r2, #2100	@ 0x834
 80040d6:	4293      	cmp	r3, r2
 80040d8:	dd04      	ble.n	80040e4 <scan_+0x3c4>
 80040da:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80040de:	2b0e      	cmp	r3, #14
 80040e0:	f77f ae6d 	ble.w	8003dbe <scan_+0x9e>
    }

    // === Compute average (or call a better filtering function) ===
    if(i < (SAMPLE_LOWER_CUT + SAMPLE_UPPER_CUT + 1)) return;
 80040e4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	f340 813e 	ble.w	800436a <scan_+0x64a>
    get_value(x_reading, y_reading, result, i);
 80040ee:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 80040f2:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 80040f6:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 80040fa:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80040fe:	f000 f959 	bl	80043b4 <get_value>
    if (result[0] == 0 || result[1] == 0){
 8004102:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <scan_+0x3f2>
 800410a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800410e:	2b00      	cmp	r3, #0
 8004110:	d11f      	bne.n	8004152 <scan_+0x432>
    	sprintf(msg8,"SCAN_ RETURNING ALREADY\n");
 8004112:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004116:	4998      	ldr	r1, [pc, #608]	@ (8004378 <scan_+0x658>)
 8004118:	4618      	mov	r0, r3
 800411a:	f007 fe67 	bl	800bdec <siprintf>
    	osMutexAcquire(adcMutexHandle, osWaitForever);
 800411e:	4b97      	ldr	r3, [pc, #604]	@ (800437c <scan_+0x65c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f04f 31ff 	mov.w	r1, #4294967295
 8004126:	4618      	mov	r0, r3
 8004128:	f004 fd33 	bl	8008b92 <osMutexAcquire>
        HAL_UART_Transmit(&huart8, (uint8_t *)msg8, strlen(msg8), 100);
 800412c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004130:	4618      	mov	r0, r3
 8004132:	f7fc f865 	bl	8000200 <strlen>
 8004136:	4603      	mov	r3, r0
 8004138:	b29a      	uxth	r2, r3
 800413a:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 800413e:	2364      	movs	r3, #100	@ 0x64
 8004140:	488f      	ldr	r0, [pc, #572]	@ (8004380 <scan_+0x660>)
 8004142:	f003 fe8f 	bl	8007e64 <HAL_UART_Transmit>
        osMutexRelease(adcMutexHandle);
 8004146:	4b8d      	ldr	r3, [pc, #564]	@ (800437c <scan_+0x65c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f004 fd6c 	bl	8008c28 <osMutexRelease>
    	return;
 8004150:	e10c      	b.n	800436c <scan_+0x64c>
    }

    sprintf(msg, "RESULT -> X2: %d | Y2: %d", result[0], result[1]);
 8004152:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8004156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800415a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800415e:	4989      	ldr	r1, [pc, #548]	@ (8004384 <scan_+0x664>)
 8004160:	f007 fe44 	bl	800bdec <siprintf>
    HAL_UART_Transmit(&huart8, (uint8_t *)msg8, strlen(msg8), 100);
 8004164:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004168:	4618      	mov	r0, r3
 800416a:	f7fc f849 	bl	8000200 <strlen>
 800416e:	4603      	mov	r3, r0
 8004170:	b29a      	uxth	r2, r3
 8004172:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8004176:	2364      	movs	r3, #100	@ 0x64
 8004178:	4881      	ldr	r0, [pc, #516]	@ (8004380 <scan_+0x660>)
 800417a:	f003 fe73 	bl	8007e64 <HAL_UART_Transmit>

    uint16_t x = (uint16_t) result[0];
 800417e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004182:	f8a7 317a 	strh.w	r3, [r7, #378]	@ 0x17a
    uint16_t y = (uint16_t) result[1];
 8004186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800418a:	f8a7 3178 	strh.w	r3, [r7, #376]	@ 0x178

    osMutexAcquire(adcMutexHandle, osWaitForever);
 800418e:	4b7b      	ldr	r3, [pc, #492]	@ (800437c <scan_+0x65c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f04f 31ff 	mov.w	r1, #4294967295
 8004196:	4618      	mov	r0, r3
 8004198:	f004 fcfb 	bl	8008b92 <osMutexAcquire>
    read_pad(frameBuffer, &pressed, x, y); // ✅
 800419c:	f8b7 217a 	ldrh.w	r2, [r7, #378]	@ 0x17a
 80041a0:	f8b7 3178 	ldrh.w	r3, [r7, #376]	@ 0x178
 80041a4:	f507 71c4 	add.w	r1, r7, #392	@ 0x188
 80041a8:	f5a1 70c2 	sub.w	r0, r1, #388	@ 0x184
 80041ac:	4976      	ldr	r1, [pc, #472]	@ (8004388 <scan_+0x668>)
 80041ae:	6800      	ldr	r0, [r0, #0]
 80041b0:	f000 f9b2 	bl	8004518 <read_pad>
    get_button(&button, &pressed); // ✅
 80041b4:	4974      	ldr	r1, [pc, #464]	@ (8004388 <scan_+0x668>)
 80041b6:	4875      	ldr	r0, [pc, #468]	@ (800438c <scan_+0x66c>)
 80041b8:	f000 fb62 	bl	8004880 <get_button>

// 1 - 2 - SET - STOP
	if(button.value == 1){ // Decrease
 80041bc:	4b73      	ldr	r3, [pc, #460]	@ (800438c <scan_+0x66c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d11e      	bne.n	8004202 <scan_+0x4e2>
		  sprintf(msg8,"DECREASE BUTTON\n");
 80041c4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80041c8:	4971      	ldr	r1, [pc, #452]	@ (8004390 <scan_+0x670>)
 80041ca:	4618      	mov	r0, r3
 80041cc:	f007 fe0e 	bl	800bdec <siprintf>
		  HAL_UART_Transmit(&huart8, (uint8_t *)msg8, strlen(msg8), 1);
 80041d0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fc f813 	bl	8000200 <strlen>
 80041da:	4603      	mov	r3, r0
 80041dc:	b29a      	uxth	r2, r3
 80041de:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 80041e2:	2301      	movs	r3, #1
 80041e4:	4866      	ldr	r0, [pc, #408]	@ (8004380 <scan_+0x660>)
 80041e6:	f003 fe3d 	bl	8007e64 <HAL_UART_Transmit>
		ADC_THREAD_CONTROL_BIT |= SET_DECREASE;
 80041ea:	4b6a      	ldr	r3, [pc, #424]	@ (8004394 <scan_+0x674>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f043 0301 	orr.w	r3, r3, #1
 80041f2:	4a68      	ldr	r2, [pc, #416]	@ (8004394 <scan_+0x674>)
 80041f4:	6013      	str	r3, [r2, #0]
		button.data -= 1;
 80041f6:	4b65      	ldr	r3, [pc, #404]	@ (800438c <scan_+0x66c>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	4a63      	ldr	r2, [pc, #396]	@ (800438c <scan_+0x66c>)
 80041fe:	6053      	str	r3, [r2, #4]
 8004200:	e05f      	b.n	80042c2 <scan_+0x5a2>
	}


	else if(button.value == 2){ // Increase
 8004202:	4b62      	ldr	r3, [pc, #392]	@ (800438c <scan_+0x66c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b02      	cmp	r3, #2
 8004208:	d11e      	bne.n	8004248 <scan_+0x528>
		  sprintf(msg8,"INCREASE BUTTON\n");
 800420a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800420e:	4962      	ldr	r1, [pc, #392]	@ (8004398 <scan_+0x678>)
 8004210:	4618      	mov	r0, r3
 8004212:	f007 fdeb 	bl	800bdec <siprintf>
		  HAL_UART_Transmit(&huart8, (uint8_t *)msg8, strlen(msg8), 1);
 8004216:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800421a:	4618      	mov	r0, r3
 800421c:	f7fb fff0 	bl	8000200 <strlen>
 8004220:	4603      	mov	r3, r0
 8004222:	b29a      	uxth	r2, r3
 8004224:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8004228:	2301      	movs	r3, #1
 800422a:	4855      	ldr	r0, [pc, #340]	@ (8004380 <scan_+0x660>)
 800422c:	f003 fe1a 	bl	8007e64 <HAL_UART_Transmit>
		button.data += 1;
 8004230:	4b56      	ldr	r3, [pc, #344]	@ (800438c <scan_+0x66c>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	3301      	adds	r3, #1
 8004236:	4a55      	ldr	r2, [pc, #340]	@ (800438c <scan_+0x66c>)
 8004238:	6053      	str	r3, [r2, #4]
		ADC_THREAD_CONTROL_BIT |= SET_INCREASE;
 800423a:	4b56      	ldr	r3, [pc, #344]	@ (8004394 <scan_+0x674>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f043 0302 	orr.w	r3, r3, #2
 8004242:	4a54      	ldr	r2, [pc, #336]	@ (8004394 <scan_+0x674>)
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	e03c      	b.n	80042c2 <scan_+0x5a2>
	}
	else if(button.value == -4){ // Run or Set
 8004248:	4b50      	ldr	r3, [pc, #320]	@ (800438c <scan_+0x66c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f113 0f04 	cmn.w	r3, #4
 8004250:	d119      	bne.n	8004286 <scan_+0x566>
		  sprintf(msg8,"RUN BUTTON\n");
 8004252:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004256:	4951      	ldr	r1, [pc, #324]	@ (800439c <scan_+0x67c>)
 8004258:	4618      	mov	r0, r3
 800425a:	f007 fdc7 	bl	800bdec <siprintf>
		  HAL_UART_Transmit(&huart8, (uint8_t *)msg8, strlen(msg8), 1);
 800425e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004262:	4618      	mov	r0, r3
 8004264:	f7fb ffcc 	bl	8000200 <strlen>
 8004268:	4603      	mov	r3, r0
 800426a:	b29a      	uxth	r2, r3
 800426c:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8004270:	2301      	movs	r3, #1
 8004272:	4843      	ldr	r0, [pc, #268]	@ (8004380 <scan_+0x660>)
 8004274:	f003 fdf6 	bl	8007e64 <HAL_UART_Transmit>
		ADC_THREAD_CONTROL_BIT |= START;
 8004278:	4b46      	ldr	r3, [pc, #280]	@ (8004394 <scan_+0x674>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f043 0304 	orr.w	r3, r3, #4
 8004280:	4a44      	ldr	r2, [pc, #272]	@ (8004394 <scan_+0x674>)
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	e01d      	b.n	80042c2 <scan_+0x5a2>
	}
	else if(button.value == -5){ // Stop
 8004286:	4b41      	ldr	r3, [pc, #260]	@ (800438c <scan_+0x66c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f113 0f05 	cmn.w	r3, #5
 800428e:	d118      	bne.n	80042c2 <scan_+0x5a2>
		  sprintf(msg8,"STOP BUTTON\n");
 8004290:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004294:	4942      	ldr	r1, [pc, #264]	@ (80043a0 <scan_+0x680>)
 8004296:	4618      	mov	r0, r3
 8004298:	f007 fda8 	bl	800bdec <siprintf>
		  HAL_UART_Transmit(&huart8, (uint8_t *)msg8, strlen(msg8), 1);
 800429c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fb ffad 	bl	8000200 <strlen>
 80042a6:	4603      	mov	r3, r0
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 80042ae:	2301      	movs	r3, #1
 80042b0:	4833      	ldr	r0, [pc, #204]	@ (8004380 <scan_+0x660>)
 80042b2:	f003 fdd7 	bl	8007e64 <HAL_UART_Transmit>
		ADC_THREAD_CONTROL_BIT |= IDLE;
 80042b6:	4b37      	ldr	r3, [pc, #220]	@ (8004394 <scan_+0x674>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f043 0308 	orr.w	r3, r3, #8
 80042be:	4a35      	ldr	r2, [pc, #212]	@ (8004394 <scan_+0x674>)
 80042c0:	6013      	str	r3, [r2, #0]
	}

	ADC_THREAD_CONTROL_BIT |= TOUCH;
 80042c2:	4b34      	ldr	r3, [pc, #208]	@ (8004394 <scan_+0x674>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f043 0310 	orr.w	r3, r3, #16
 80042ca:	4a32      	ldr	r2, [pc, #200]	@ (8004394 <scan_+0x674>)
 80042cc:	6013      	str	r3, [r2, #0]
	sprintf(msg8,"ACQUIRING adcControllerMutexHandle\n");
 80042ce:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80042d2:	4934      	ldr	r1, [pc, #208]	@ (80043a4 <scan_+0x684>)
 80042d4:	4618      	mov	r0, r3
 80042d6:	f007 fd89 	bl	800bdec <siprintf>
	HAL_UART_Transmit(&huart8, (uint8_t *)msg8, strlen(msg8), 1);
 80042da:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fb ff8e 	bl	8000200 <strlen>
 80042e4:	4603      	mov	r3, r0
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 80042ec:	2301      	movs	r3, #1
 80042ee:	4824      	ldr	r0, [pc, #144]	@ (8004380 <scan_+0x660>)
 80042f0:	f003 fdb8 	bl	8007e64 <HAL_UART_Transmit>
	osMutexRelease(adcMutexHandle);
 80042f4:	4b21      	ldr	r3, [pc, #132]	@ (800437c <scan_+0x65c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f004 fc95 	bl	8008c28 <osMutexRelease>
	osMutexAcquire(adcControllerMutexHandle, osWaitForever);
 80042fe:	4b2a      	ldr	r3, [pc, #168]	@ (80043a8 <scan_+0x688>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f04f 31ff 	mov.w	r1, #4294967295
 8004306:	4618      	mov	r0, r3
 8004308:	f004 fc43 	bl	8008b92 <osMutexAcquire>
	MAIN_THREAD_ADC_CONTROL_BIT |= ADC_THREAD_CONTROL_BIT; // -> Carry bit flags to the main thread
 800430c:	4b27      	ldr	r3, [pc, #156]	@ (80043ac <scan_+0x68c>)
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	4b20      	ldr	r3, [pc, #128]	@ (8004394 <scan_+0x674>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4313      	orrs	r3, r2
 8004316:	4a25      	ldr	r2, [pc, #148]	@ (80043ac <scan_+0x68c>)
 8004318:	6013      	str	r3, [r2, #0]
	osMutexRelease(adcControllerMutexHandle);
 800431a:	4b23      	ldr	r3, [pc, #140]	@ (80043a8 <scan_+0x688>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f004 fc82 	bl	8008c28 <osMutexRelease>

	osMutexAcquire(adcMutexHandle, osWaitForever);
 8004324:	4b15      	ldr	r3, [pc, #84]	@ (800437c <scan_+0x65c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f04f 31ff 	mov.w	r1, #4294967295
 800432c:	4618      	mov	r0, r3
 800432e:	f004 fc30 	bl	8008b92 <osMutexAcquire>
	ADC_THREAD_CONTROL_BIT = 0x00; // Reset bits
 8004332:	4b18      	ldr	r3, [pc, #96]	@ (8004394 <scan_+0x674>)
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]

	sprintf(msg8,"LEFT SCAN WITH SUCCESS\n");
 8004338:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800433c:	491c      	ldr	r1, [pc, #112]	@ (80043b0 <scan_+0x690>)
 800433e:	4618      	mov	r0, r3
 8004340:	f007 fd54 	bl	800bdec <siprintf>
	HAL_UART_Transmit(&huart8, (uint8_t *)msg8, strlen(msg8), 1);
 8004344:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004348:	4618      	mov	r0, r3
 800434a:	f7fb ff59 	bl	8000200 <strlen>
 800434e:	4603      	mov	r3, r0
 8004350:	b29a      	uxth	r2, r3
 8004352:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8004356:	2301      	movs	r3, #1
 8004358:	4809      	ldr	r0, [pc, #36]	@ (8004380 <scan_+0x660>)
 800435a:	f003 fd83 	bl	8007e64 <HAL_UART_Transmit>
	osMutexRelease(adcMutexHandle);
 800435e:	4b07      	ldr	r3, [pc, #28]	@ (800437c <scan_+0x65c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f004 fc60 	bl	8008c28 <osMutexRelease>
 8004368:	e000      	b.n	800436c <scan_+0x64c>
    if(i < (SAMPLE_LOWER_CUT + SAMPLE_UPPER_CUT + 1)) return;
 800436a:	bf00      	nop
}
 800436c:	f507 77c4 	add.w	r7, r7, #392	@ 0x188
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	0800cc44 	.word	0x0800cc44
 8004378:	0800ccd0 	.word	0x0800ccd0
 800437c:	200004ac 	.word	0x200004ac
 8004380:	20000410 	.word	0x20000410
 8004384:	0800ccec 	.word	0x0800ccec
 8004388:	20000fc4 	.word	0x20000fc4
 800438c:	20000000 	.word	0x20000000
 8004390:	0800cd08 	.word	0x0800cd08
 8004394:	200004bc 	.word	0x200004bc
 8004398:	0800cd1c 	.word	0x0800cd1c
 800439c:	0800cd30 	.word	0x0800cd30
 80043a0:	0800cd3c 	.word	0x0800cd3c
 80043a4:	0800cd4c 	.word	0x0800cd4c
 80043a8:	200004a0 	.word	0x200004a0
 80043ac:	200004c0 	.word	0x200004c0
 80043b0:	0800cd70 	.word	0x0800cd70

080043b4 <get_value>:

void get_value(int *x, int *y, int *result, int size){
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
 80043c0:	603b      	str	r3, [r7, #0]
	sort_(x, y, size);
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	68b9      	ldr	r1, [r7, #8]
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f840 	bl	800444c <sort_>
	result[0] = 0; result[1] = 0;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3304      	adds	r3, #4
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
	int k = 0;
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
	for(k=SAMPLE_LOWER_CUT; k < size-SAMPLE_UPPER_CUT; k++){
 80043de:	2301      	movs	r3, #1
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	e018      	b.n	8004416 <get_value+0x62>
		result[0] += x[k];
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	68f9      	ldr	r1, [r7, #12]
 80043ee:	440b      	add	r3, r1
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	441a      	add	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	601a      	str	r2, [r3, #0]
		result[1] += y[k];
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3304      	adds	r3, #4
 80043fc:	6819      	ldr	r1, [r3, #0]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	4413      	add	r3, r2
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3304      	adds	r3, #4
 800440c:	440a      	add	r2, r1
 800440e:	601a      	str	r2, [r3, #0]
	for(k=SAMPLE_LOWER_CUT; k < size-SAMPLE_UPPER_CUT; k++){
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	3301      	adds	r3, #1
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	3b01      	subs	r3, #1
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	429a      	cmp	r2, r3
 800441e:	dbe1      	blt.n	80043e4 <get_value+0x30>
	}

	result[0] /= (k - SAMPLE_LOWER_CUT);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	3b01      	subs	r3, #1
 8004428:	fb92 f2f3 	sdiv	r2, r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	601a      	str	r2, [r3, #0]
	result[1] /= (k - SAMPLE_LOWER_CUT);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3304      	adds	r3, #4
 8004434:	6819      	ldr	r1, [r3, #0]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	1e5a      	subs	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	3304      	adds	r3, #4
 800443e:	fb91 f2f2 	sdiv	r2, r1, r2
 8004442:	601a      	str	r2, [r3, #0]
}
 8004444:	bf00      	nop
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <sort_>:

void sort_(int *x, int *y, int size){
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
	for(int i=0; i<size - 1; i++){
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	e02f      	b.n	80044be <sort_+0x72>
		for(int j = size-1; j >i; j--){
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	3b01      	subs	r3, #1
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	e024      	b.n	80044b0 <sort_+0x64>
			if(x[j] < x[i]){
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	4413      	add	r3, r2
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	68f9      	ldr	r1, [r7, #12]
 8004476:	440b      	add	r3, r1
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	da04      	bge.n	8004488 <sort_+0x3c>
				exchange(x, i, j);
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	6979      	ldr	r1, [r7, #20]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f825 	bl	80044d2 <exchange>
			}
			if(y[j] < y[i]){
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	4413      	add	r3, r2
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	440b      	add	r3, r1
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	da04      	bge.n	80044aa <sort_+0x5e>
				exchange(y, i, j);
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	6979      	ldr	r1, [r7, #20]
 80044a4:	68b8      	ldr	r0, [r7, #8]
 80044a6:	f000 f814 	bl	80044d2 <exchange>
		for(int j = size-1; j >i; j--){
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	dcd6      	bgt.n	8004466 <sort_+0x1a>
	for(int i=0; i<size - 1; i++){
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	3301      	adds	r3, #1
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3b01      	subs	r3, #1
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	dbca      	blt.n	800445e <sort_+0x12>
			}
		}
	}
}
 80044c8:	bf00      	nop
 80044ca:	bf00      	nop
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <exchange>:

void exchange(int *x, int a, int b){
 80044d2:	b480      	push	{r7}
 80044d4:	b087      	sub	sp, #28
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	607a      	str	r2, [r7, #4]
	int temp = x[a];
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4413      	add	r3, r2
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	617b      	str	r3, [r7, #20]
	x[a] = x[b];
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	441a      	add	r2, r3
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	68f9      	ldr	r1, [r7, #12]
 80044f8:	440b      	add	r3, r1
 80044fa:	6812      	ldr	r2, [r2, #0]
 80044fc:	601a      	str	r2, [r3, #0]
	x[b] = temp;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4413      	add	r3, r2
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	601a      	str	r2, [r3, #0]
}
 800450a:	bf00      	nop
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
	...

08004518 <read_pad>:

void read_pad(uint32_t frameBuffer, Pressed *pressed, int x, int y){
 8004518:	b590      	push	{r4, r7, lr}
 800451a:	b0d1      	sub	sp, #324	@ 0x144
 800451c:	af02      	add	r7, sp, #8
 800451e:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 8004522:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 8004526:	6020      	str	r0, [r4, #0]
 8004528:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800452c:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 8004530:	6001      	str	r1, [r0, #0]
 8004532:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8004536:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800453a:	600a      	str	r2, [r1, #0]
 800453c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004540:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8004544:	6013      	str	r3, [r2, #0]
	int col[14][3] = {0};
 8004546:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800454a:	22a8      	movs	r2, #168	@ 0xa8
 800454c:	2100      	movs	r1, #0
 800454e:	4618      	mov	r0, r3
 8004550:	f007 fc6c 	bl	800be2c <memset>
	int result[3] = {0,0,0};
 8004554:	2300      	movs	r3, #0
 8004556:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004558:	2300      	movs	r3, #0
 800455a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800455c:	2300      	movs	r3, #0
 800455e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	int k = 0;
 8004562:	2300      	movs	r3, #0
 8004564:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	pressed->X_ = 0; pressed->Y_ = 0;
 8004568:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800456c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2200      	movs	r2, #0
 8004574:	701a      	strb	r2, [r3, #0]
 8004576:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800457a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2200      	movs	r2, #0
 8004582:	705a      	strb	r2, [r3, #1]
	for(int i=0; i< 14; i++){
 8004584:	2300      	movs	r3, #0
 8004586:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800458a:	e068      	b.n	800465e <read_pad+0x146>

		if(abs(x - map[i][0]) < ERROR_X){
 800458c:	49b9      	ldr	r1, [pc, #740]	@ (8004874 <read_pad+0x35c>)
 800458e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8004592:	4613      	mov	r3, r2
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	4413      	add	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80045a2:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	f113 0f31 	cmn.w	r3, #49	@ 0x31
 80045ae:	db51      	blt.n	8004654 <read_pad+0x13c>
 80045b0:	49b0      	ldr	r1, [pc, #704]	@ (8004874 <read_pad+0x35c>)
 80045b2:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80045b6:	4613      	mov	r3, r2
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	4413      	add	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	440b      	add	r3, r1
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80045c6:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80045ca:	6812      	ldr	r2, [r2, #0]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b31      	cmp	r3, #49	@ 0x31
 80045d0:	dc40      	bgt.n	8004654 <read_pad+0x13c>
			col[k][0] = map[i][0];
 80045d2:	49a8      	ldr	r1, [pc, #672]	@ (8004874 <read_pad+0x35c>)
 80045d4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80045d8:	4613      	mov	r3, r2
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	6819      	ldr	r1, [r3, #0]
 80045e4:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80045e8:	4613      	mov	r3, r2
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	4413      	add	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80045f4:	443b      	add	r3, r7
 80045f6:	3bb4      	subs	r3, #180	@ 0xb4
 80045f8:	6019      	str	r1, [r3, #0]
			col[k][1] = map[i][1];
 80045fa:	499e      	ldr	r1, [pc, #632]	@ (8004874 <read_pad+0x35c>)
 80045fc:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8004600:	4613      	mov	r3, r2
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	4413      	add	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	3304      	adds	r3, #4
 800460c:	6819      	ldr	r1, [r3, #0]
 800460e:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8004612:	4613      	mov	r3, r2
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800461e:	443b      	add	r3, r7
 8004620:	3bb0      	subs	r3, #176	@ 0xb0
 8004622:	6019      	str	r1, [r3, #0]
			col[k++][2] = map[i][2];
 8004624:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8004628:	1c53      	adds	r3, r2, #1
 800462a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800462e:	4891      	ldr	r0, [pc, #580]	@ (8004874 <read_pad+0x35c>)
 8004630:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8004634:	460b      	mov	r3, r1
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	440b      	add	r3, r1
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4403      	add	r3, r0
 800463e:	3308      	adds	r3, #8
 8004640:	6819      	ldr	r1, [r3, #0]
 8004642:	4613      	mov	r3, r2
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800464e:	443b      	add	r3, r7
 8004650:	3bac      	subs	r3, #172	@ 0xac
 8004652:	6019      	str	r1, [r3, #0]
	for(int i=0; i< 14; i++){
 8004654:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004658:	3301      	adds	r3, #1
 800465a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800465e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004662:	2b0d      	cmp	r3, #13
 8004664:	dd92      	ble.n	800458c <read_pad+0x74>
		}
	}

	for(int i=0; i < k; i++){
 8004666:	2300      	movs	r3, #0
 8004668:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800466c:	e0b2      	b.n	80047d4 <read_pad+0x2bc>
		char msg[50] = {0};
 800466e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004672:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	3304      	adds	r3, #4
 800467c:	222e      	movs	r2, #46	@ 0x2e
 800467e:	2100      	movs	r1, #0
 8004680:	4618      	mov	r0, r3
 8004682:	f007 fbd3 	bl	800be2c <memset>
		memset(msg, 0, strlen(msg));
 8004686:	f107 0310 	add.w	r3, r7, #16
 800468a:	4618      	mov	r0, r3
 800468c:	f7fb fdb8 	bl	8000200 <strlen>
 8004690:	4602      	mov	r2, r0
 8004692:	f107 0310 	add.w	r3, r7, #16
 8004696:	2100      	movs	r1, #0
 8004698:	4618      	mov	r0, r3
 800469a:	f007 fbc7 	bl	800be2c <memset>
		sprintf(msg, "->%X| %d |%d", col[i][2], col[i][0],col[i][1]);
 800469e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80046a2:	4613      	mov	r3, r2
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	4413      	add	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80046ae:	443b      	add	r3, r7
 80046b0:	3bac      	subs	r3, #172	@ 0xac
 80046b2:	6819      	ldr	r1, [r3, #0]
 80046b4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80046b8:	4613      	mov	r3, r2
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	4413      	add	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80046c4:	443b      	add	r3, r7
 80046c6:	3bb4      	subs	r3, #180	@ 0xb4
 80046c8:	681c      	ldr	r4, [r3, #0]
 80046ca:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80046ce:	4613      	mov	r3, r2
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	4413      	add	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80046da:	443b      	add	r3, r7
 80046dc:	3bb0      	subs	r3, #176	@ 0xb0
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f107 0010 	add.w	r0, r7, #16
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	4623      	mov	r3, r4
 80046e8:	460a      	mov	r2, r1
 80046ea:	4963      	ldr	r1, [pc, #396]	@ (8004878 <read_pad+0x360>)
 80046ec:	f007 fb7e 	bl	800bdec <siprintf>
		//printf_(frameBuffer, msg);
		if(abs(y - result[1]) > abs(y - col[i][1]) && (abs(y - col[i][1]) < ERROR_Y)){
 80046f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046f2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80046f6:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8004702:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8004706:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800470a:	4613      	mov	r3, r2
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	4413      	add	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8004716:	443b      	add	r3, r7
 8004718:	3bb0      	subs	r3, #176	@ 0xb0
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004720:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8004724:	6812      	ldr	r2, [r2, #0]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	bfb8      	it	lt
 800472c:	425b      	neglt	r3, r3
 800472e:	4299      	cmp	r1, r3
 8004730:	dd4b      	ble.n	80047ca <read_pad+0x2b2>
 8004732:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8004736:	4613      	mov	r3, r2
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	4413      	add	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8004742:	443b      	add	r3, r7
 8004744:	3bb0      	subs	r3, #176	@ 0xb0
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800474c:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8004750:	6812      	ldr	r2, [r2, #0]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	f113 0f1d 	cmn.w	r3, #29
 8004758:	db37      	blt.n	80047ca <read_pad+0x2b2>
 800475a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800475e:	4613      	mov	r3, r2
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	4413      	add	r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800476a:	443b      	add	r3, r7
 800476c:	3bb0      	subs	r3, #176	@ 0xb0
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8004774:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8004778:	6812      	ldr	r2, [r2, #0]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b1d      	cmp	r3, #29
 800477e:	dc24      	bgt.n	80047ca <read_pad+0x2b2>
			result[0] = col[i][0];
 8004780:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8004784:	4613      	mov	r3, r2
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	4413      	add	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8004790:	443b      	add	r3, r7
 8004792:	3bb4      	subs	r3, #180	@ 0xb4
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	67bb      	str	r3, [r7, #120]	@ 0x78
			result[1] = col[i][1];
 8004798:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800479c:	4613      	mov	r3, r2
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80047a8:	443b      	add	r3, r7
 80047aa:	3bb0      	subs	r3, #176	@ 0xb0
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
			result[2] = col[i][2];
 80047b0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80047b4:	4613      	mov	r3, r2
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	4413      	add	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80047c0:	443b      	add	r3, r7
 80047c2:	3bac      	subs	r3, #172	@ 0xac
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	for(int i=0; i < k; i++){
 80047ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80047ce:	3301      	adds	r3, #1
 80047d0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80047d4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80047d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80047dc:	429a      	cmp	r2, r3
 80047de:	f6ff af46 	blt.w	800466e <read_pad+0x156>
		}
	}

	pressed->X_ = (uint8_t)result[2] & 0x0F;
 80047e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	f003 030f 	and.w	r3, r3, #15
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80047f2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	701a      	strb	r2, [r3, #0]
	pressed->Y_ = (uint8_t)result[2] & 0xF0;
 80047fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	f023 030f 	bic.w	r3, r3, #15
 8004804:	b2da      	uxtb	r2, r3
 8004806:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800480a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	705a      	strb	r2, [r3, #1]
	char msg[50] = {0};
 8004812:	2300      	movs	r3, #0
 8004814:	647b      	str	r3, [r7, #68]	@ 0x44
 8004816:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800481a:	222e      	movs	r2, #46	@ 0x2e
 800481c:	2100      	movs	r1, #0
 800481e:	4618      	mov	r0, r3
 8004820:	f007 fb04 	bl	800be2c <memset>
	memset(msg, 0, strlen(msg));
 8004824:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004828:	4618      	mov	r0, r3
 800482a:	f7fb fce9 	bl	8000200 <strlen>
 800482e:	4602      	mov	r2, r0
 8004830:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004834:	2100      	movs	r1, #0
 8004836:	4618      	mov	r0, r3
 8004838:	f007 faf8 	bl	800be2c <memset>
	sprintf(msg, "%X| %X |%X", result[2], pressed->X_, pressed->Y_);
 800483c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004840:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004844:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	4619      	mov	r1, r3
 800484e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004852:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	785b      	ldrb	r3, [r3, #1]
 800485a:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	460b      	mov	r3, r1
 8004862:	4906      	ldr	r1, [pc, #24]	@ (800487c <read_pad+0x364>)
 8004864:	f007 fac2 	bl	800bdec <siprintf>
	//printf_(frameBuffer, msg);
}
 8004868:	bf00      	nop
 800486a:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800486e:	46bd      	mov	sp, r7
 8004870:	bd90      	pop	{r4, r7, pc}
 8004872:	bf00      	nop
 8004874:	20000058 	.word	0x20000058
 8004878:	0800cd88 	.word	0x0800cd88
 800487c:	0800cd98 	.word	0x0800cd98

08004880 <get_button>:


void get_button(Button *button, Pressed *pressed){
 8004880:	b590      	push	{r4, r7, lr}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
	memset(button->c, 0 , strlen(button->c));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f103 040c 	add.w	r4, r3, #12
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	330c      	adds	r3, #12
 8004894:	4618      	mov	r0, r3
 8004896:	f7fb fcb3 	bl	8000200 <strlen>
 800489a:	4603      	mov	r3, r0
 800489c:	461a      	mov	r2, r3
 800489e:	2100      	movs	r1, #0
 80048a0:	4620      	mov	r0, r4
 80048a2:	f007 fac3 	bl	800be2c <memset>
	uint8_t r = (pressed->X_ | pressed->Y_);
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	781a      	ldrb	r2, [r3, #0]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	785b      	ldrb	r3, [r3, #1]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	73fb      	strb	r3, [r7, #15]
	 * (8)   1    2   3
	 * (4)   4    5   6
	 * (2)   7    8   9
	 * (1)  clr   0   set
	 * */
	switch (r){
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
 80048b4:	2bb0      	cmp	r3, #176	@ 0xb0
 80048b6:	f000 80f0 	beq.w	8004a9a <get_button+0x21a>
 80048ba:	2bb0      	cmp	r3, #176	@ 0xb0
 80048bc:	f300 8100 	bgt.w	8004ac0 <get_button+0x240>
 80048c0:	2b44      	cmp	r3, #68	@ 0x44
 80048c2:	f300 80bb 	bgt.w	8004a3c <get_button+0x1bc>
 80048c6:	2b11      	cmp	r3, #17
 80048c8:	da48      	bge.n	800495c <get_button+0xdc>
 80048ca:	e0f9      	b.n	8004ac0 <get_button+0x240>
 80048cc:	3b81      	subs	r3, #129	@ 0x81
 80048ce:	2b1f      	cmp	r3, #31
 80048d0:	f200 80f6 	bhi.w	8004ac0 <get_button+0x240>
 80048d4:	a201      	add	r2, pc, #4	@ (adr r2, 80048dc <get_button+0x5c>)
 80048d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048da:	bf00      	nop
 80048dc:	08004a59 	.word	0x08004a59
 80048e0:	08004a51 	.word	0x08004a51
 80048e4:	08004ac1 	.word	0x08004ac1
 80048e8:	08004a49 	.word	0x08004a49
 80048ec:	08004ac1 	.word	0x08004ac1
 80048f0:	08004ac1 	.word	0x08004ac1
 80048f4:	08004ac1 	.word	0x08004ac1
 80048f8:	08004ac1 	.word	0x08004ac1
 80048fc:	08004ac1 	.word	0x08004ac1
 8004900:	08004ac1 	.word	0x08004ac1
 8004904:	08004ac1 	.word	0x08004ac1
 8004908:	08004ac1 	.word	0x08004ac1
 800490c:	08004ac1 	.word	0x08004ac1
 8004910:	08004ac1 	.word	0x08004ac1
 8004914:	08004ac1 	.word	0x08004ac1
 8004918:	08004ac1 	.word	0x08004ac1
 800491c:	08004ac1 	.word	0x08004ac1
 8004920:	08004ac1 	.word	0x08004ac1
 8004924:	08004ac1 	.word	0x08004ac1
 8004928:	08004ac1 	.word	0x08004ac1
 800492c:	08004ac1 	.word	0x08004ac1
 8004930:	08004ac1 	.word	0x08004ac1
 8004934:	08004ac1 	.word	0x08004ac1
 8004938:	08004ac1 	.word	0x08004ac1
 800493c:	08004ac1 	.word	0x08004ac1
 8004940:	08004ac1 	.word	0x08004ac1
 8004944:	08004ac1 	.word	0x08004ac1
 8004948:	08004ac1 	.word	0x08004ac1
 800494c:	08004ac1 	.word	0x08004ac1
 8004950:	08004ac1 	.word	0x08004ac1
 8004954:	08004ac1 	.word	0x08004ac1
 8004958:	08004a91 	.word	0x08004a91
 800495c:	3b11      	subs	r3, #17
 800495e:	2b33      	cmp	r3, #51	@ 0x33
 8004960:	f200 80ae 	bhi.w	8004ac0 <get_button+0x240>
 8004964:	a201      	add	r2, pc, #4	@ (adr r2, 800496c <get_button+0xec>)
 8004966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496a:	bf00      	nop
 800496c:	08004ab7 	.word	0x08004ab7
 8004970:	08004aaf 	.word	0x08004aaf
 8004974:	08004ac1 	.word	0x08004ac1
 8004978:	08004aa5 	.word	0x08004aa5
 800497c:	08004ac1 	.word	0x08004ac1
 8004980:	08004ac1 	.word	0x08004ac1
 8004984:	08004ac1 	.word	0x08004ac1
 8004988:	08004ac1 	.word	0x08004ac1
 800498c:	08004ac1 	.word	0x08004ac1
 8004990:	08004ac1 	.word	0x08004ac1
 8004994:	08004ac1 	.word	0x08004ac1
 8004998:	08004ac1 	.word	0x08004ac1
 800499c:	08004ac1 	.word	0x08004ac1
 80049a0:	08004ac1 	.word	0x08004ac1
 80049a4:	08004ac1 	.word	0x08004ac1
 80049a8:	08004ac1 	.word	0x08004ac1
 80049ac:	08004a89 	.word	0x08004a89
 80049b0:	08004a81 	.word	0x08004a81
 80049b4:	08004ac1 	.word	0x08004ac1
 80049b8:	08004a79 	.word	0x08004a79
 80049bc:	08004ac1 	.word	0x08004ac1
 80049c0:	08004ac1 	.word	0x08004ac1
 80049c4:	08004ac1 	.word	0x08004ac1
 80049c8:	08004ac1 	.word	0x08004ac1
 80049cc:	08004ac1 	.word	0x08004ac1
 80049d0:	08004ac1 	.word	0x08004ac1
 80049d4:	08004ac1 	.word	0x08004ac1
 80049d8:	08004ac1 	.word	0x08004ac1
 80049dc:	08004ac1 	.word	0x08004ac1
 80049e0:	08004ac1 	.word	0x08004ac1
 80049e4:	08004ac1 	.word	0x08004ac1
 80049e8:	08004ac1 	.word	0x08004ac1
 80049ec:	08004ac1 	.word	0x08004ac1
 80049f0:	08004ac1 	.word	0x08004ac1
 80049f4:	08004ac1 	.word	0x08004ac1
 80049f8:	08004ac1 	.word	0x08004ac1
 80049fc:	08004ac1 	.word	0x08004ac1
 8004a00:	08004ac1 	.word	0x08004ac1
 8004a04:	08004ac1 	.word	0x08004ac1
 8004a08:	08004ac1 	.word	0x08004ac1
 8004a0c:	08004ac1 	.word	0x08004ac1
 8004a10:	08004ac1 	.word	0x08004ac1
 8004a14:	08004ac1 	.word	0x08004ac1
 8004a18:	08004ac1 	.word	0x08004ac1
 8004a1c:	08004ac1 	.word	0x08004ac1
 8004a20:	08004ac1 	.word	0x08004ac1
 8004a24:	08004ac1 	.word	0x08004ac1
 8004a28:	08004ac1 	.word	0x08004ac1
 8004a2c:	08004a71 	.word	0x08004a71
 8004a30:	08004a69 	.word	0x08004a69
 8004a34:	08004ac1 	.word	0x08004ac1
 8004a38:	08004a61 	.word	0x08004a61
 8004a3c:	2ba0      	cmp	r3, #160	@ 0xa0
 8004a3e:	dc3f      	bgt.n	8004ac0 <get_button+0x240>
 8004a40:	2b81      	cmp	r3, #129	@ 0x81
 8004a42:	f6bf af43 	bge.w	80048cc <get_button+0x4c>
 8004a46:	e03b      	b.n	8004ac0 <get_button+0x240>
		case 0x84:
			button->value = 1; // <
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]
			break;
 8004a4e:	e03c      	b.n	8004aca <get_button+0x24a>
		case 0x82:
			button->value = 2; // >
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	601a      	str	r2, [r3, #0]
			break;
 8004a56:	e038      	b.n	8004aca <get_button+0x24a>
		case 0x81:
			button->value = 3; // Set
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2203      	movs	r2, #3
 8004a5c:	601a      	str	r2, [r3, #0]
			break;
 8004a5e:	e034      	b.n	8004aca <get_button+0x24a>
		case 0x44:
			button->value = 4; // Stop
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2204      	movs	r2, #4
 8004a64:	601a      	str	r2, [r3, #0]
			break;
 8004a66:	e030      	b.n	8004aca <get_button+0x24a>
		case 0x42:
			button->value = 5;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2205      	movs	r2, #5
 8004a6c:	601a      	str	r2, [r3, #0]
			break;
 8004a6e:	e02c      	b.n	8004aca <get_button+0x24a>
		case 0x41:
			button->value = 6;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2206      	movs	r2, #6
 8004a74:	601a      	str	r2, [r3, #0]
			break;
 8004a76:	e028      	b.n	8004aca <get_button+0x24a>
		case 0x24:
			button->value = 7;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2207      	movs	r2, #7
 8004a7c:	601a      	str	r2, [r3, #0]
			break;
 8004a7e:	e024      	b.n	8004aca <get_button+0x24a>
		case 0x22:
			button->value = 8;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2208      	movs	r2, #8
 8004a84:	601a      	str	r2, [r3, #0]
			break;
 8004a86:	e020      	b.n	8004aca <get_button+0x24a>
		case 0x21:
			button->value = 9;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2209      	movs	r2, #9
 8004a8c:	601a      	str	r2, [r3, #0]
			break;
 8004a8e:	e01c      	b.n	8004aca <get_button+0x24a>
		case 0xA0:
			button->value = -4;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f06f 0203 	mvn.w	r2, #3
 8004a96:	601a      	str	r2, [r3, #0]
			break;
 8004a98:	e017      	b.n	8004aca <get_button+0x24a>
		case 0xB0:
			button->value = -5;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f06f 0204 	mvn.w	r2, #4
 8004aa0:	601a      	str	r2, [r3, #0]
			break;
 8004aa2:	e012      	b.n	8004aca <get_button+0x24a>
		case 0x14:
			button->value = -2;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f06f 0201 	mvn.w	r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]
			break;
 8004aac:	e00d      	b.n	8004aca <get_button+0x24a>
		case 0x12:
			button->value = 0;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]
			break;
 8004ab4:	e009      	b.n	8004aca <get_button+0x24a>
		case 0x11:
			button->value = -3;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f06f 0202 	mvn.w	r2, #2
 8004abc:	601a      	str	r2, [r3, #0]
			break;
 8004abe:	e004      	b.n	8004aca <get_button+0x24a>
		default:
			button->value = -1;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac6:	601a      	str	r2, [r3, #0]
			break;
 8004ac8:	bf00      	nop
	}
}
 8004aca:	bf00      	nop
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd90      	pop	{r4, r7, pc}
 8004ad2:	bf00      	nop

08004ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8004b14 <HAL_Init+0x40>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a0d      	ldr	r2, [pc, #52]	@ (8004b14 <HAL_Init+0x40>)
 8004ade:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ae2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8004b14 <HAL_Init+0x40>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8004b14 <HAL_Init+0x40>)
 8004aea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004aee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004af0:	4b08      	ldr	r3, [pc, #32]	@ (8004b14 <HAL_Init+0x40>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a07      	ldr	r2, [pc, #28]	@ (8004b14 <HAL_Init+0x40>)
 8004af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004afa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004afc:	2003      	movs	r0, #3
 8004afe:	f000 fd0c 	bl	800551a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b02:	200f      	movs	r0, #15
 8004b04:	f7fd fe14 	bl	8002730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b08:	f7fd f950 	bl	8001dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40023c00 	.word	0x40023c00

08004b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b1c:	4b06      	ldr	r3, [pc, #24]	@ (8004b38 <HAL_IncTick+0x20>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	461a      	mov	r2, r3
 8004b22:	4b06      	ldr	r3, [pc, #24]	@ (8004b3c <HAL_IncTick+0x24>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4413      	add	r3, r2
 8004b28:	4a04      	ldr	r2, [pc, #16]	@ (8004b3c <HAL_IncTick+0x24>)
 8004b2a:	6013      	str	r3, [r2, #0]
}
 8004b2c:	bf00      	nop
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	20000104 	.word	0x20000104
 8004b3c:	200011a4 	.word	0x200011a4

08004b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  return uwTick;
 8004b44:	4b03      	ldr	r3, [pc, #12]	@ (8004b54 <HAL_GetTick+0x14>)
 8004b46:	681b      	ldr	r3, [r3, #0]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	200011a4 	.word	0x200011a4

08004b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b60:	f7ff ffee 	bl	8004b40 <HAL_GetTick>
 8004b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b70:	d005      	beq.n	8004b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b72:	4b0a      	ldr	r3, [pc, #40]	@ (8004b9c <HAL_Delay+0x44>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b7e:	bf00      	nop
 8004b80:	f7ff ffde 	bl	8004b40 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d8f7      	bhi.n	8004b80 <HAL_Delay+0x28>
  {
  }
}
 8004b90:	bf00      	nop
 8004b92:	bf00      	nop
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20000104 	.word	0x20000104

08004ba0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e033      	b.n	8004c1e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d109      	bne.n	8004bd2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7fd f920 	bl	8001e04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd6:	f003 0310 	and.w	r3, r3, #16
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d118      	bne.n	8004c10 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004be6:	f023 0302 	bic.w	r3, r3, #2
 8004bea:	f043 0202 	orr.w	r2, r3, #2
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 fae8 	bl	80051c8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c02:	f023 0303 	bic.w	r3, r3, #3
 8004c06:	f043 0201 	orr.w	r2, r3, #1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c0e:	e001      	b.n	8004c14 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d101      	bne.n	8004c42 <HAL_ADC_Start+0x1a>
 8004c3e:	2302      	movs	r3, #2
 8004c40:	e0b2      	b.n	8004da8 <HAL_ADC_Start+0x180>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d018      	beq.n	8004c8a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0201 	orr.w	r2, r2, #1
 8004c66:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004c68:	4b52      	ldr	r3, [pc, #328]	@ (8004db4 <HAL_ADC_Start+0x18c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a52      	ldr	r2, [pc, #328]	@ (8004db8 <HAL_ADC_Start+0x190>)
 8004c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c72:	0c9a      	lsrs	r2, r3, #18
 8004c74:	4613      	mov	r3, r2
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	4413      	add	r3, r2
 8004c7a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004c7c:	e002      	b.n	8004c84 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	3b01      	subs	r3, #1
 8004c82:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f9      	bne.n	8004c7e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d17a      	bne.n	8004d8e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004ca0:	f023 0301 	bic.w	r3, r3, #1
 8004ca4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cbe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004cc2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cd6:	d106      	bne.n	8004ce6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cdc:	f023 0206 	bic.w	r2, r3, #6
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	645a      	str	r2, [r3, #68]	@ 0x44
 8004ce4:	e002      	b.n	8004cec <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cf4:	4b31      	ldr	r3, [pc, #196]	@ (8004dbc <HAL_ADC_Start+0x194>)
 8004cf6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004d00:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f003 031f 	and.w	r3, r3, #31
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d12a      	bne.n	8004d64 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a2b      	ldr	r2, [pc, #172]	@ (8004dc0 <HAL_ADC_Start+0x198>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d015      	beq.n	8004d44 <HAL_ADC_Start+0x11c>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a29      	ldr	r2, [pc, #164]	@ (8004dc4 <HAL_ADC_Start+0x19c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d105      	bne.n	8004d2e <HAL_ADC_Start+0x106>
 8004d22:	4b26      	ldr	r3, [pc, #152]	@ (8004dbc <HAL_ADC_Start+0x194>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f003 031f 	and.w	r3, r3, #31
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a25      	ldr	r2, [pc, #148]	@ (8004dc8 <HAL_ADC_Start+0x1a0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d136      	bne.n	8004da6 <HAL_ADC_Start+0x17e>
 8004d38:	4b20      	ldr	r3, [pc, #128]	@ (8004dbc <HAL_ADC_Start+0x194>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f003 0310 	and.w	r3, r3, #16
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d130      	bne.n	8004da6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d129      	bne.n	8004da6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004d60:	609a      	str	r2, [r3, #8]
 8004d62:	e020      	b.n	8004da6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a15      	ldr	r2, [pc, #84]	@ (8004dc0 <HAL_ADC_Start+0x198>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d11b      	bne.n	8004da6 <HAL_ADC_Start+0x17e>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d114      	bne.n	8004da6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004d8a:	609a      	str	r2, [r3, #8]
 8004d8c:	e00b      	b.n	8004da6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d92:	f043 0210 	orr.w	r2, r3, #16
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9e:	f043 0201 	orr.w	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	20000030 	.word	0x20000030
 8004db8:	431bde83 	.word	0x431bde83
 8004dbc:	40012300 	.word	0x40012300
 8004dc0:	40012000 	.word	0x40012000
 8004dc4:	40012100 	.word	0x40012100
 8004dc8:	40012200 	.word	0x40012200

08004dcc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d101      	bne.n	8004de2 <HAL_ADC_Stop+0x16>
 8004dde:	2302      	movs	r3, #2
 8004de0:	e021      	b.n	8004e26 <HAL_ADC_Stop+0x5a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0201 	bic.w	r2, r2, #1
 8004df8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d109      	bne.n	8004e1c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004e10:	f023 0301 	bic.w	r3, r3, #1
 8004e14:	f043 0201 	orr.w	r2, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b084      	sub	sp, #16
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e4e:	d113      	bne.n	8004e78 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004e5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e5e:	d10b      	bne.n	8004e78 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e64:	f043 0220 	orr.w	r2, r3, #32
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e063      	b.n	8004f40 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e78:	f7ff fe62 	bl	8004b40 <HAL_GetTick>
 8004e7c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004e7e:	e021      	b.n	8004ec4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e86:	d01d      	beq.n	8004ec4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <HAL_ADC_PollForConversion+0x6c>
 8004e8e:	f7ff fe57 	bl	8004b40 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d212      	bcs.n	8004ec4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d00b      	beq.n	8004ec4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb0:	f043 0204 	orr.w	r2, r3, #4
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e03d      	b.n	8004f40 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d1d6      	bne.n	8004e80 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f06f 0212 	mvn.w	r2, #18
 8004eda:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d123      	bne.n	8004f3e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d11f      	bne.n	8004f3e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f04:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d006      	beq.n	8004f1a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d111      	bne.n	8004f3e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d105      	bne.n	8004f3e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f36:	f043 0201 	orr.w	r2, r3, #1
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
	...

08004f64 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_ADC_ConfigChannel+0x1c>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e113      	b.n	80051a8 <HAL_ADC_ConfigChannel+0x244>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b09      	cmp	r3, #9
 8004f8e:	d925      	bls.n	8004fdc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68d9      	ldr	r1, [r3, #12]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	4413      	add	r3, r2
 8004fa4:	3b1e      	subs	r3, #30
 8004fa6:	2207      	movs	r2, #7
 8004fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fac:	43da      	mvns	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	400a      	ands	r2, r1
 8004fb4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68d9      	ldr	r1, [r3, #12]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	4603      	mov	r3, r0
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	4403      	add	r3, r0
 8004fce:	3b1e      	subs	r3, #30
 8004fd0:	409a      	lsls	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	60da      	str	r2, [r3, #12]
 8004fda:	e022      	b.n	8005022 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6919      	ldr	r1, [r3, #16]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	461a      	mov	r2, r3
 8004fea:	4613      	mov	r3, r2
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	4413      	add	r3, r2
 8004ff0:	2207      	movs	r2, #7
 8004ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff6:	43da      	mvns	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	400a      	ands	r2, r1
 8004ffe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6919      	ldr	r1, [r3, #16]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	689a      	ldr	r2, [r3, #8]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	b29b      	uxth	r3, r3
 8005010:	4618      	mov	r0, r3
 8005012:	4603      	mov	r3, r0
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	4403      	add	r3, r0
 8005018:	409a      	lsls	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b06      	cmp	r3, #6
 8005028:	d824      	bhi.n	8005074 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	4613      	mov	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	3b05      	subs	r3, #5
 800503c:	221f      	movs	r2, #31
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	43da      	mvns	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	400a      	ands	r2, r1
 800504a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	b29b      	uxth	r3, r3
 8005058:	4618      	mov	r0, r3
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	4613      	mov	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	3b05      	subs	r3, #5
 8005066:	fa00 f203 	lsl.w	r2, r0, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	635a      	str	r2, [r3, #52]	@ 0x34
 8005072:	e04c      	b.n	800510e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2b0c      	cmp	r3, #12
 800507a:	d824      	bhi.n	80050c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	4613      	mov	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	3b23      	subs	r3, #35	@ 0x23
 800508e:	221f      	movs	r2, #31
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	43da      	mvns	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	400a      	ands	r2, r1
 800509c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	4618      	mov	r0, r3
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	4613      	mov	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	3b23      	subs	r3, #35	@ 0x23
 80050b8:	fa00 f203 	lsl.w	r2, r0, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80050c4:	e023      	b.n	800510e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	3b41      	subs	r3, #65	@ 0x41
 80050d8:	221f      	movs	r2, #31
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	43da      	mvns	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	400a      	ands	r2, r1
 80050e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	4618      	mov	r0, r3
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	4613      	mov	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	3b41      	subs	r3, #65	@ 0x41
 8005102:	fa00 f203 	lsl.w	r2, r0, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800510e:	4b29      	ldr	r3, [pc, #164]	@ (80051b4 <HAL_ADC_ConfigChannel+0x250>)
 8005110:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a28      	ldr	r2, [pc, #160]	@ (80051b8 <HAL_ADC_ConfigChannel+0x254>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d10f      	bne.n	800513c <HAL_ADC_ConfigChannel+0x1d8>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b12      	cmp	r3, #18
 8005122:	d10b      	bne.n	800513c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a1d      	ldr	r2, [pc, #116]	@ (80051b8 <HAL_ADC_ConfigChannel+0x254>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d12b      	bne.n	800519e <HAL_ADC_ConfigChannel+0x23a>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a1c      	ldr	r2, [pc, #112]	@ (80051bc <HAL_ADC_ConfigChannel+0x258>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d003      	beq.n	8005158 <HAL_ADC_ConfigChannel+0x1f4>
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b11      	cmp	r3, #17
 8005156:	d122      	bne.n	800519e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a11      	ldr	r2, [pc, #68]	@ (80051bc <HAL_ADC_ConfigChannel+0x258>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d111      	bne.n	800519e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800517a:	4b11      	ldr	r3, [pc, #68]	@ (80051c0 <HAL_ADC_ConfigChannel+0x25c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a11      	ldr	r2, [pc, #68]	@ (80051c4 <HAL_ADC_ConfigChannel+0x260>)
 8005180:	fba2 2303 	umull	r2, r3, r2, r3
 8005184:	0c9a      	lsrs	r2, r3, #18
 8005186:	4613      	mov	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005190:	e002      	b.n	8005198 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	3b01      	subs	r3, #1
 8005196:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1f9      	bne.n	8005192 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	40012300 	.word	0x40012300
 80051b8:	40012000 	.word	0x40012000
 80051bc:	10000012 	.word	0x10000012
 80051c0:	20000030 	.word	0x20000030
 80051c4:	431bde83 	.word	0x431bde83

080051c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051d0:	4b79      	ldr	r3, [pc, #484]	@ (80053b8 <ADC_Init+0x1f0>)
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	431a      	orrs	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6859      	ldr	r1, [r3, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	021a      	lsls	r2, r3, #8
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005220:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6859      	ldr	r1, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005242:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6899      	ldr	r1, [r3, #8]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525a:	4a58      	ldr	r2, [pc, #352]	@ (80053bc <ADC_Init+0x1f4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d022      	beq.n	80052a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689a      	ldr	r2, [r3, #8]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800526e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6899      	ldr	r1, [r3, #8]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005290:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6899      	ldr	r1, [r3, #8]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	609a      	str	r2, [r3, #8]
 80052a4:	e00f      	b.n	80052c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80052b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80052c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0202 	bic.w	r2, r2, #2
 80052d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6899      	ldr	r1, [r3, #8]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	7e1b      	ldrb	r3, [r3, #24]
 80052e0:	005a      	lsls	r2, r3, #1
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d01b      	beq.n	800532c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005302:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005312:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6859      	ldr	r1, [r3, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531e:	3b01      	subs	r3, #1
 8005320:	035a      	lsls	r2, r3, #13
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	605a      	str	r2, [r3, #4]
 800532a:	e007      	b.n	800533c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800533a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800534a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	3b01      	subs	r3, #1
 8005358:	051a      	lsls	r2, r3, #20
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005370:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6899      	ldr	r1, [r3, #8]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800537e:	025a      	lsls	r2, r3, #9
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005396:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6899      	ldr	r1, [r3, #8]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	029a      	lsls	r2, r3, #10
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	609a      	str	r2, [r3, #8]
}
 80053ac:	bf00      	nop
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	40012300 	.word	0x40012300
 80053bc:	0f000001 	.word	0x0f000001

080053c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005404 <__NVIC_SetPriorityGrouping+0x44>)
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80053dc:	4013      	ands	r3, r2
 80053de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80053ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053f2:	4a04      	ldr	r2, [pc, #16]	@ (8005404 <__NVIC_SetPriorityGrouping+0x44>)
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	60d3      	str	r3, [r2, #12]
}
 80053f8:	bf00      	nop
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	e000ed00 	.word	0xe000ed00

08005408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005408:	b480      	push	{r7}
 800540a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800540c:	4b04      	ldr	r3, [pc, #16]	@ (8005420 <__NVIC_GetPriorityGrouping+0x18>)
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	0a1b      	lsrs	r3, r3, #8
 8005412:	f003 0307 	and.w	r3, r3, #7
}
 8005416:	4618      	mov	r0, r3
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	e000ed00 	.word	0xe000ed00

08005424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	4603      	mov	r3, r0
 800542c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800542e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005432:	2b00      	cmp	r3, #0
 8005434:	db0b      	blt.n	800544e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005436:	79fb      	ldrb	r3, [r7, #7]
 8005438:	f003 021f 	and.w	r2, r3, #31
 800543c:	4907      	ldr	r1, [pc, #28]	@ (800545c <__NVIC_EnableIRQ+0x38>)
 800543e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005442:	095b      	lsrs	r3, r3, #5
 8005444:	2001      	movs	r0, #1
 8005446:	fa00 f202 	lsl.w	r2, r0, r2
 800544a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	e000e100 	.word	0xe000e100

08005460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	4603      	mov	r3, r0
 8005468:	6039      	str	r1, [r7, #0]
 800546a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800546c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005470:	2b00      	cmp	r3, #0
 8005472:	db0a      	blt.n	800548a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	b2da      	uxtb	r2, r3
 8005478:	490c      	ldr	r1, [pc, #48]	@ (80054ac <__NVIC_SetPriority+0x4c>)
 800547a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800547e:	0112      	lsls	r2, r2, #4
 8005480:	b2d2      	uxtb	r2, r2
 8005482:	440b      	add	r3, r1
 8005484:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005488:	e00a      	b.n	80054a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	b2da      	uxtb	r2, r3
 800548e:	4908      	ldr	r1, [pc, #32]	@ (80054b0 <__NVIC_SetPriority+0x50>)
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	3b04      	subs	r3, #4
 8005498:	0112      	lsls	r2, r2, #4
 800549a:	b2d2      	uxtb	r2, r2
 800549c:	440b      	add	r3, r1
 800549e:	761a      	strb	r2, [r3, #24]
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	e000e100 	.word	0xe000e100
 80054b0:	e000ed00 	.word	0xe000ed00

080054b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b089      	sub	sp, #36	@ 0x24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	f1c3 0307 	rsb	r3, r3, #7
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	bf28      	it	cs
 80054d2:	2304      	movcs	r3, #4
 80054d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	3304      	adds	r3, #4
 80054da:	2b06      	cmp	r3, #6
 80054dc:	d902      	bls.n	80054e4 <NVIC_EncodePriority+0x30>
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	3b03      	subs	r3, #3
 80054e2:	e000      	b.n	80054e6 <NVIC_EncodePriority+0x32>
 80054e4:	2300      	movs	r3, #0
 80054e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054e8:	f04f 32ff 	mov.w	r2, #4294967295
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	fa02 f303 	lsl.w	r3, r2, r3
 80054f2:	43da      	mvns	r2, r3
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	401a      	ands	r2, r3
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054fc:	f04f 31ff 	mov.w	r1, #4294967295
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	fa01 f303 	lsl.w	r3, r1, r3
 8005506:	43d9      	mvns	r1, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800550c:	4313      	orrs	r3, r2
         );
}
 800550e:	4618      	mov	r0, r3
 8005510:	3724      	adds	r7, #36	@ 0x24
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b082      	sub	sp, #8
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7ff ff4c 	bl	80053c0 <__NVIC_SetPriorityGrouping>
}
 8005528:	bf00      	nop
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	4603      	mov	r3, r0
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800553e:	2300      	movs	r3, #0
 8005540:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005542:	f7ff ff61 	bl	8005408 <__NVIC_GetPriorityGrouping>
 8005546:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	68b9      	ldr	r1, [r7, #8]
 800554c:	6978      	ldr	r0, [r7, #20]
 800554e:	f7ff ffb1 	bl	80054b4 <NVIC_EncodePriority>
 8005552:	4602      	mov	r2, r0
 8005554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005558:	4611      	mov	r1, r2
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff ff80 	bl	8005460 <__NVIC_SetPriority>
}
 8005560:	bf00      	nop
 8005562:	3718      	adds	r7, #24
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	4603      	mov	r3, r0
 8005570:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff ff54 	bl	8005424 <__NVIC_EnableIRQ>
}
 800557c:	bf00      	nop
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005590:	f7ff fad6 	bl	8004b40 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e099      	b.n	80056d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0201 	bic.w	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055c0:	e00f      	b.n	80055e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055c2:	f7ff fabd 	bl	8004b40 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b05      	cmp	r3, #5
 80055ce:	d908      	bls.n	80055e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2220      	movs	r2, #32
 80055d4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2203      	movs	r2, #3
 80055da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e078      	b.n	80056d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e8      	bne.n	80055c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	4b38      	ldr	r3, [pc, #224]	@ (80056dc <HAL_DMA_Init+0x158>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800560e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800561a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005626:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4313      	orrs	r3, r2
 8005632:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005638:	2b04      	cmp	r3, #4
 800563a:	d107      	bne.n	800564c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005644:	4313      	orrs	r3, r2
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f023 0307 	bic.w	r3, r3, #7
 8005662:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	4313      	orrs	r3, r2
 800566c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005672:	2b04      	cmp	r3, #4
 8005674:	d117      	bne.n	80056a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	4313      	orrs	r3, r2
 800567e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00e      	beq.n	80056a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f9e9 	bl	8005a60 <DMA_CheckFifoParam>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d008      	beq.n	80056a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2240      	movs	r2, #64	@ 0x40
 8005698:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80056a2:	2301      	movs	r3, #1
 80056a4:	e016      	b.n	80056d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f9a0 	bl	80059f4 <DMA_CalcBaseAndBitshift>
 80056b4:	4603      	mov	r3, r0
 80056b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056bc:	223f      	movs	r2, #63	@ 0x3f
 80056be:	409a      	lsls	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3718      	adds	r7, #24
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	f010803f 	.word	0xf010803f

080056e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80056ec:	4b8e      	ldr	r3, [pc, #568]	@ (8005928 <HAL_DMA_IRQHandler+0x248>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a8e      	ldr	r2, [pc, #568]	@ (800592c <HAL_DMA_IRQHandler+0x24c>)
 80056f2:	fba2 2303 	umull	r2, r3, r2, r3
 80056f6:	0a9b      	lsrs	r3, r3, #10
 80056f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800570a:	2208      	movs	r2, #8
 800570c:	409a      	lsls	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4013      	ands	r3, r2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d01a      	beq.n	800574c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b00      	cmp	r3, #0
 8005722:	d013      	beq.n	800574c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 0204 	bic.w	r2, r2, #4
 8005732:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005738:	2208      	movs	r2, #8
 800573a:	409a      	lsls	r2, r3
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005744:	f043 0201 	orr.w	r2, r3, #1
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005750:	2201      	movs	r2, #1
 8005752:	409a      	lsls	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	4013      	ands	r3, r2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d012      	beq.n	8005782 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00b      	beq.n	8005782 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800576e:	2201      	movs	r2, #1
 8005770:	409a      	lsls	r2, r3
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800577a:	f043 0202 	orr.w	r2, r3, #2
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005786:	2204      	movs	r2, #4
 8005788:	409a      	lsls	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4013      	ands	r3, r2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d012      	beq.n	80057b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00b      	beq.n	80057b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057a4:	2204      	movs	r2, #4
 80057a6:	409a      	lsls	r2, r3
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b0:	f043 0204 	orr.w	r2, r3, #4
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057bc:	2210      	movs	r2, #16
 80057be:	409a      	lsls	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4013      	ands	r3, r2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d043      	beq.n	8005850 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0308 	and.w	r3, r3, #8
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d03c      	beq.n	8005850 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057da:	2210      	movs	r2, #16
 80057dc:	409a      	lsls	r2, r3
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d018      	beq.n	8005822 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d108      	bne.n	8005810 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005802:	2b00      	cmp	r3, #0
 8005804:	d024      	beq.n	8005850 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	4798      	blx	r3
 800580e:	e01f      	b.n	8005850 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005814:	2b00      	cmp	r3, #0
 8005816:	d01b      	beq.n	8005850 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	4798      	blx	r3
 8005820:	e016      	b.n	8005850 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800582c:	2b00      	cmp	r3, #0
 800582e:	d107      	bne.n	8005840 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 0208 	bic.w	r2, r2, #8
 800583e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005854:	2220      	movs	r2, #32
 8005856:	409a      	lsls	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4013      	ands	r3, r2
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 808f 	beq.w	8005980 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0310 	and.w	r3, r3, #16
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 8087 	beq.w	8005980 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005876:	2220      	movs	r2, #32
 8005878:	409a      	lsls	r2, r3
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b05      	cmp	r3, #5
 8005888:	d136      	bne.n	80058f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0216 	bic.w	r2, r2, #22
 8005898:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695a      	ldr	r2, [r3, #20]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d103      	bne.n	80058ba <HAL_DMA_IRQHandler+0x1da>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d007      	beq.n	80058ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0208 	bic.w	r2, r2, #8
 80058c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ce:	223f      	movs	r2, #63	@ 0x3f
 80058d0:	409a      	lsls	r2, r3
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d07e      	beq.n	80059ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	4798      	blx	r3
        }
        return;
 80058f6:	e079      	b.n	80059ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d01d      	beq.n	8005942 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10d      	bne.n	8005930 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005918:	2b00      	cmp	r3, #0
 800591a:	d031      	beq.n	8005980 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	4798      	blx	r3
 8005924:	e02c      	b.n	8005980 <HAL_DMA_IRQHandler+0x2a0>
 8005926:	bf00      	nop
 8005928:	20000030 	.word	0x20000030
 800592c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005934:	2b00      	cmp	r3, #0
 8005936:	d023      	beq.n	8005980 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	4798      	blx	r3
 8005940:	e01e      	b.n	8005980 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10f      	bne.n	8005970 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0210 	bic.w	r2, r2, #16
 800595e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005974:	2b00      	cmp	r3, #0
 8005976:	d003      	beq.n	8005980 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005984:	2b00      	cmp	r3, #0
 8005986:	d032      	beq.n	80059ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d022      	beq.n	80059da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2205      	movs	r2, #5
 8005998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0201 	bic.w	r2, r2, #1
 80059aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	3301      	adds	r3, #1
 80059b0:	60bb      	str	r3, [r7, #8]
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d307      	bcc.n	80059c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1f2      	bne.n	80059ac <HAL_DMA_IRQHandler+0x2cc>
 80059c6:	e000      	b.n	80059ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80059c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d005      	beq.n	80059ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	4798      	blx	r3
 80059ea:	e000      	b.n	80059ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80059ec:	bf00      	nop
    }
  }
}
 80059ee:	3718      	adds	r7, #24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	3b10      	subs	r3, #16
 8005a04:	4a14      	ldr	r2, [pc, #80]	@ (8005a58 <DMA_CalcBaseAndBitshift+0x64>)
 8005a06:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0a:	091b      	lsrs	r3, r3, #4
 8005a0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005a0e:	4a13      	ldr	r2, [pc, #76]	@ (8005a5c <DMA_CalcBaseAndBitshift+0x68>)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4413      	add	r3, r2
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	461a      	mov	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d909      	bls.n	8005a36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005a2a:	f023 0303 	bic.w	r3, r3, #3
 8005a2e:	1d1a      	adds	r2, r3, #4
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	659a      	str	r2, [r3, #88]	@ 0x58
 8005a34:	e007      	b.n	8005a46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005a3e:	f023 0303 	bic.w	r3, r3, #3
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	aaaaaaab 	.word	0xaaaaaaab
 8005a5c:	0800f120 	.word	0x0800f120

08005a60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d11f      	bne.n	8005aba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d856      	bhi.n	8005b2e <DMA_CheckFifoParam+0xce>
 8005a80:	a201      	add	r2, pc, #4	@ (adr r2, 8005a88 <DMA_CheckFifoParam+0x28>)
 8005a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a86:	bf00      	nop
 8005a88:	08005a99 	.word	0x08005a99
 8005a8c:	08005aab 	.word	0x08005aab
 8005a90:	08005a99 	.word	0x08005a99
 8005a94:	08005b2f 	.word	0x08005b2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d046      	beq.n	8005b32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aa8:	e043      	b.n	8005b32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ab2:	d140      	bne.n	8005b36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ab8:	e03d      	b.n	8005b36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ac2:	d121      	bne.n	8005b08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2b03      	cmp	r3, #3
 8005ac8:	d837      	bhi.n	8005b3a <DMA_CheckFifoParam+0xda>
 8005aca:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad0 <DMA_CheckFifoParam+0x70>)
 8005acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad0:	08005ae1 	.word	0x08005ae1
 8005ad4:	08005ae7 	.word	0x08005ae7
 8005ad8:	08005ae1 	.word	0x08005ae1
 8005adc:	08005af9 	.word	0x08005af9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ae4:	e030      	b.n	8005b48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d025      	beq.n	8005b3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005af6:	e022      	b.n	8005b3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005b00:	d11f      	bne.n	8005b42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005b06:	e01c      	b.n	8005b42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d903      	bls.n	8005b16 <DMA_CheckFifoParam+0xb6>
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d003      	beq.n	8005b1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005b14:	e018      	b.n	8005b48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	73fb      	strb	r3, [r7, #15]
      break;
 8005b1a:	e015      	b.n	8005b48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00e      	beq.n	8005b46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b2c:	e00b      	b.n	8005b46 <DMA_CheckFifoParam+0xe6>
      break;
 8005b2e:	bf00      	nop
 8005b30:	e00a      	b.n	8005b48 <DMA_CheckFifoParam+0xe8>
      break;
 8005b32:	bf00      	nop
 8005b34:	e008      	b.n	8005b48 <DMA_CheckFifoParam+0xe8>
      break;
 8005b36:	bf00      	nop
 8005b38:	e006      	b.n	8005b48 <DMA_CheckFifoParam+0xe8>
      break;
 8005b3a:	bf00      	nop
 8005b3c:	e004      	b.n	8005b48 <DMA_CheckFifoParam+0xe8>
      break;
 8005b3e:	bf00      	nop
 8005b40:	e002      	b.n	8005b48 <DMA_CheckFifoParam+0xe8>
      break;   
 8005b42:	bf00      	nop
 8005b44:	e000      	b.n	8005b48 <DMA_CheckFifoParam+0xe8>
      break;
 8005b46:	bf00      	nop
    }
  } 
  
  return status; 
 8005b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop

08005b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b089      	sub	sp, #36	@ 0x24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b6e:	2300      	movs	r3, #0
 8005b70:	61fb      	str	r3, [r7, #28]
 8005b72:	e177      	b.n	8005e64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005b74:	2201      	movs	r2, #1
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	4013      	ands	r3, r2
 8005b86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	f040 8166 	bne.w	8005e5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d005      	beq.n	8005baa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d130      	bne.n	8005c0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	2203      	movs	r2, #3
 8005bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bba:	43db      	mvns	r3, r3
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	fa02 f303 	lsl.w	r3, r2, r3
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005be0:	2201      	movs	r2, #1
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	fa02 f303 	lsl.w	r3, r2, r3
 8005be8:	43db      	mvns	r3, r3
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	4013      	ands	r3, r2
 8005bee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	091b      	lsrs	r3, r3, #4
 8005bf6:	f003 0201 	and.w	r2, r3, #1
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f003 0303 	and.w	r3, r3, #3
 8005c14:	2b03      	cmp	r3, #3
 8005c16:	d017      	beq.n	8005c48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	2203      	movs	r2, #3
 8005c24:	fa02 f303 	lsl.w	r3, r2, r3
 8005c28:	43db      	mvns	r3, r3
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f003 0303 	and.w	r3, r3, #3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d123      	bne.n	8005c9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	08da      	lsrs	r2, r3, #3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3208      	adds	r2, #8
 8005c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	220f      	movs	r2, #15
 8005c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c70:	43db      	mvns	r3, r3
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	4013      	ands	r3, r2
 8005c76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	691a      	ldr	r2, [r3, #16]
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	f003 0307 	and.w	r3, r3, #7
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	fa02 f303 	lsl.w	r3, r2, r3
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	08da      	lsrs	r2, r3, #3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	3208      	adds	r2, #8
 8005c96:	69b9      	ldr	r1, [r7, #24]
 8005c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	2203      	movs	r2, #3
 8005ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cac:	43db      	mvns	r3, r3
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f003 0203 	and.w	r2, r3, #3
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 80c0 	beq.w	8005e5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	4b66      	ldr	r3, [pc, #408]	@ (8005e7c <HAL_GPIO_Init+0x324>)
 8005ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce6:	4a65      	ldr	r2, [pc, #404]	@ (8005e7c <HAL_GPIO_Init+0x324>)
 8005ce8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005cec:	6453      	str	r3, [r2, #68]	@ 0x44
 8005cee:	4b63      	ldr	r3, [pc, #396]	@ (8005e7c <HAL_GPIO_Init+0x324>)
 8005cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cfa:	4a61      	ldr	r2, [pc, #388]	@ (8005e80 <HAL_GPIO_Init+0x328>)
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	089b      	lsrs	r3, r3, #2
 8005d00:	3302      	adds	r3, #2
 8005d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	f003 0303 	and.w	r3, r3, #3
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	220f      	movs	r2, #15
 8005d12:	fa02 f303 	lsl.w	r3, r2, r3
 8005d16:	43db      	mvns	r3, r3
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a58      	ldr	r2, [pc, #352]	@ (8005e84 <HAL_GPIO_Init+0x32c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d037      	beq.n	8005d96 <HAL_GPIO_Init+0x23e>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a57      	ldr	r2, [pc, #348]	@ (8005e88 <HAL_GPIO_Init+0x330>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d031      	beq.n	8005d92 <HAL_GPIO_Init+0x23a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a56      	ldr	r2, [pc, #344]	@ (8005e8c <HAL_GPIO_Init+0x334>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d02b      	beq.n	8005d8e <HAL_GPIO_Init+0x236>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a55      	ldr	r2, [pc, #340]	@ (8005e90 <HAL_GPIO_Init+0x338>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d025      	beq.n	8005d8a <HAL_GPIO_Init+0x232>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a54      	ldr	r2, [pc, #336]	@ (8005e94 <HAL_GPIO_Init+0x33c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d01f      	beq.n	8005d86 <HAL_GPIO_Init+0x22e>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a53      	ldr	r2, [pc, #332]	@ (8005e98 <HAL_GPIO_Init+0x340>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d019      	beq.n	8005d82 <HAL_GPIO_Init+0x22a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a52      	ldr	r2, [pc, #328]	@ (8005e9c <HAL_GPIO_Init+0x344>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d013      	beq.n	8005d7e <HAL_GPIO_Init+0x226>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a51      	ldr	r2, [pc, #324]	@ (8005ea0 <HAL_GPIO_Init+0x348>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00d      	beq.n	8005d7a <HAL_GPIO_Init+0x222>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a50      	ldr	r2, [pc, #320]	@ (8005ea4 <HAL_GPIO_Init+0x34c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d007      	beq.n	8005d76 <HAL_GPIO_Init+0x21e>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a4f      	ldr	r2, [pc, #316]	@ (8005ea8 <HAL_GPIO_Init+0x350>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d101      	bne.n	8005d72 <HAL_GPIO_Init+0x21a>
 8005d6e:	2309      	movs	r3, #9
 8005d70:	e012      	b.n	8005d98 <HAL_GPIO_Init+0x240>
 8005d72:	230a      	movs	r3, #10
 8005d74:	e010      	b.n	8005d98 <HAL_GPIO_Init+0x240>
 8005d76:	2308      	movs	r3, #8
 8005d78:	e00e      	b.n	8005d98 <HAL_GPIO_Init+0x240>
 8005d7a:	2307      	movs	r3, #7
 8005d7c:	e00c      	b.n	8005d98 <HAL_GPIO_Init+0x240>
 8005d7e:	2306      	movs	r3, #6
 8005d80:	e00a      	b.n	8005d98 <HAL_GPIO_Init+0x240>
 8005d82:	2305      	movs	r3, #5
 8005d84:	e008      	b.n	8005d98 <HAL_GPIO_Init+0x240>
 8005d86:	2304      	movs	r3, #4
 8005d88:	e006      	b.n	8005d98 <HAL_GPIO_Init+0x240>
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e004      	b.n	8005d98 <HAL_GPIO_Init+0x240>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	e002      	b.n	8005d98 <HAL_GPIO_Init+0x240>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <HAL_GPIO_Init+0x240>
 8005d96:	2300      	movs	r3, #0
 8005d98:	69fa      	ldr	r2, [r7, #28]
 8005d9a:	f002 0203 	and.w	r2, r2, #3
 8005d9e:	0092      	lsls	r2, r2, #2
 8005da0:	4093      	lsls	r3, r2
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005da8:	4935      	ldr	r1, [pc, #212]	@ (8005e80 <HAL_GPIO_Init+0x328>)
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	089b      	lsrs	r3, r3, #2
 8005dae:	3302      	adds	r3, #2
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005db6:	4b3d      	ldr	r3, [pc, #244]	@ (8005eac <HAL_GPIO_Init+0x354>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	43db      	mvns	r3, r3
 8005dc0:	69ba      	ldr	r2, [r7, #24]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005dda:	4a34      	ldr	r2, [pc, #208]	@ (8005eac <HAL_GPIO_Init+0x354>)
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005de0:	4b32      	ldr	r3, [pc, #200]	@ (8005eac <HAL_GPIO_Init+0x354>)
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	43db      	mvns	r3, r3
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	4013      	ands	r3, r2
 8005dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e04:	4a29      	ldr	r2, [pc, #164]	@ (8005eac <HAL_GPIO_Init+0x354>)
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e0a:	4b28      	ldr	r3, [pc, #160]	@ (8005eac <HAL_GPIO_Init+0x354>)
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	43db      	mvns	r3, r3
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	4013      	ands	r3, r2
 8005e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8005eac <HAL_GPIO_Init+0x354>)
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e34:	4b1d      	ldr	r3, [pc, #116]	@ (8005eac <HAL_GPIO_Init+0x354>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	43db      	mvns	r3, r3
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	4013      	ands	r3, r2
 8005e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e58:	4a14      	ldr	r2, [pc, #80]	@ (8005eac <HAL_GPIO_Init+0x354>)
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	3301      	adds	r3, #1
 8005e62:	61fb      	str	r3, [r7, #28]
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	2b0f      	cmp	r3, #15
 8005e68:	f67f ae84 	bls.w	8005b74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005e6c:	bf00      	nop
 8005e6e:	bf00      	nop
 8005e70:	3724      	adds	r7, #36	@ 0x24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	40023800 	.word	0x40023800
 8005e80:	40013800 	.word	0x40013800
 8005e84:	40020000 	.word	0x40020000
 8005e88:	40020400 	.word	0x40020400
 8005e8c:	40020800 	.word	0x40020800
 8005e90:	40020c00 	.word	0x40020c00
 8005e94:	40021000 	.word	0x40021000
 8005e98:	40021400 	.word	0x40021400
 8005e9c:	40021800 	.word	0x40021800
 8005ea0:	40021c00 	.word	0x40021c00
 8005ea4:	40022000 	.word	0x40022000
 8005ea8:	40022400 	.word	0x40022400
 8005eac:	40013c00 	.word	0x40013c00

08005eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	807b      	strh	r3, [r7, #2]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ec0:	787b      	ldrb	r3, [r7, #1]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ec6:	887a      	ldrh	r2, [r7, #2]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ecc:	e003      	b.n	8005ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ece:	887b      	ldrh	r3, [r7, #2]
 8005ed0:	041a      	lsls	r2, r3, #16
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	619a      	str	r2, [r3, #24]
}
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
	...

08005ee4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e0bf      	b.n	8006076 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d106      	bne.n	8005f10 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7fc f80e 	bl	8001f2c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699a      	ldr	r2, [r3, #24]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005f26:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6999      	ldr	r1, [r3, #24]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f3c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6899      	ldr	r1, [r3, #8]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	4b4a      	ldr	r3, [pc, #296]	@ (8006080 <HAL_LTDC_Init+0x19c>)
 8005f58:	400b      	ands	r3, r1
 8005f5a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	041b      	lsls	r3, r3, #16
 8005f62:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6899      	ldr	r1, [r3, #8]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	699a      	ldr	r2, [r3, #24]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	431a      	orrs	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68d9      	ldr	r1, [r3, #12]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	4b3e      	ldr	r3, [pc, #248]	@ (8006080 <HAL_LTDC_Init+0x19c>)
 8005f86:	400b      	ands	r3, r1
 8005f88:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	041b      	lsls	r3, r3, #16
 8005f90:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68d9      	ldr	r1, [r3, #12]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a1a      	ldr	r2, [r3, #32]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6919      	ldr	r1, [r3, #16]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	4b33      	ldr	r3, [pc, #204]	@ (8006080 <HAL_LTDC_Init+0x19c>)
 8005fb4:	400b      	ands	r3, r1
 8005fb6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fbc:	041b      	lsls	r3, r3, #16
 8005fbe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6919      	ldr	r1, [r3, #16]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6959      	ldr	r1, [r3, #20]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	4b27      	ldr	r3, [pc, #156]	@ (8006080 <HAL_LTDC_Init+0x19c>)
 8005fe2:	400b      	ands	r3, r1
 8005fe4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fea:	041b      	lsls	r3, r3, #16
 8005fec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6959      	ldr	r1, [r3, #20]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800600a:	021b      	lsls	r3, r3, #8
 800600c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006014:	041b      	lsls	r3, r3, #16
 8006016:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006026:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4313      	orrs	r3, r2
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800603a:	431a      	orrs	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0206 	orr.w	r2, r2, #6
 8006052:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699a      	ldr	r2, [r3, #24]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f042 0201 	orr.w	r2, r2, #1
 8006062:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	f000f800 	.word	0xf000f800

08006084 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006092:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800609a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f003 0304 	and.w	r3, r3, #4
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d023      	beq.n	80060ee <HAL_LTDC_IRQHandler+0x6a>
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f003 0304 	and.w	r3, r3, #4
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d01e      	beq.n	80060ee <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0204 	bic.w	r2, r2, #4
 80060be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2204      	movs	r2, #4
 80060c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80060ce:	f043 0201 	orr.w	r2, r3, #1
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2204      	movs	r2, #4
 80060dc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f86f 	bl	80061cc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f003 0302 	and.w	r3, r3, #2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d023      	beq.n	8006140 <HAL_LTDC_IRQHandler+0xbc>
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d01e      	beq.n	8006140 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 0202 	bic.w	r2, r2, #2
 8006110:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2202      	movs	r2, #2
 8006118:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006120:	f043 0202 	orr.w	r2, r3, #2
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2204      	movs	r2, #4
 800612e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f846 	bl	80061cc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b00      	cmp	r3, #0
 8006148:	d01b      	beq.n	8006182 <HAL_LTDC_IRQHandler+0xfe>
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	d016      	beq.n	8006182 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 0201 	bic.w	r2, r2, #1
 8006162:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2201      	movs	r2, #1
 800616a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f82f 	bl	80061e0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f003 0308 	and.w	r3, r3, #8
 8006188:	2b00      	cmp	r3, #0
 800618a:	d01b      	beq.n	80061c4 <HAL_LTDC_IRQHandler+0x140>
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f003 0308 	and.w	r3, r3, #8
 8006192:	2b00      	cmp	r3, #0
 8006194:	d016      	beq.n	80061c4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0208 	bic.w	r2, r2, #8
 80061a4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2208      	movs	r2, #8
 80061ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f818 	bl	80061f4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80061c4:	bf00      	nop
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006208:	b5b0      	push	{r4, r5, r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800621a:	2b01      	cmp	r3, #1
 800621c:	d101      	bne.n	8006222 <HAL_LTDC_ConfigLayer+0x1a>
 800621e:	2302      	movs	r3, #2
 8006220:	e02c      	b.n	800627c <HAL_LTDC_ConfigLayer+0x74>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2202      	movs	r2, #2
 800622e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2134      	movs	r1, #52	@ 0x34
 8006238:	fb01 f303 	mul.w	r3, r1, r3
 800623c:	4413      	add	r3, r2
 800623e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	4614      	mov	r4, r2
 8006246:	461d      	mov	r5, r3
 8006248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800624a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800624c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800624e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	68b9      	ldr	r1, [r7, #8]
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 f811 	bl	8006284 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2201      	movs	r2, #1
 8006268:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bdb0      	pop	{r4, r5, r7, pc}

08006284 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006284:	b480      	push	{r7}
 8006286:	b089      	sub	sp, #36	@ 0x24
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	0c1b      	lsrs	r3, r3, #16
 800629c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062a0:	4413      	add	r3, r2
 80062a2:	041b      	lsls	r3, r3, #16
 80062a4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	01db      	lsls	r3, r3, #7
 80062b0:	4413      	add	r3, r2
 80062b2:	3384      	adds	r3, #132	@ 0x84
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	6812      	ldr	r2, [r2, #0]
 80062ba:	4611      	mov	r1, r2
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	01d2      	lsls	r2, r2, #7
 80062c0:	440a      	add	r2, r1
 80062c2:	3284      	adds	r2, #132	@ 0x84
 80062c4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80062c8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	0c1b      	lsrs	r3, r3, #16
 80062d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80062da:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80062dc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4619      	mov	r1, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	01db      	lsls	r3, r3, #7
 80062e8:	440b      	add	r3, r1
 80062ea:	3384      	adds	r3, #132	@ 0x84
 80062ec:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80062f2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006302:	4413      	add	r3, r2
 8006304:	041b      	lsls	r3, r3, #16
 8006306:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	461a      	mov	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	01db      	lsls	r3, r3, #7
 8006312:	4413      	add	r3, r2
 8006314:	3384      	adds	r3, #132	@ 0x84
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	6812      	ldr	r2, [r2, #0]
 800631c:	4611      	mov	r1, r2
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	01d2      	lsls	r2, r2, #7
 8006322:	440a      	add	r2, r1
 8006324:	3284      	adds	r2, #132	@ 0x84
 8006326:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800632a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800633a:	4413      	add	r3, r2
 800633c:	1c5a      	adds	r2, r3, #1
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4619      	mov	r1, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	01db      	lsls	r3, r3, #7
 8006348:	440b      	add	r3, r1
 800634a:	3384      	adds	r3, #132	@ 0x84
 800634c:	4619      	mov	r1, r3
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	4313      	orrs	r3, r2
 8006352:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	461a      	mov	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	01db      	lsls	r3, r3, #7
 800635e:	4413      	add	r3, r2
 8006360:	3384      	adds	r3, #132	@ 0x84
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	6812      	ldr	r2, [r2, #0]
 8006368:	4611      	mov	r1, r2
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	01d2      	lsls	r2, r2, #7
 800636e:	440a      	add	r2, r1
 8006370:	3284      	adds	r2, #132	@ 0x84
 8006372:	f023 0307 	bic.w	r3, r3, #7
 8006376:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	01db      	lsls	r3, r3, #7
 8006382:	4413      	add	r3, r2
 8006384:	3384      	adds	r3, #132	@ 0x84
 8006386:	461a      	mov	r2, r3
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006394:	021b      	lsls	r3, r3, #8
 8006396:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800639e:	041b      	lsls	r3, r3, #16
 80063a0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	061b      	lsls	r3, r3, #24
 80063a8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	01db      	lsls	r3, r3, #7
 80063b4:	4413      	add	r3, r2
 80063b6:	3384      	adds	r3, #132	@ 0x84
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	461a      	mov	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	01db      	lsls	r3, r3, #7
 80063c4:	4413      	add	r3, r2
 80063c6:	3384      	adds	r3, #132	@ 0x84
 80063c8:	461a      	mov	r2, r3
 80063ca:	2300      	movs	r3, #0
 80063cc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80063d4:	461a      	mov	r2, r3
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	431a      	orrs	r2, r3
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	431a      	orrs	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4619      	mov	r1, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	01db      	lsls	r3, r3, #7
 80063e8:	440b      	add	r3, r1
 80063ea:	3384      	adds	r3, #132	@ 0x84
 80063ec:	4619      	mov	r1, r3
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	461a      	mov	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	01db      	lsls	r3, r3, #7
 80063fe:	4413      	add	r3, r2
 8006400:	3384      	adds	r3, #132	@ 0x84
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	6812      	ldr	r2, [r2, #0]
 8006408:	4611      	mov	r1, r2
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	01d2      	lsls	r2, r2, #7
 800640e:	440a      	add	r2, r1
 8006410:	3284      	adds	r2, #132	@ 0x84
 8006412:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006416:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	461a      	mov	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	01db      	lsls	r3, r3, #7
 8006422:	4413      	add	r3, r2
 8006424:	3384      	adds	r3, #132	@ 0x84
 8006426:	461a      	mov	r2, r3
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	461a      	mov	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	01db      	lsls	r3, r3, #7
 8006438:	4413      	add	r3, r2
 800643a:	3384      	adds	r3, #132	@ 0x84
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	6812      	ldr	r2, [r2, #0]
 8006442:	4611      	mov	r1, r2
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	01d2      	lsls	r2, r2, #7
 8006448:	440a      	add	r2, r1
 800644a:	3284      	adds	r2, #132	@ 0x84
 800644c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006450:	f023 0307 	bic.w	r3, r3, #7
 8006454:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	69da      	ldr	r2, [r3, #28]
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	68f9      	ldr	r1, [r7, #12]
 8006460:	6809      	ldr	r1, [r1, #0]
 8006462:	4608      	mov	r0, r1
 8006464:	6879      	ldr	r1, [r7, #4]
 8006466:	01c9      	lsls	r1, r1, #7
 8006468:	4401      	add	r1, r0
 800646a:	3184      	adds	r1, #132	@ 0x84
 800646c:	4313      	orrs	r3, r2
 800646e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	461a      	mov	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	01db      	lsls	r3, r3, #7
 800647a:	4413      	add	r3, r2
 800647c:	3384      	adds	r3, #132	@ 0x84
 800647e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	461a      	mov	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	01db      	lsls	r3, r3, #7
 800648a:	4413      	add	r3, r2
 800648c:	3384      	adds	r3, #132	@ 0x84
 800648e:	461a      	mov	r2, r3
 8006490:	2300      	movs	r3, #0
 8006492:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	461a      	mov	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	01db      	lsls	r3, r3, #7
 800649e:	4413      	add	r3, r2
 80064a0:	3384      	adds	r3, #132	@ 0x84
 80064a2:	461a      	mov	r2, r3
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d102      	bne.n	80064b8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80064b2:	2304      	movs	r3, #4
 80064b4:	61fb      	str	r3, [r7, #28]
 80064b6:	e01b      	b.n	80064f0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d102      	bne.n	80064c6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80064c0:	2303      	movs	r3, #3
 80064c2:	61fb      	str	r3, [r7, #28]
 80064c4:	e014      	b.n	80064f0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	d00b      	beq.n	80064e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d007      	beq.n	80064e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80064da:	2b03      	cmp	r3, #3
 80064dc:	d003      	beq.n	80064e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80064e2:	2b07      	cmp	r3, #7
 80064e4:	d102      	bne.n	80064ec <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80064e6:	2302      	movs	r3, #2
 80064e8:	61fb      	str	r3, [r7, #28]
 80064ea:	e001      	b.n	80064f0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80064ec:	2301      	movs	r3, #1
 80064ee:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	461a      	mov	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	01db      	lsls	r3, r3, #7
 80064fa:	4413      	add	r3, r2
 80064fc:	3384      	adds	r3, #132	@ 0x84
 80064fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	6812      	ldr	r2, [r2, #0]
 8006504:	4611      	mov	r1, r2
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	01d2      	lsls	r2, r2, #7
 800650a:	440a      	add	r2, r1
 800650c:	3284      	adds	r2, #132	@ 0x84
 800650e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006512:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006518:	69fa      	ldr	r2, [r7, #28]
 800651a:	fb02 f303 	mul.w	r3, r2, r3
 800651e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	6859      	ldr	r1, [r3, #4]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	1acb      	subs	r3, r1, r3
 800652a:	69f9      	ldr	r1, [r7, #28]
 800652c:	fb01 f303 	mul.w	r3, r1, r3
 8006530:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006532:	68f9      	ldr	r1, [r7, #12]
 8006534:	6809      	ldr	r1, [r1, #0]
 8006536:	4608      	mov	r0, r1
 8006538:	6879      	ldr	r1, [r7, #4]
 800653a:	01c9      	lsls	r1, r1, #7
 800653c:	4401      	add	r1, r0
 800653e:	3184      	adds	r1, #132	@ 0x84
 8006540:	4313      	orrs	r3, r2
 8006542:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	461a      	mov	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	01db      	lsls	r3, r3, #7
 800654e:	4413      	add	r3, r2
 8006550:	3384      	adds	r3, #132	@ 0x84
 8006552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	6812      	ldr	r2, [r2, #0]
 8006558:	4611      	mov	r1, r2
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	01d2      	lsls	r2, r2, #7
 800655e:	440a      	add	r2, r1
 8006560:	3284      	adds	r2, #132	@ 0x84
 8006562:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006566:	f023 0307 	bic.w	r3, r3, #7
 800656a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	461a      	mov	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	01db      	lsls	r3, r3, #7
 8006576:	4413      	add	r3, r2
 8006578:	3384      	adds	r3, #132	@ 0x84
 800657a:	461a      	mov	r2, r3
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006580:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	461a      	mov	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	01db      	lsls	r3, r3, #7
 800658c:	4413      	add	r3, r2
 800658e:	3384      	adds	r3, #132	@ 0x84
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	6812      	ldr	r2, [r2, #0]
 8006596:	4611      	mov	r1, r2
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	01d2      	lsls	r2, r2, #7
 800659c:	440a      	add	r2, r1
 800659e:	3284      	adds	r2, #132	@ 0x84
 80065a0:	f043 0301 	orr.w	r3, r3, #1
 80065a4:	6013      	str	r3, [r2, #0]
}
 80065a6:	bf00      	nop
 80065a8:	3724      	adds	r7, #36	@ 0x24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
	...

080065b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80065be:	2300      	movs	r3, #0
 80065c0:	603b      	str	r3, [r7, #0]
 80065c2:	4b20      	ldr	r3, [pc, #128]	@ (8006644 <HAL_PWREx_EnableOverDrive+0x90>)
 80065c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006644 <HAL_PWREx_EnableOverDrive+0x90>)
 80065c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80065ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006644 <HAL_PWREx_EnableOverDrive+0x90>)
 80065d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065d6:	603b      	str	r3, [r7, #0]
 80065d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80065da:	4b1b      	ldr	r3, [pc, #108]	@ (8006648 <HAL_PWREx_EnableOverDrive+0x94>)
 80065dc:	2201      	movs	r2, #1
 80065de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065e0:	f7fe faae 	bl	8004b40 <HAL_GetTick>
 80065e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80065e6:	e009      	b.n	80065fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80065e8:	f7fe faaa 	bl	8004b40 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80065f6:	d901      	bls.n	80065fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e01f      	b.n	800663c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80065fc:	4b13      	ldr	r3, [pc, #76]	@ (800664c <HAL_PWREx_EnableOverDrive+0x98>)
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006608:	d1ee      	bne.n	80065e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800660a:	4b11      	ldr	r3, [pc, #68]	@ (8006650 <HAL_PWREx_EnableOverDrive+0x9c>)
 800660c:	2201      	movs	r2, #1
 800660e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006610:	f7fe fa96 	bl	8004b40 <HAL_GetTick>
 8006614:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006616:	e009      	b.n	800662c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006618:	f7fe fa92 	bl	8004b40 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006626:	d901      	bls.n	800662c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e007      	b.n	800663c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800662c:	4b07      	ldr	r3, [pc, #28]	@ (800664c <HAL_PWREx_EnableOverDrive+0x98>)
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006634:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006638:	d1ee      	bne.n	8006618 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	40023800 	.word	0x40023800
 8006648:	420e0040 	.word	0x420e0040
 800664c:	40007000 	.word	0x40007000
 8006650:	420e0044 	.word	0x420e0044

08006654 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af02      	add	r7, sp, #8
 800665a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800665c:	f7fe fa70 	bl	8004b40 <HAL_GetTick>
 8006660:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e069      	b.n	8006740 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10b      	bne.n	8006690 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7fb fdd3 	bl	800222c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006686:	f241 3188 	movw	r1, #5000	@ 0x1388
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f85e 	bl	800674c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	3b01      	subs	r3, #1
 80066a0:	021a      	lsls	r2, r3, #8
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	2120      	movs	r1, #32
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f856 	bl	8006768 <QSPI_WaitFlagStateUntilTimeout>
 80066bc:	4603      	mov	r3, r0
 80066be:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80066c0:	7afb      	ldrb	r3, [r7, #11]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d137      	bne.n	8006736 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80066d0:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	6852      	ldr	r2, [r2, #4]
 80066d8:	0611      	lsls	r1, r2, #24
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	68d2      	ldr	r2, [r2, #12]
 80066de:	4311      	orrs	r1, r2
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	69d2      	ldr	r2, [r2, #28]
 80066e4:	4311      	orrs	r1, r2
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6a12      	ldr	r2, [r2, #32]
 80066ea:	4311      	orrs	r1, r2
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6812      	ldr	r2, [r2, #0]
 80066f0:	430b      	orrs	r3, r1
 80066f2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685a      	ldr	r2, [r3, #4]
 80066fa:	4b13      	ldr	r3, [pc, #76]	@ (8006748 <HAL_QSPI_Init+0xf4>)
 80066fc:	4013      	ands	r3, r2
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6912      	ldr	r2, [r2, #16]
 8006702:	0411      	lsls	r1, r2, #16
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	6952      	ldr	r2, [r2, #20]
 8006708:	4311      	orrs	r1, r2
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	6992      	ldr	r2, [r2, #24]
 800670e:	4311      	orrs	r1, r2
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6812      	ldr	r2, [r2, #0]
 8006714:	430b      	orrs	r3, r1
 8006716:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f042 0201 	orr.w	r2, r2, #1
 8006726:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800673e:	7afb      	ldrb	r3, [r7, #11]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	ffe0f8fe 	.word	0xffe0f8fe

0800674c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	683a      	ldr	r2, [r7, #0]
 800675a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	603b      	str	r3, [r7, #0]
 8006774:	4613      	mov	r3, r2
 8006776:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006778:	e01a      	b.n	80067b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006780:	d016      	beq.n	80067b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006782:	f7fe f9dd 	bl	8004b40 <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	429a      	cmp	r2, r3
 8006790:	d302      	bcc.n	8006798 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10b      	bne.n	80067b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2204      	movs	r2, #4
 800679c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a4:	f043 0201 	orr.w	r2, r3, #1
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e00e      	b.n	80067ce <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689a      	ldr	r2, [r3, #8]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	4013      	ands	r3, r2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	bf14      	ite	ne
 80067be:	2301      	movne	r3, #1
 80067c0:	2300      	moveq	r3, #0
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	461a      	mov	r2, r3
 80067c6:	79fb      	ldrb	r3, [r7, #7]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d1d6      	bne.n	800677a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
	...

080067d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e0cc      	b.n	8006986 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067ec:	4b68      	ldr	r3, [pc, #416]	@ (8006990 <HAL_RCC_ClockConfig+0x1b8>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 030f 	and.w	r3, r3, #15
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d90c      	bls.n	8006814 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067fa:	4b65      	ldr	r3, [pc, #404]	@ (8006990 <HAL_RCC_ClockConfig+0x1b8>)
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	b2d2      	uxtb	r2, r2
 8006800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006802:	4b63      	ldr	r3, [pc, #396]	@ (8006990 <HAL_RCC_ClockConfig+0x1b8>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 030f 	and.w	r3, r3, #15
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	429a      	cmp	r2, r3
 800680e:	d001      	beq.n	8006814 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e0b8      	b.n	8006986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d020      	beq.n	8006862 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0304 	and.w	r3, r3, #4
 8006828:	2b00      	cmp	r3, #0
 800682a:	d005      	beq.n	8006838 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800682c:	4b59      	ldr	r3, [pc, #356]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	4a58      	ldr	r2, [pc, #352]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 8006832:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006836:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0308 	and.w	r3, r3, #8
 8006840:	2b00      	cmp	r3, #0
 8006842:	d005      	beq.n	8006850 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006844:	4b53      	ldr	r3, [pc, #332]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	4a52      	ldr	r2, [pc, #328]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 800684a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800684e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006850:	4b50      	ldr	r3, [pc, #320]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	494d      	ldr	r1, [pc, #308]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 800685e:	4313      	orrs	r3, r2
 8006860:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b00      	cmp	r3, #0
 800686c:	d044      	beq.n	80068f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d107      	bne.n	8006886 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006876:	4b47      	ldr	r3, [pc, #284]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d119      	bne.n	80068b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e07f      	b.n	8006986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	2b02      	cmp	r3, #2
 800688c:	d003      	beq.n	8006896 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006892:	2b03      	cmp	r3, #3
 8006894:	d107      	bne.n	80068a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006896:	4b3f      	ldr	r3, [pc, #252]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d109      	bne.n	80068b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e06f      	b.n	8006986 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068a6:	4b3b      	ldr	r3, [pc, #236]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e067      	b.n	8006986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068b6:	4b37      	ldr	r3, [pc, #220]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f023 0203 	bic.w	r2, r3, #3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	4934      	ldr	r1, [pc, #208]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068c8:	f7fe f93a 	bl	8004b40 <HAL_GetTick>
 80068cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068ce:	e00a      	b.n	80068e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068d0:	f7fe f936 	bl	8004b40 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068de:	4293      	cmp	r3, r2
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e04f      	b.n	8006986 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068e6:	4b2b      	ldr	r3, [pc, #172]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f003 020c 	and.w	r2, r3, #12
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d1eb      	bne.n	80068d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068f8:	4b25      	ldr	r3, [pc, #148]	@ (8006990 <HAL_RCC_ClockConfig+0x1b8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 030f 	and.w	r3, r3, #15
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	429a      	cmp	r2, r3
 8006904:	d20c      	bcs.n	8006920 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006906:	4b22      	ldr	r3, [pc, #136]	@ (8006990 <HAL_RCC_ClockConfig+0x1b8>)
 8006908:	683a      	ldr	r2, [r7, #0]
 800690a:	b2d2      	uxtb	r2, r2
 800690c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800690e:	4b20      	ldr	r3, [pc, #128]	@ (8006990 <HAL_RCC_ClockConfig+0x1b8>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 030f 	and.w	r3, r3, #15
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	429a      	cmp	r2, r3
 800691a:	d001      	beq.n	8006920 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e032      	b.n	8006986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b00      	cmp	r3, #0
 800692a:	d008      	beq.n	800693e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800692c:	4b19      	ldr	r3, [pc, #100]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	4916      	ldr	r1, [pc, #88]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 800693a:	4313      	orrs	r3, r2
 800693c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0308 	and.w	r3, r3, #8
 8006946:	2b00      	cmp	r3, #0
 8006948:	d009      	beq.n	800695e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800694a:	4b12      	ldr	r3, [pc, #72]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	490e      	ldr	r1, [pc, #56]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 800695a:	4313      	orrs	r3, r2
 800695c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800695e:	f000 f821 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 8006962:	4602      	mov	r2, r0
 8006964:	4b0b      	ldr	r3, [pc, #44]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	091b      	lsrs	r3, r3, #4
 800696a:	f003 030f 	and.w	r3, r3, #15
 800696e:	490a      	ldr	r1, [pc, #40]	@ (8006998 <HAL_RCC_ClockConfig+0x1c0>)
 8006970:	5ccb      	ldrb	r3, [r1, r3]
 8006972:	fa22 f303 	lsr.w	r3, r2, r3
 8006976:	4a09      	ldr	r2, [pc, #36]	@ (800699c <HAL_RCC_ClockConfig+0x1c4>)
 8006978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800697a:	4b09      	ldr	r3, [pc, #36]	@ (80069a0 <HAL_RCC_ClockConfig+0x1c8>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4618      	mov	r0, r3
 8006980:	f7fb fed6 	bl	8002730 <HAL_InitTick>

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	40023c00 	.word	0x40023c00
 8006994:	40023800 	.word	0x40023800
 8006998:	0800cf40 	.word	0x0800cf40
 800699c:	20000030 	.word	0x20000030
 80069a0:	20000100 	.word	0x20000100

080069a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069a8:	b090      	sub	sp, #64	@ 0x40
 80069aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80069b4:	2300      	movs	r3, #0
 80069b6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069bc:	4b59      	ldr	r3, [pc, #356]	@ (8006b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f003 030c 	and.w	r3, r3, #12
 80069c4:	2b08      	cmp	r3, #8
 80069c6:	d00d      	beq.n	80069e4 <HAL_RCC_GetSysClockFreq+0x40>
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	f200 80a1 	bhi.w	8006b10 <HAL_RCC_GetSysClockFreq+0x16c>
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <HAL_RCC_GetSysClockFreq+0x34>
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	d003      	beq.n	80069de <HAL_RCC_GetSysClockFreq+0x3a>
 80069d6:	e09b      	b.n	8006b10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069d8:	4b53      	ldr	r3, [pc, #332]	@ (8006b28 <HAL_RCC_GetSysClockFreq+0x184>)
 80069da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80069dc:	e09b      	b.n	8006b16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069de:	4b53      	ldr	r3, [pc, #332]	@ (8006b2c <HAL_RCC_GetSysClockFreq+0x188>)
 80069e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80069e2:	e098      	b.n	8006b16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069e4:	4b4f      	ldr	r3, [pc, #316]	@ (8006b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069ee:	4b4d      	ldr	r3, [pc, #308]	@ (8006b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d028      	beq.n	8006a4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069fa:	4b4a      	ldr	r3, [pc, #296]	@ (8006b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	099b      	lsrs	r3, r3, #6
 8006a00:	2200      	movs	r2, #0
 8006a02:	623b      	str	r3, [r7, #32]
 8006a04:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a06:	6a3b      	ldr	r3, [r7, #32]
 8006a08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	4b47      	ldr	r3, [pc, #284]	@ (8006b2c <HAL_RCC_GetSysClockFreq+0x188>)
 8006a10:	fb03 f201 	mul.w	r2, r3, r1
 8006a14:	2300      	movs	r3, #0
 8006a16:	fb00 f303 	mul.w	r3, r0, r3
 8006a1a:	4413      	add	r3, r2
 8006a1c:	4a43      	ldr	r2, [pc, #268]	@ (8006b2c <HAL_RCC_GetSysClockFreq+0x188>)
 8006a1e:	fba0 1202 	umull	r1, r2, r0, r2
 8006a22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a24:	460a      	mov	r2, r1
 8006a26:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006a28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a2a:	4413      	add	r3, r2
 8006a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a30:	2200      	movs	r2, #0
 8006a32:	61bb      	str	r3, [r7, #24]
 8006a34:	61fa      	str	r2, [r7, #28]
 8006a36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006a3e:	f7fa f8cb 	bl	8000bd8 <__aeabi_uldivmod>
 8006a42:	4602      	mov	r2, r0
 8006a44:	460b      	mov	r3, r1
 8006a46:	4613      	mov	r3, r2
 8006a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a4a:	e053      	b.n	8006af4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a4c:	4b35      	ldr	r3, [pc, #212]	@ (8006b24 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	099b      	lsrs	r3, r3, #6
 8006a52:	2200      	movs	r2, #0
 8006a54:	613b      	str	r3, [r7, #16]
 8006a56:	617a      	str	r2, [r7, #20]
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006a5e:	f04f 0b00 	mov.w	fp, #0
 8006a62:	4652      	mov	r2, sl
 8006a64:	465b      	mov	r3, fp
 8006a66:	f04f 0000 	mov.w	r0, #0
 8006a6a:	f04f 0100 	mov.w	r1, #0
 8006a6e:	0159      	lsls	r1, r3, #5
 8006a70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a74:	0150      	lsls	r0, r2, #5
 8006a76:	4602      	mov	r2, r0
 8006a78:	460b      	mov	r3, r1
 8006a7a:	ebb2 080a 	subs.w	r8, r2, sl
 8006a7e:	eb63 090b 	sbc.w	r9, r3, fp
 8006a82:	f04f 0200 	mov.w	r2, #0
 8006a86:	f04f 0300 	mov.w	r3, #0
 8006a8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006a8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006a92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006a96:	ebb2 0408 	subs.w	r4, r2, r8
 8006a9a:	eb63 0509 	sbc.w	r5, r3, r9
 8006a9e:	f04f 0200 	mov.w	r2, #0
 8006aa2:	f04f 0300 	mov.w	r3, #0
 8006aa6:	00eb      	lsls	r3, r5, #3
 8006aa8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006aac:	00e2      	lsls	r2, r4, #3
 8006aae:	4614      	mov	r4, r2
 8006ab0:	461d      	mov	r5, r3
 8006ab2:	eb14 030a 	adds.w	r3, r4, sl
 8006ab6:	603b      	str	r3, [r7, #0]
 8006ab8:	eb45 030b 	adc.w	r3, r5, fp
 8006abc:	607b      	str	r3, [r7, #4]
 8006abe:	f04f 0200 	mov.w	r2, #0
 8006ac2:	f04f 0300 	mov.w	r3, #0
 8006ac6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006aca:	4629      	mov	r1, r5
 8006acc:	028b      	lsls	r3, r1, #10
 8006ace:	4621      	mov	r1, r4
 8006ad0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ad4:	4621      	mov	r1, r4
 8006ad6:	028a      	lsls	r2, r1, #10
 8006ad8:	4610      	mov	r0, r2
 8006ada:	4619      	mov	r1, r3
 8006adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ade:	2200      	movs	r2, #0
 8006ae0:	60bb      	str	r3, [r7, #8]
 8006ae2:	60fa      	str	r2, [r7, #12]
 8006ae4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ae8:	f7fa f876 	bl	8000bd8 <__aeabi_uldivmod>
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	4613      	mov	r3, r2
 8006af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006af4:	4b0b      	ldr	r3, [pc, #44]	@ (8006b24 <HAL_RCC_GetSysClockFreq+0x180>)
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	0c1b      	lsrs	r3, r3, #16
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	3301      	adds	r3, #1
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006b04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006b0e:	e002      	b.n	8006b16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b10:	4b05      	ldr	r3, [pc, #20]	@ (8006b28 <HAL_RCC_GetSysClockFreq+0x184>)
 8006b12:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3740      	adds	r7, #64	@ 0x40
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b22:	bf00      	nop
 8006b24:	40023800 	.word	0x40023800
 8006b28:	00f42400 	.word	0x00f42400
 8006b2c:	017d7840 	.word	0x017d7840

08006b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b30:	b480      	push	{r7}
 8006b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b34:	4b03      	ldr	r3, [pc, #12]	@ (8006b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b36:	681b      	ldr	r3, [r3, #0]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	20000030 	.word	0x20000030

08006b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b4c:	f7ff fff0 	bl	8006b30 <HAL_RCC_GetHCLKFreq>
 8006b50:	4602      	mov	r2, r0
 8006b52:	4b05      	ldr	r3, [pc, #20]	@ (8006b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	0a9b      	lsrs	r3, r3, #10
 8006b58:	f003 0307 	and.w	r3, r3, #7
 8006b5c:	4903      	ldr	r1, [pc, #12]	@ (8006b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b5e:	5ccb      	ldrb	r3, [r1, r3]
 8006b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	40023800 	.word	0x40023800
 8006b6c:	0800cf50 	.word	0x0800cf50

08006b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b74:	f7ff ffdc 	bl	8006b30 <HAL_RCC_GetHCLKFreq>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	4b05      	ldr	r3, [pc, #20]	@ (8006b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	0b5b      	lsrs	r3, r3, #13
 8006b80:	f003 0307 	and.w	r3, r3, #7
 8006b84:	4903      	ldr	r1, [pc, #12]	@ (8006b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b86:	5ccb      	ldrb	r3, [r1, r3]
 8006b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	40023800 	.word	0x40023800
 8006b94:	0800cf50 	.word	0x0800cf50

08006b98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	220f      	movs	r2, #15
 8006ba6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006ba8:	4b12      	ldr	r3, [pc, #72]	@ (8006bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f003 0203 	and.w	r2, r3, #3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8006bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006bcc:	4b09      	ldr	r3, [pc, #36]	@ (8006bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	08db      	lsrs	r3, r3, #3
 8006bd2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006bda:	4b07      	ldr	r3, [pc, #28]	@ (8006bf8 <HAL_RCC_GetClockConfig+0x60>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 020f 	and.w	r2, r3, #15
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	601a      	str	r2, [r3, #0]
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	40023800 	.word	0x40023800
 8006bf8:	40023c00 	.word	0x40023c00

08006bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b088      	sub	sp, #32
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00a      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006c24:	4b66      	ldr	r3, [pc, #408]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c2a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c32:	4963      	ldr	r1, [pc, #396]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006c46:	4b5e      	ldr	r3, [pc, #376]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c4c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c54:	495a      	ldr	r1, [pc, #360]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10b      	bne.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d105      	bne.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d075      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006c80:	4b50      	ldr	r3, [pc, #320]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c86:	f7fd ff5b 	bl	8004b40 <HAL_GetTick>
 8006c8a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c8c:	e008      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006c8e:	f7fd ff57 	bl	8004b40 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d901      	bls.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e1dc      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ca0:	4b47      	ldr	r3, [pc, #284]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1f0      	bne.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d009      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	019a      	lsls	r2, r3, #6
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	071b      	lsls	r3, r3, #28
 8006cc4:	493e      	ldr	r1, [pc, #248]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d01f      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006cd8:	4b39      	ldr	r3, [pc, #228]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cde:	0f1b      	lsrs	r3, r3, #28
 8006ce0:	f003 0307 	and.w	r3, r3, #7
 8006ce4:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	019a      	lsls	r2, r3, #6
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	061b      	lsls	r3, r3, #24
 8006cf2:	431a      	orrs	r2, r3
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	071b      	lsls	r3, r3, #28
 8006cf8:	4931      	ldr	r1, [pc, #196]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006d00:	4b2f      	ldr	r3, [pc, #188]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d06:	f023 021f 	bic.w	r2, r3, #31
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	492b      	ldr	r1, [pc, #172]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00d      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	019a      	lsls	r2, r3, #6
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	061b      	lsls	r3, r3, #24
 8006d30:	431a      	orrs	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	071b      	lsls	r3, r3, #28
 8006d38:	4921      	ldr	r1, [pc, #132]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006d40:	4b20      	ldr	r3, [pc, #128]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006d42:	2201      	movs	r2, #1
 8006d44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d46:	f7fd fefb 	bl	8004b40 <HAL_GetTick>
 8006d4a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d4c:	e008      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006d4e:	f7fd fef7 	bl	8004b40 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e17c      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d60:	4b17      	ldr	r3, [pc, #92]	@ (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0f0      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d112      	bne.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10c      	bne.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 80ce 	beq.w	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x332>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8006d96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d9a:	f040 80c8 	bne.w	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006da0:	2200      	movs	r2, #0
 8006da2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006da4:	f7fd fecc 	bl	8004b40 <HAL_GetTick>
 8006da8:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006daa:	e00f      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006dac:	f7fd fec8 	bl	8004b40 <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d908      	bls.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e14d      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8006dbe:	bf00      	nop
 8006dc0:	40023800 	.word	0x40023800
 8006dc4:	42470068 	.word	0x42470068
 8006dc8:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006dcc:	4ba5      	ldr	r3, [pc, #660]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006dd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dd8:	d0e8      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0304 	and.w	r3, r3, #4
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d02e      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006de6:	4b9f      	ldr	r3, [pc, #636]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dec:	0c1b      	lsrs	r3, r3, #16
 8006dee:	f003 0303 	and.w	r3, r3, #3
 8006df2:	3301      	adds	r3, #1
 8006df4:	005b      	lsls	r3, r3, #1
 8006df6:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006df8:	4b9a      	ldr	r3, [pc, #616]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dfe:	0f1b      	lsrs	r3, r3, #28
 8006e00:	f003 0307 	and.w	r3, r3, #7
 8006e04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	019a      	lsls	r2, r3, #6
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	085b      	lsrs	r3, r3, #1
 8006e10:	3b01      	subs	r3, #1
 8006e12:	041b      	lsls	r3, r3, #16
 8006e14:	431a      	orrs	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	061b      	lsls	r3, r3, #24
 8006e1c:	431a      	orrs	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	071b      	lsls	r3, r3, #28
 8006e22:	4990      	ldr	r1, [pc, #576]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006e2a:	4b8e      	ldr	r3, [pc, #568]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e30:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	021b      	lsls	r3, r3, #8
 8006e3c:	4989      	ldr	r1, [pc, #548]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0308 	and.w	r3, r3, #8
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d02c      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006e50:	4b84      	ldr	r3, [pc, #528]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e56:	0c1b      	lsrs	r3, r3, #16
 8006e58:	f003 0303 	and.w	r3, r3, #3
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	005b      	lsls	r3, r3, #1
 8006e60:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006e62:	4b80      	ldr	r3, [pc, #512]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e68:	0e1b      	lsrs	r3, r3, #24
 8006e6a:	f003 030f 	and.w	r3, r3, #15
 8006e6e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	019a      	lsls	r2, r3, #6
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	085b      	lsrs	r3, r3, #1
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	041b      	lsls	r3, r3, #16
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	061b      	lsls	r3, r3, #24
 8006e84:	431a      	orrs	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	071b      	lsls	r3, r3, #28
 8006e8c:	4975      	ldr	r1, [pc, #468]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006e94:	4b73      	ldr	r3, [pc, #460]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e9a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea2:	4970      	ldr	r1, [pc, #448]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d024      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x304>
        (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8006eba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ebe:	d11f      	bne.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006ec0:	4b68      	ldr	r3, [pc, #416]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ec6:	0e1b      	lsrs	r3, r3, #24
 8006ec8:	f003 030f 	and.w	r3, r3, #15
 8006ecc:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ece:	4b65      	ldr	r3, [pc, #404]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ed4:	0f1b      	lsrs	r3, r3, #28
 8006ed6:	f003 0307 	and.w	r3, r3, #7
 8006eda:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	019a      	lsls	r2, r3, #6
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	085b      	lsrs	r3, r3, #1
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	041b      	lsls	r3, r3, #16
 8006eec:	431a      	orrs	r2, r3
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	061b      	lsls	r3, r3, #24
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	071b      	lsls	r3, r3, #28
 8006ef8:	495a      	ldr	r1, [pc, #360]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006f00:	4b59      	ldr	r3, [pc, #356]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006f02:	2201      	movs	r2, #1
 8006f04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f06:	f7fd fe1b 	bl	8004b40 <HAL_GetTick>
 8006f0a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006f0c:	e008      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006f0e:	f7fd fe17 	bl	8004b40 <HAL_GetTick>
 8006f12:	4602      	mov	r2, r0
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d901      	bls.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e09c      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006f20:	4b50      	ldr	r3, [pc, #320]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f2c:	d1ef      	bne.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0320 	and.w	r3, r3, #32
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f000 8083 	beq.w	8007042 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	60bb      	str	r3, [r7, #8]
 8006f40:	4b48      	ldr	r3, [pc, #288]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f44:	4a47      	ldr	r2, [pc, #284]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006f46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f4c:	4b45      	ldr	r3, [pc, #276]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f54:	60bb      	str	r3, [r7, #8]
 8006f56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006f58:	4b44      	ldr	r3, [pc, #272]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a43      	ldr	r2, [pc, #268]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f62:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006f64:	f7fd fdec 	bl	8004b40 <HAL_GetTick>
 8006f68:	61f8      	str	r0, [r7, #28]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006f6a:	e008      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f6c:	f7fd fde8 	bl	8004b40 <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d901      	bls.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e06d      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d0f0      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006f8a:	4b36      	ldr	r3, [pc, #216]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f92:	61bb      	str	r3, [r7, #24]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d02f      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fa2:	69ba      	ldr	r2, [r7, #24]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d028      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fa8:	4b2e      	ldr	r3, [pc, #184]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fb0:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006fb2:	4b2f      	ldr	r3, [pc, #188]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006fb8:	4b2d      	ldr	r3, [pc, #180]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006fba:	2200      	movs	r2, #0
 8006fbc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006fbe:	4a29      	ldr	r2, [pc, #164]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006fc4:	4b27      	ldr	r3, [pc, #156]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d114      	bne.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006fd0:	f7fd fdb6 	bl	8004b40 <HAL_GetTick>
 8006fd4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fd6:	e00a      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fd8:	f7fd fdb2 	bl	8004b40 <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d901      	bls.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e035      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fee:	4b1d      	ldr	r3, [pc, #116]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ff2:	f003 0302 	and.w	r3, r3, #2
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d0ee      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007002:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007006:	d10d      	bne.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8007008:	4b16      	ldr	r3, [pc, #88]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007014:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007018:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800701c:	4911      	ldr	r1, [pc, #68]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800701e:	4313      	orrs	r3, r2
 8007020:	608b      	str	r3, [r1, #8]
 8007022:	e005      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8007024:	4b0f      	ldr	r3, [pc, #60]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	4a0e      	ldr	r2, [pc, #56]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800702a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800702e:	6093      	str	r3, [r2, #8]
 8007030:	4b0c      	ldr	r3, [pc, #48]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007032:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800703c:	4909      	ldr	r1, [pc, #36]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800703e:	4313      	orrs	r3, r2
 8007040:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0310 	and.w	r3, r3, #16
 800704a:	2b00      	cmp	r3, #0
 800704c:	d004      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8007054:	4b07      	ldr	r3, [pc, #28]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8007056:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3720      	adds	r7, #32
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	40023800 	.word	0x40023800
 8007068:	42470070 	.word	0x42470070
 800706c:	40007000 	.word	0x40007000
 8007070:	42470e40 	.word	0x42470e40
 8007074:	424711e0 	.word	0x424711e0

08007078 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d101      	bne.n	800708a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e273      	b.n	8007572 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d075      	beq.n	8007182 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007096:	4b88      	ldr	r3, [pc, #544]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f003 030c 	and.w	r3, r3, #12
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d00c      	beq.n	80070bc <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070a2:	4b85      	ldr	r3, [pc, #532]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f003 030c 	and.w	r3, r3, #12
        || \
 80070aa:	2b08      	cmp	r3, #8
 80070ac:	d112      	bne.n	80070d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070ae:	4b82      	ldr	r3, [pc, #520]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070ba:	d10b      	bne.n	80070d4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070bc:	4b7e      	ldr	r3, [pc, #504]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d05b      	beq.n	8007180 <HAL_RCC_OscConfig+0x108>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d157      	bne.n	8007180 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e24e      	b.n	8007572 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070dc:	d106      	bne.n	80070ec <HAL_RCC_OscConfig+0x74>
 80070de:	4b76      	ldr	r3, [pc, #472]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a75      	ldr	r2, [pc, #468]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 80070e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070e8:	6013      	str	r3, [r2, #0]
 80070ea:	e01d      	b.n	8007128 <HAL_RCC_OscConfig+0xb0>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80070f4:	d10c      	bne.n	8007110 <HAL_RCC_OscConfig+0x98>
 80070f6:	4b70      	ldr	r3, [pc, #448]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a6f      	ldr	r2, [pc, #444]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 80070fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007100:	6013      	str	r3, [r2, #0]
 8007102:	4b6d      	ldr	r3, [pc, #436]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a6c      	ldr	r2, [pc, #432]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 8007108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800710c:	6013      	str	r3, [r2, #0]
 800710e:	e00b      	b.n	8007128 <HAL_RCC_OscConfig+0xb0>
 8007110:	4b69      	ldr	r3, [pc, #420]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a68      	ldr	r2, [pc, #416]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 8007116:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800711a:	6013      	str	r3, [r2, #0]
 800711c:	4b66      	ldr	r3, [pc, #408]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a65      	ldr	r2, [pc, #404]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 8007122:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d013      	beq.n	8007158 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007130:	f7fd fd06 	bl	8004b40 <HAL_GetTick>
 8007134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007136:	e008      	b.n	800714a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007138:	f7fd fd02 	bl	8004b40 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	2b64      	cmp	r3, #100	@ 0x64
 8007144:	d901      	bls.n	800714a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e213      	b.n	8007572 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800714a:	4b5b      	ldr	r3, [pc, #364]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d0f0      	beq.n	8007138 <HAL_RCC_OscConfig+0xc0>
 8007156:	e014      	b.n	8007182 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007158:	f7fd fcf2 	bl	8004b40 <HAL_GetTick>
 800715c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800715e:	e008      	b.n	8007172 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007160:	f7fd fcee 	bl	8004b40 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	2b64      	cmp	r3, #100	@ 0x64
 800716c:	d901      	bls.n	8007172 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e1ff      	b.n	8007572 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007172:	4b51      	ldr	r3, [pc, #324]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1f0      	bne.n	8007160 <HAL_RCC_OscConfig+0xe8>
 800717e:	e000      	b.n	8007182 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0302 	and.w	r3, r3, #2
 800718a:	2b00      	cmp	r3, #0
 800718c:	d063      	beq.n	8007256 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800718e:	4b4a      	ldr	r3, [pc, #296]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f003 030c 	and.w	r3, r3, #12
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00b      	beq.n	80071b2 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800719a:	4b47      	ldr	r3, [pc, #284]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f003 030c 	and.w	r3, r3, #12
        || \
 80071a2:	2b08      	cmp	r3, #8
 80071a4:	d11c      	bne.n	80071e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071a6:	4b44      	ldr	r3, [pc, #272]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d116      	bne.n	80071e0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071b2:	4b41      	ldr	r3, [pc, #260]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d005      	beq.n	80071ca <HAL_RCC_OscConfig+0x152>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d001      	beq.n	80071ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e1d3      	b.n	8007572 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071ca:	4b3b      	ldr	r3, [pc, #236]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	00db      	lsls	r3, r3, #3
 80071d8:	4937      	ldr	r1, [pc, #220]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071de:	e03a      	b.n	8007256 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d020      	beq.n	800722a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071e8:	4b34      	ldr	r3, [pc, #208]	@ (80072bc <HAL_RCC_OscConfig+0x244>)
 80071ea:	2201      	movs	r2, #1
 80071ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ee:	f7fd fca7 	bl	8004b40 <HAL_GetTick>
 80071f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071f4:	e008      	b.n	8007208 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071f6:	f7fd fca3 	bl	8004b40 <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b02      	cmp	r3, #2
 8007202:	d901      	bls.n	8007208 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e1b4      	b.n	8007572 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007208:	4b2b      	ldr	r3, [pc, #172]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b00      	cmp	r3, #0
 8007212:	d0f0      	beq.n	80071f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007214:	4b28      	ldr	r3, [pc, #160]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	00db      	lsls	r3, r3, #3
 8007222:	4925      	ldr	r1, [pc, #148]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 8007224:	4313      	orrs	r3, r2
 8007226:	600b      	str	r3, [r1, #0]
 8007228:	e015      	b.n	8007256 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800722a:	4b24      	ldr	r3, [pc, #144]	@ (80072bc <HAL_RCC_OscConfig+0x244>)
 800722c:	2200      	movs	r2, #0
 800722e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007230:	f7fd fc86 	bl	8004b40 <HAL_GetTick>
 8007234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007236:	e008      	b.n	800724a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007238:	f7fd fc82 	bl	8004b40 <HAL_GetTick>
 800723c:	4602      	mov	r2, r0
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	2b02      	cmp	r3, #2
 8007244:	d901      	bls.n	800724a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e193      	b.n	8007572 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800724a:	4b1b      	ldr	r3, [pc, #108]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0302 	and.w	r3, r3, #2
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1f0      	bne.n	8007238 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 0308 	and.w	r3, r3, #8
 800725e:	2b00      	cmp	r3, #0
 8007260:	d036      	beq.n	80072d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d016      	beq.n	8007298 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800726a:	4b15      	ldr	r3, [pc, #84]	@ (80072c0 <HAL_RCC_OscConfig+0x248>)
 800726c:	2201      	movs	r2, #1
 800726e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007270:	f7fd fc66 	bl	8004b40 <HAL_GetTick>
 8007274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007276:	e008      	b.n	800728a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007278:	f7fd fc62 	bl	8004b40 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	2b02      	cmp	r3, #2
 8007284:	d901      	bls.n	800728a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e173      	b.n	8007572 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800728a:	4b0b      	ldr	r3, [pc, #44]	@ (80072b8 <HAL_RCC_OscConfig+0x240>)
 800728c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0f0      	beq.n	8007278 <HAL_RCC_OscConfig+0x200>
 8007296:	e01b      	b.n	80072d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007298:	4b09      	ldr	r3, [pc, #36]	@ (80072c0 <HAL_RCC_OscConfig+0x248>)
 800729a:	2200      	movs	r2, #0
 800729c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800729e:	f7fd fc4f 	bl	8004b40 <HAL_GetTick>
 80072a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072a4:	e00e      	b.n	80072c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072a6:	f7fd fc4b 	bl	8004b40 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d907      	bls.n	80072c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e15c      	b.n	8007572 <HAL_RCC_OscConfig+0x4fa>
 80072b8:	40023800 	.word	0x40023800
 80072bc:	42470000 	.word	0x42470000
 80072c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072c4:	4b8a      	ldr	r3, [pc, #552]	@ (80074f0 <HAL_RCC_OscConfig+0x478>)
 80072c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072c8:	f003 0302 	and.w	r3, r3, #2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1ea      	bne.n	80072a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0304 	and.w	r3, r3, #4
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f000 8097 	beq.w	800740c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072de:	2300      	movs	r3, #0
 80072e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072e2:	4b83      	ldr	r3, [pc, #524]	@ (80074f0 <HAL_RCC_OscConfig+0x478>)
 80072e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10f      	bne.n	800730e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072ee:	2300      	movs	r3, #0
 80072f0:	60bb      	str	r3, [r7, #8]
 80072f2:	4b7f      	ldr	r3, [pc, #508]	@ (80074f0 <HAL_RCC_OscConfig+0x478>)
 80072f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f6:	4a7e      	ldr	r2, [pc, #504]	@ (80074f0 <HAL_RCC_OscConfig+0x478>)
 80072f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80072fe:	4b7c      	ldr	r3, [pc, #496]	@ (80074f0 <HAL_RCC_OscConfig+0x478>)
 8007300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007306:	60bb      	str	r3, [r7, #8]
 8007308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800730a:	2301      	movs	r3, #1
 800730c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800730e:	4b79      	ldr	r3, [pc, #484]	@ (80074f4 <HAL_RCC_OscConfig+0x47c>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007316:	2b00      	cmp	r3, #0
 8007318:	d118      	bne.n	800734c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800731a:	4b76      	ldr	r3, [pc, #472]	@ (80074f4 <HAL_RCC_OscConfig+0x47c>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a75      	ldr	r2, [pc, #468]	@ (80074f4 <HAL_RCC_OscConfig+0x47c>)
 8007320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007326:	f7fd fc0b 	bl	8004b40 <HAL_GetTick>
 800732a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800732c:	e008      	b.n	8007340 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800732e:	f7fd fc07 	bl	8004b40 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	2b02      	cmp	r3, #2
 800733a:	d901      	bls.n	8007340 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e118      	b.n	8007572 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007340:	4b6c      	ldr	r3, [pc, #432]	@ (80074f4 <HAL_RCC_OscConfig+0x47c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007348:	2b00      	cmp	r3, #0
 800734a:	d0f0      	beq.n	800732e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d106      	bne.n	8007362 <HAL_RCC_OscConfig+0x2ea>
 8007354:	4b66      	ldr	r3, [pc, #408]	@ (80074f0 <HAL_RCC_OscConfig+0x478>)
 8007356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007358:	4a65      	ldr	r2, [pc, #404]	@ (80074f0 <HAL_RCC_OscConfig+0x478>)
 800735a:	f043 0301 	orr.w	r3, r3, #1
 800735e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007360:	e01c      	b.n	800739c <HAL_RCC_OscConfig+0x324>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	2b05      	cmp	r3, #5
 8007368:	d10c      	bne.n	8007384 <HAL_RCC_OscConfig+0x30c>
 800736a:	4b61      	ldr	r3, [pc, #388]	@ (80074f0 <HAL_RCC_OscConfig+0x478>)
 800736c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800736e:	4a60      	ldr	r2, [pc, #384]	@ (80074f0 <HAL_RCC_OscConfig+0x478>)
 8007370:	f043 0304 	orr.w	r3, r3, #4
 8007374:	6713      	str	r3, [r2, #112]	@ 0x70
 8007376:	4b5e      	ldr	r3, [pc, #376]	@ (80074f0 <HAL_RCC_OscConfig+0x478>)
 8007378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800737a:	4a5d      	ldr	r2, [pc, #372]	@ (80074f0 <HAL_RCC_OscConfig+0x478>)
 800737c:	f043 0301 	orr.w	r3, r3, #1
 8007380:	6713      	str	r3, [r2, #112]	@ 0x70
 8007382:	e00b      	b.n	800739c <HAL_RCC_OscConfig+0x324>
 8007384:	4b5a      	ldr	r3, [pc, #360]	@ (80074f0 <HAL_RCC_OscConfig+0x478>)
 8007386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007388:	4a59      	ldr	r2, [pc, #356]	@ (80074f0 <HAL_RCC_OscConfig+0x478>)
 800738a:	f023 0301 	bic.w	r3, r3, #1
 800738e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007390:	4b57      	ldr	r3, [pc, #348]	@ (80074f0 <HAL_RCC_OscConfig+0x478>)
 8007392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007394:	4a56      	ldr	r2, [pc, #344]	@ (80074f0 <HAL_RCC_OscConfig+0x478>)
 8007396:	f023 0304 	bic.w	r3, r3, #4
 800739a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d015      	beq.n	80073d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073a4:	f7fd fbcc 	bl	8004b40 <HAL_GetTick>
 80073a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073aa:	e00a      	b.n	80073c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ac:	f7fd fbc8 	bl	8004b40 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d901      	bls.n	80073c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e0d7      	b.n	8007572 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073c2:	4b4b      	ldr	r3, [pc, #300]	@ (80074f0 <HAL_RCC_OscConfig+0x478>)
 80073c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073c6:	f003 0302 	and.w	r3, r3, #2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0ee      	beq.n	80073ac <HAL_RCC_OscConfig+0x334>
 80073ce:	e014      	b.n	80073fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073d0:	f7fd fbb6 	bl	8004b40 <HAL_GetTick>
 80073d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073d6:	e00a      	b.n	80073ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073d8:	f7fd fbb2 	bl	8004b40 <HAL_GetTick>
 80073dc:	4602      	mov	r2, r0
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d901      	bls.n	80073ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e0c1      	b.n	8007572 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073ee:	4b40      	ldr	r3, [pc, #256]	@ (80074f0 <HAL_RCC_OscConfig+0x478>)
 80073f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073f2:	f003 0302 	and.w	r3, r3, #2
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1ee      	bne.n	80073d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d105      	bne.n	800740c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007400:	4b3b      	ldr	r3, [pc, #236]	@ (80074f0 <HAL_RCC_OscConfig+0x478>)
 8007402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007404:	4a3a      	ldr	r2, [pc, #232]	@ (80074f0 <HAL_RCC_OscConfig+0x478>)
 8007406:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800740a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 80ad 	beq.w	8007570 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007416:	4b36      	ldr	r3, [pc, #216]	@ (80074f0 <HAL_RCC_OscConfig+0x478>)
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f003 030c 	and.w	r3, r3, #12
 800741e:	2b08      	cmp	r3, #8
 8007420:	d060      	beq.n	80074e4 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	2b02      	cmp	r3, #2
 8007428:	d145      	bne.n	80074b6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800742a:	4b33      	ldr	r3, [pc, #204]	@ (80074f8 <HAL_RCC_OscConfig+0x480>)
 800742c:	2200      	movs	r2, #0
 800742e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007430:	f7fd fb86 	bl	8004b40 <HAL_GetTick>
 8007434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007436:	e008      	b.n	800744a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007438:	f7fd fb82 	bl	8004b40 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b02      	cmp	r3, #2
 8007444:	d901      	bls.n	800744a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e093      	b.n	8007572 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800744a:	4b29      	ldr	r3, [pc, #164]	@ (80074f0 <HAL_RCC_OscConfig+0x478>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1f0      	bne.n	8007438 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	69da      	ldr	r2, [r3, #28]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	431a      	orrs	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007464:	019b      	lsls	r3, r3, #6
 8007466:	431a      	orrs	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800746c:	085b      	lsrs	r3, r3, #1
 800746e:	3b01      	subs	r3, #1
 8007470:	041b      	lsls	r3, r3, #16
 8007472:	431a      	orrs	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007478:	061b      	lsls	r3, r3, #24
 800747a:	431a      	orrs	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007480:	071b      	lsls	r3, r3, #28
 8007482:	491b      	ldr	r1, [pc, #108]	@ (80074f0 <HAL_RCC_OscConfig+0x478>)
 8007484:	4313      	orrs	r3, r2
 8007486:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007488:	4b1b      	ldr	r3, [pc, #108]	@ (80074f8 <HAL_RCC_OscConfig+0x480>)
 800748a:	2201      	movs	r2, #1
 800748c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800748e:	f7fd fb57 	bl	8004b40 <HAL_GetTick>
 8007492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007494:	e008      	b.n	80074a8 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007496:	f7fd fb53 	bl	8004b40 <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d901      	bls.n	80074a8 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e064      	b.n	8007572 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074a8:	4b11      	ldr	r3, [pc, #68]	@ (80074f0 <HAL_RCC_OscConfig+0x478>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0f0      	beq.n	8007496 <HAL_RCC_OscConfig+0x41e>
 80074b4:	e05c      	b.n	8007570 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074b6:	4b10      	ldr	r3, [pc, #64]	@ (80074f8 <HAL_RCC_OscConfig+0x480>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074bc:	f7fd fb40 	bl	8004b40 <HAL_GetTick>
 80074c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074c2:	e008      	b.n	80074d6 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074c4:	f7fd fb3c 	bl	8004b40 <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d901      	bls.n	80074d6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e04d      	b.n	8007572 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074d6:	4b06      	ldr	r3, [pc, #24]	@ (80074f0 <HAL_RCC_OscConfig+0x478>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1f0      	bne.n	80074c4 <HAL_RCC_OscConfig+0x44c>
 80074e2:	e045      	b.n	8007570 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	699b      	ldr	r3, [r3, #24]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d107      	bne.n	80074fc <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e040      	b.n	8007572 <HAL_RCC_OscConfig+0x4fa>
 80074f0:	40023800 	.word	0x40023800
 80074f4:	40007000 	.word	0x40007000
 80074f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80074fc:	4b1f      	ldr	r3, [pc, #124]	@ (800757c <HAL_RCC_OscConfig+0x504>)
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d030      	beq.n	800756c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007514:	429a      	cmp	r2, r3
 8007516:	d129      	bne.n	800756c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007522:	429a      	cmp	r2, r3
 8007524:	d122      	bne.n	800756c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800752c:	4013      	ands	r3, r2
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007532:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007534:	4293      	cmp	r3, r2
 8007536:	d119      	bne.n	800756c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007542:	085b      	lsrs	r3, r3, #1
 8007544:	3b01      	subs	r3, #1
 8007546:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007548:	429a      	cmp	r2, r3
 800754a:	d10f      	bne.n	800756c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007556:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007558:	429a      	cmp	r2, r3
 800755a:	d107      	bne.n	800756c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007566:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007568:	429a      	cmp	r2, r3
 800756a:	d001      	beq.n	8007570 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e000      	b.n	8007572 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3718      	adds	r7, #24
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	40023800 	.word	0x40023800

08007580 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e025      	b.n	80075e0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b00      	cmp	r3, #0
 800759e:	d106      	bne.n	80075ae <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f7fb f8b7 	bl	800271c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2202      	movs	r2, #2
 80075b2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	3304      	adds	r3, #4
 80075be:	4619      	mov	r1, r3
 80075c0:	4610      	mov	r0, r2
 80075c2:	f001 f80b 	bl	80085dc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6818      	ldr	r0, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	461a      	mov	r2, r3
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	f001 f860 	bl	8008696 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <HAL_SDRAM_Write_16b>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Write_16b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint16_t *pSrcBuffer,
                                      uint32_t BufferSize)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b089      	sub	sp, #36	@ 0x24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
 80075f4:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint32_t *psdramaddress = pAddress;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	61bb      	str	r3, [r7, #24]
  uint16_t *psrcbuff = pSrcBuffer;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	617b      	str	r3, [r7, #20]

  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b02      	cmp	r3, #2
 8007608:	d101      	bne.n	800760e <HAL_SDRAM_Write_16b+0x26>
  {
    return HAL_BUSY;
 800760a:	2302      	movs	r3, #2
 800760c:	e04d      	b.n	80076aa <HAL_SDRAM_Write_16b+0xc2>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b01      	cmp	r3, #1
 8007618:	d146      	bne.n	80076a8 <HAL_SDRAM_Write_16b+0xc0>
  {
    /* Process Locked */
    __HAL_LOCK(hsdram);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007620:	2b01      	cmp	r3, #1
 8007622:	d101      	bne.n	8007628 <HAL_SDRAM_Write_16b+0x40>
 8007624:	2302      	movs	r3, #2
 8007626:	e040      	b.n	80076aa <HAL_SDRAM_Write_16b+0xc2>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Update the SDRAM controller state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2202      	movs	r2, #2
 8007634:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Write data to memory */
    for (size = BufferSize; size >= 2U ; size -= 2U)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	61fb      	str	r3, [r7, #28]
 800763c:	e018      	b.n	8007670 <HAL_SDRAM_Write_16b+0x88>
    {
      *psdramaddress = (uint32_t)(*psrcbuff);
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	461a      	mov	r2, r3
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	601a      	str	r2, [r3, #0]
      psrcbuff++;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	3302      	adds	r3, #2
 800764c:	617b      	str	r3, [r7, #20]
      *psdramaddress |= ((uint32_t)(*psrcbuff) << 16U);
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	881b      	ldrh	r3, [r3, #0]
 8007656:	041b      	lsls	r3, r3, #16
 8007658:	431a      	orrs	r2, r3
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	601a      	str	r2, [r3, #0]
      psrcbuff++;
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	3302      	adds	r3, #2
 8007662:	617b      	str	r3, [r7, #20]
      psdramaddress++;
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	3304      	adds	r3, #4
 8007668:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size >= 2U ; size -= 2U)
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	3b02      	subs	r3, #2
 800766e:	61fb      	str	r3, [r7, #28]
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d8e3      	bhi.n	800763e <HAL_SDRAM_Write_16b+0x56>
    }

    /* Write last 16-bits if size is not 32-bits multiple */
    if ((BufferSize % 2U) != 0U)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	2b00      	cmp	r3, #0
 800767e:	d009      	beq.n	8007694 <HAL_SDRAM_Write_16b+0xac>
    {
      *psdramaddress = ((uint32_t)(*psrcbuff) & 0x0000FFFFU) | ((*psdramaddress) & 0xFFFF0000U);
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	881b      	ldrh	r3, [r3, #0]
 8007684:	461a      	mov	r2, r3
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	0c1b      	lsrs	r3, r3, #16
 800768c:	041b      	lsls	r3, r3, #16
 800768e:	431a      	orrs	r2, r3
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	601a      	str	r2, [r3, #0]
    }

    /* Update the SDRAM controller state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Process Unlocked */
    __HAL_UNLOCK(hsdram);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  else
  {
    return  HAL_ERROR;
  }

  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
 80076a6:	e000      	b.n	80076aa <HAL_SDRAM_Write_16b+0xc2>
    return  HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3724      	adds	r7, #36	@ 0x24
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b086      	sub	sp, #24
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	60f8      	str	r0, [r7, #12]
 80076be:	60b9      	str	r1, [r7, #8]
 80076c0:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80076c8:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80076ca:	7dfb      	ldrb	r3, [r7, #23]
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d101      	bne.n	80076d4 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80076d0:	2302      	movs	r3, #2
 80076d2:	e021      	b.n	8007718 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80076d4:	7dfb      	ldrb	r3, [r7, #23]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d002      	beq.n	80076e0 <HAL_SDRAM_SendCommand+0x2a>
 80076da:	7dfb      	ldrb	r3, [r7, #23]
 80076dc:	2b05      	cmp	r3, #5
 80076de:	d118      	bne.n	8007712 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2202      	movs	r2, #2
 80076e4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	68b9      	ldr	r1, [r7, #8]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f001 f839 	bl	8008768 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d104      	bne.n	8007708 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2205      	movs	r2, #5
 8007702:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007706:	e006      	b.n	8007716 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007710:	e001      	b.n	8007716 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e000      	b.n	8007718 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3718      	adds	r7, #24
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007730:	b2db      	uxtb	r3, r3
 8007732:	2b02      	cmp	r3, #2
 8007734:	d101      	bne.n	800773a <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007736:	2302      	movs	r3, #2
 8007738:	e016      	b.n	8007768 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007740:	b2db      	uxtb	r3, r3
 8007742:	2b01      	cmp	r3, #1
 8007744:	d10f      	bne.n	8007766 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2202      	movs	r2, #2
 800774a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6839      	ldr	r1, [r7, #0]
 8007754:	4618      	mov	r0, r3
 8007756:	f001 f844 	bl	80087e2 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	e000      	b.n	8007768 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
}
 8007768:	4618      	mov	r0, r3
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e07b      	b.n	800787a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007786:	2b00      	cmp	r3, #0
 8007788:	d108      	bne.n	800779c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007792:	d009      	beq.n	80077a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	61da      	str	r2, [r3, #28]
 800779a:	e005      	b.n	80077a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d106      	bne.n	80077c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7fa fdec 	bl	80023a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2202      	movs	r2, #2
 80077cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80077f0:	431a      	orrs	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077fa:	431a      	orrs	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	f003 0302 	and.w	r3, r3, #2
 8007804:	431a      	orrs	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	431a      	orrs	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007818:	431a      	orrs	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007822:	431a      	orrs	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a1b      	ldr	r3, [r3, #32]
 8007828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800782c:	ea42 0103 	orr.w	r1, r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007834:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	430a      	orrs	r2, r1
 800783e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	0c1b      	lsrs	r3, r3, #16
 8007846:	f003 0104 	and.w	r1, r3, #4
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800784e:	f003 0210 	and.w	r2, r3, #16
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	430a      	orrs	r2, r1
 8007858:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	69da      	ldr	r2, [r3, #28]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007868:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b082      	sub	sp, #8
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e041      	b.n	8007918 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b00      	cmp	r3, #0
 800789e:	d106      	bne.n	80078ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f839 	bl	8007920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2202      	movs	r2, #2
 80078b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	3304      	adds	r3, #4
 80078be:	4619      	mov	r1, r3
 80078c0:	4610      	mov	r0, r2
 80078c2:	f000 f9bf 	bl	8007c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3708      	adds	r7, #8
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2b01      	cmp	r3, #1
 8007946:	d001      	beq.n	800794c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e04e      	b.n	80079ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2202      	movs	r2, #2
 8007950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68da      	ldr	r2, [r3, #12]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f042 0201 	orr.w	r2, r2, #1
 8007962:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a23      	ldr	r2, [pc, #140]	@ (80079f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d022      	beq.n	80079b4 <HAL_TIM_Base_Start_IT+0x80>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007976:	d01d      	beq.n	80079b4 <HAL_TIM_Base_Start_IT+0x80>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a1f      	ldr	r2, [pc, #124]	@ (80079fc <HAL_TIM_Base_Start_IT+0xc8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d018      	beq.n	80079b4 <HAL_TIM_Base_Start_IT+0x80>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a1e      	ldr	r2, [pc, #120]	@ (8007a00 <HAL_TIM_Base_Start_IT+0xcc>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d013      	beq.n	80079b4 <HAL_TIM_Base_Start_IT+0x80>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a1c      	ldr	r2, [pc, #112]	@ (8007a04 <HAL_TIM_Base_Start_IT+0xd0>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d00e      	beq.n	80079b4 <HAL_TIM_Base_Start_IT+0x80>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a1b      	ldr	r2, [pc, #108]	@ (8007a08 <HAL_TIM_Base_Start_IT+0xd4>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d009      	beq.n	80079b4 <HAL_TIM_Base_Start_IT+0x80>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a19      	ldr	r2, [pc, #100]	@ (8007a0c <HAL_TIM_Base_Start_IT+0xd8>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d004      	beq.n	80079b4 <HAL_TIM_Base_Start_IT+0x80>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a18      	ldr	r2, [pc, #96]	@ (8007a10 <HAL_TIM_Base_Start_IT+0xdc>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d111      	bne.n	80079d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f003 0307 	and.w	r3, r3, #7
 80079be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2b06      	cmp	r3, #6
 80079c4:	d010      	beq.n	80079e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f042 0201 	orr.w	r2, r2, #1
 80079d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079d6:	e007      	b.n	80079e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f042 0201 	orr.w	r2, r2, #1
 80079e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3714      	adds	r7, #20
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	40010000 	.word	0x40010000
 80079fc:	40000400 	.word	0x40000400
 8007a00:	40000800 	.word	0x40000800
 8007a04:	40000c00 	.word	0x40000c00
 8007a08:	40010400 	.word	0x40010400
 8007a0c:	40014000 	.word	0x40014000
 8007a10:	40001800 	.word	0x40001800

08007a14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	f003 0302 	and.w	r3, r3, #2
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d020      	beq.n	8007a78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f003 0302 	and.w	r3, r3, #2
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d01b      	beq.n	8007a78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f06f 0202 	mvn.w	r2, #2
 8007a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	f003 0303 	and.w	r3, r3, #3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d003      	beq.n	8007a66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f8d2 	bl	8007c08 <HAL_TIM_IC_CaptureCallback>
 8007a64:	e005      	b.n	8007a72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f8c4 	bl	8007bf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f8d5 	bl	8007c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	f003 0304 	and.w	r3, r3, #4
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d020      	beq.n	8007ac4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f003 0304 	and.w	r3, r3, #4
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d01b      	beq.n	8007ac4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f06f 0204 	mvn.w	r2, #4
 8007a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2202      	movs	r2, #2
 8007a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d003      	beq.n	8007ab2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f8ac 	bl	8007c08 <HAL_TIM_IC_CaptureCallback>
 8007ab0:	e005      	b.n	8007abe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f89e 	bl	8007bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f8af 	bl	8007c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	f003 0308 	and.w	r3, r3, #8
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d020      	beq.n	8007b10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f003 0308 	and.w	r3, r3, #8
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d01b      	beq.n	8007b10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f06f 0208 	mvn.w	r2, #8
 8007ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2204      	movs	r2, #4
 8007ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	f003 0303 	and.w	r3, r3, #3
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f886 	bl	8007c08 <HAL_TIM_IC_CaptureCallback>
 8007afc:	e005      	b.n	8007b0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f878 	bl	8007bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f889 	bl	8007c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	f003 0310 	and.w	r3, r3, #16
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d020      	beq.n	8007b5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f003 0310 	and.w	r3, r3, #16
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d01b      	beq.n	8007b5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f06f 0210 	mvn.w	r2, #16
 8007b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2208      	movs	r2, #8
 8007b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	69db      	ldr	r3, [r3, #28]
 8007b3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f860 	bl	8007c08 <HAL_TIM_IC_CaptureCallback>
 8007b48:	e005      	b.n	8007b56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f852 	bl	8007bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f863 	bl	8007c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00c      	beq.n	8007b80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f003 0301 	and.w	r3, r3, #1
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d007      	beq.n	8007b80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f06f 0201 	mvn.w	r2, #1
 8007b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7fa f8fe 	bl	8001d7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00c      	beq.n	8007ba4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d007      	beq.n	8007ba4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f906 	bl	8007db0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00c      	beq.n	8007bc8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d007      	beq.n	8007bc8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f834 	bl	8007c30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	f003 0320 	and.w	r3, r3, #32
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00c      	beq.n	8007bec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f003 0320 	and.w	r3, r3, #32
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d007      	beq.n	8007bec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f06f 0220 	mvn.w	r2, #32
 8007be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f8d8 	bl	8007d9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bec:	bf00      	nop
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a46      	ldr	r2, [pc, #280]	@ (8007d70 <TIM_Base_SetConfig+0x12c>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d013      	beq.n	8007c84 <TIM_Base_SetConfig+0x40>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c62:	d00f      	beq.n	8007c84 <TIM_Base_SetConfig+0x40>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a43      	ldr	r2, [pc, #268]	@ (8007d74 <TIM_Base_SetConfig+0x130>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d00b      	beq.n	8007c84 <TIM_Base_SetConfig+0x40>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a42      	ldr	r2, [pc, #264]	@ (8007d78 <TIM_Base_SetConfig+0x134>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d007      	beq.n	8007c84 <TIM_Base_SetConfig+0x40>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a41      	ldr	r2, [pc, #260]	@ (8007d7c <TIM_Base_SetConfig+0x138>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d003      	beq.n	8007c84 <TIM_Base_SetConfig+0x40>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a40      	ldr	r2, [pc, #256]	@ (8007d80 <TIM_Base_SetConfig+0x13c>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d108      	bne.n	8007c96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a35      	ldr	r2, [pc, #212]	@ (8007d70 <TIM_Base_SetConfig+0x12c>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d02b      	beq.n	8007cf6 <TIM_Base_SetConfig+0xb2>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ca4:	d027      	beq.n	8007cf6 <TIM_Base_SetConfig+0xb2>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a32      	ldr	r2, [pc, #200]	@ (8007d74 <TIM_Base_SetConfig+0x130>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d023      	beq.n	8007cf6 <TIM_Base_SetConfig+0xb2>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a31      	ldr	r2, [pc, #196]	@ (8007d78 <TIM_Base_SetConfig+0x134>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d01f      	beq.n	8007cf6 <TIM_Base_SetConfig+0xb2>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a30      	ldr	r2, [pc, #192]	@ (8007d7c <TIM_Base_SetConfig+0x138>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d01b      	beq.n	8007cf6 <TIM_Base_SetConfig+0xb2>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a2f      	ldr	r2, [pc, #188]	@ (8007d80 <TIM_Base_SetConfig+0x13c>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d017      	beq.n	8007cf6 <TIM_Base_SetConfig+0xb2>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a2e      	ldr	r2, [pc, #184]	@ (8007d84 <TIM_Base_SetConfig+0x140>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d013      	beq.n	8007cf6 <TIM_Base_SetConfig+0xb2>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a2d      	ldr	r2, [pc, #180]	@ (8007d88 <TIM_Base_SetConfig+0x144>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d00f      	beq.n	8007cf6 <TIM_Base_SetConfig+0xb2>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a2c      	ldr	r2, [pc, #176]	@ (8007d8c <TIM_Base_SetConfig+0x148>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d00b      	beq.n	8007cf6 <TIM_Base_SetConfig+0xb2>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a2b      	ldr	r2, [pc, #172]	@ (8007d90 <TIM_Base_SetConfig+0x14c>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d007      	beq.n	8007cf6 <TIM_Base_SetConfig+0xb2>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a2a      	ldr	r2, [pc, #168]	@ (8007d94 <TIM_Base_SetConfig+0x150>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d003      	beq.n	8007cf6 <TIM_Base_SetConfig+0xb2>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a29      	ldr	r2, [pc, #164]	@ (8007d98 <TIM_Base_SetConfig+0x154>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d108      	bne.n	8007d08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	689a      	ldr	r2, [r3, #8]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a10      	ldr	r2, [pc, #64]	@ (8007d70 <TIM_Base_SetConfig+0x12c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d003      	beq.n	8007d3c <TIM_Base_SetConfig+0xf8>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a12      	ldr	r2, [pc, #72]	@ (8007d80 <TIM_Base_SetConfig+0x13c>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d103      	bne.n	8007d44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	691a      	ldr	r2, [r3, #16]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d105      	bne.n	8007d62 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	f023 0201 	bic.w	r2, r3, #1
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	611a      	str	r2, [r3, #16]
  }
}
 8007d62:	bf00      	nop
 8007d64:	3714      	adds	r7, #20
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	40010000 	.word	0x40010000
 8007d74:	40000400 	.word	0x40000400
 8007d78:	40000800 	.word	0x40000800
 8007d7c:	40000c00 	.word	0x40000c00
 8007d80:	40010400 	.word	0x40010400
 8007d84:	40014000 	.word	0x40014000
 8007d88:	40014400 	.word	0x40014400
 8007d8c:	40014800 	.word	0x40014800
 8007d90:	40001800 	.word	0x40001800
 8007d94:	40001c00 	.word	0x40001c00
 8007d98:	40002000 	.word	0x40002000

08007d9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d101      	bne.n	8007dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e042      	b.n	8007e5c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d106      	bne.n	8007df0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f7fa fb40 	bl	8002470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2224      	movs	r2, #36	@ 0x24
 8007df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68da      	ldr	r2, [r3, #12]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007e06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f973 	bl	80080f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	691a      	ldr	r2, [r3, #16]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007e1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	695a      	ldr	r2, [r3, #20]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007e2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68da      	ldr	r2, [r3, #12]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007e3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2220      	movs	r2, #32
 8007e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b08a      	sub	sp, #40	@ 0x28
 8007e68:	af02      	add	r7, sp, #8
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	603b      	str	r3, [r7, #0]
 8007e70:	4613      	mov	r3, r2
 8007e72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e74:	2300      	movs	r3, #0
 8007e76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b20      	cmp	r3, #32
 8007e82:	d175      	bne.n	8007f70 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d002      	beq.n	8007e90 <HAL_UART_Transmit+0x2c>
 8007e8a:	88fb      	ldrh	r3, [r7, #6]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e06e      	b.n	8007f72 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2221      	movs	r2, #33	@ 0x21
 8007e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ea2:	f7fc fe4d 	bl	8004b40 <HAL_GetTick>
 8007ea6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	88fa      	ldrh	r2, [r7, #6]
 8007eac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	88fa      	ldrh	r2, [r7, #6]
 8007eb2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ebc:	d108      	bne.n	8007ed0 <HAL_UART_Transmit+0x6c>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d104      	bne.n	8007ed0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	61bb      	str	r3, [r7, #24]
 8007ece:	e003      	b.n	8007ed8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ed8:	e02e      	b.n	8007f38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2180      	movs	r1, #128	@ 0x80
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f000 f848 	bl	8007f7a <UART_WaitOnFlagUntilTimeout>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d005      	beq.n	8007efc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e03a      	b.n	8007f72 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10b      	bne.n	8007f1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	881b      	ldrh	r3, [r3, #0]
 8007f06:	461a      	mov	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	3302      	adds	r3, #2
 8007f16:	61bb      	str	r3, [r7, #24]
 8007f18:	e007      	b.n	8007f2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	781a      	ldrb	r2, [r3, #0]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	3301      	adds	r3, #1
 8007f28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	3b01      	subs	r3, #1
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1cb      	bne.n	8007eda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	2140      	movs	r1, #64	@ 0x40
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f000 f814 	bl	8007f7a <UART_WaitOnFlagUntilTimeout>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d005      	beq.n	8007f64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2220      	movs	r2, #32
 8007f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007f60:	2303      	movs	r3, #3
 8007f62:	e006      	b.n	8007f72 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2220      	movs	r2, #32
 8007f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	e000      	b.n	8007f72 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007f70:	2302      	movs	r3, #2
  }
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3720      	adds	r7, #32
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b086      	sub	sp, #24
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	60f8      	str	r0, [r7, #12]
 8007f82:	60b9      	str	r1, [r7, #8]
 8007f84:	603b      	str	r3, [r7, #0]
 8007f86:	4613      	mov	r3, r2
 8007f88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f8a:	e03b      	b.n	8008004 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f8c:	6a3b      	ldr	r3, [r7, #32]
 8007f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f92:	d037      	beq.n	8008004 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f94:	f7fc fdd4 	bl	8004b40 <HAL_GetTick>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	6a3a      	ldr	r2, [r7, #32]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d302      	bcc.n	8007faa <UART_WaitOnFlagUntilTimeout+0x30>
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d101      	bne.n	8007fae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007faa:	2303      	movs	r3, #3
 8007fac:	e03a      	b.n	8008024 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	f003 0304 	and.w	r3, r3, #4
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d023      	beq.n	8008004 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	2b80      	cmp	r3, #128	@ 0x80
 8007fc0:	d020      	beq.n	8008004 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	2b40      	cmp	r3, #64	@ 0x40
 8007fc6:	d01d      	beq.n	8008004 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0308 	and.w	r3, r3, #8
 8007fd2:	2b08      	cmp	r3, #8
 8007fd4:	d116      	bne.n	8008004 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	617b      	str	r3, [r7, #20]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	617b      	str	r3, [r7, #20]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	617b      	str	r3, [r7, #20]
 8007fea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f000 f81d 	bl	800802c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2208      	movs	r2, #8
 8007ff6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e00f      	b.n	8008024 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	4013      	ands	r3, r2
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	429a      	cmp	r2, r3
 8008012:	bf0c      	ite	eq
 8008014:	2301      	moveq	r3, #1
 8008016:	2300      	movne	r3, #0
 8008018:	b2db      	uxtb	r3, r3
 800801a:	461a      	mov	r2, r3
 800801c:	79fb      	ldrb	r3, [r7, #7]
 800801e:	429a      	cmp	r2, r3
 8008020:	d0b4      	beq.n	8007f8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3718      	adds	r7, #24
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800802c:	b480      	push	{r7}
 800802e:	b095      	sub	sp, #84	@ 0x54
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	330c      	adds	r3, #12
 800803a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800803e:	e853 3f00 	ldrex	r3, [r3]
 8008042:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008046:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800804a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	330c      	adds	r3, #12
 8008052:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008054:	643a      	str	r2, [r7, #64]	@ 0x40
 8008056:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008058:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800805a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800805c:	e841 2300 	strex	r3, r2, [r1]
 8008060:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1e5      	bne.n	8008034 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	3314      	adds	r3, #20
 800806e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008070:	6a3b      	ldr	r3, [r7, #32]
 8008072:	e853 3f00 	ldrex	r3, [r3]
 8008076:	61fb      	str	r3, [r7, #28]
   return(result);
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	f023 0301 	bic.w	r3, r3, #1
 800807e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	3314      	adds	r3, #20
 8008086:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008088:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800808a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800808e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008090:	e841 2300 	strex	r3, r2, [r1]
 8008094:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1e5      	bne.n	8008068 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d119      	bne.n	80080d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	330c      	adds	r3, #12
 80080aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	e853 3f00 	ldrex	r3, [r3]
 80080b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f023 0310 	bic.w	r3, r3, #16
 80080ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	330c      	adds	r3, #12
 80080c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080c4:	61ba      	str	r2, [r7, #24]
 80080c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c8:	6979      	ldr	r1, [r7, #20]
 80080ca:	69ba      	ldr	r2, [r7, #24]
 80080cc:	e841 2300 	strex	r3, r2, [r1]
 80080d0:	613b      	str	r3, [r7, #16]
   return(result);
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1e5      	bne.n	80080a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2220      	movs	r2, #32
 80080dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80080e6:	bf00      	nop
 80080e8:	3754      	adds	r7, #84	@ 0x54
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
	...

080080f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080f8:	b0c0      	sub	sp, #256	@ 0x100
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800810c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008110:	68d9      	ldr	r1, [r3, #12]
 8008112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	ea40 0301 	orr.w	r3, r0, r1
 800811c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800811e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008122:	689a      	ldr	r2, [r3, #8]
 8008124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	431a      	orrs	r2, r3
 800812c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	431a      	orrs	r2, r3
 8008134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008138:	69db      	ldr	r3, [r3, #28]
 800813a:	4313      	orrs	r3, r2
 800813c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800814c:	f021 010c 	bic.w	r1, r1, #12
 8008150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800815a:	430b      	orrs	r3, r1
 800815c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800815e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800816a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800816e:	6999      	ldr	r1, [r3, #24]
 8008170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	ea40 0301 	orr.w	r3, r0, r1
 800817a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800817c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	4b8f      	ldr	r3, [pc, #572]	@ (80083c0 <UART_SetConfig+0x2cc>)
 8008184:	429a      	cmp	r2, r3
 8008186:	d005      	beq.n	8008194 <UART_SetConfig+0xa0>
 8008188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	4b8d      	ldr	r3, [pc, #564]	@ (80083c4 <UART_SetConfig+0x2d0>)
 8008190:	429a      	cmp	r2, r3
 8008192:	d104      	bne.n	800819e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008194:	f7fe fcec 	bl	8006b70 <HAL_RCC_GetPCLK2Freq>
 8008198:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800819c:	e003      	b.n	80081a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800819e:	f7fe fcd3 	bl	8006b48 <HAL_RCC_GetPCLK1Freq>
 80081a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081aa:	69db      	ldr	r3, [r3, #28]
 80081ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081b0:	f040 810c 	bne.w	80083cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081b8:	2200      	movs	r2, #0
 80081ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80081be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80081c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80081c6:	4622      	mov	r2, r4
 80081c8:	462b      	mov	r3, r5
 80081ca:	1891      	adds	r1, r2, r2
 80081cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80081ce:	415b      	adcs	r3, r3
 80081d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80081d6:	4621      	mov	r1, r4
 80081d8:	eb12 0801 	adds.w	r8, r2, r1
 80081dc:	4629      	mov	r1, r5
 80081de:	eb43 0901 	adc.w	r9, r3, r1
 80081e2:	f04f 0200 	mov.w	r2, #0
 80081e6:	f04f 0300 	mov.w	r3, #0
 80081ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081f6:	4690      	mov	r8, r2
 80081f8:	4699      	mov	r9, r3
 80081fa:	4623      	mov	r3, r4
 80081fc:	eb18 0303 	adds.w	r3, r8, r3
 8008200:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008204:	462b      	mov	r3, r5
 8008206:	eb49 0303 	adc.w	r3, r9, r3
 800820a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800820e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800821a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800821e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008222:	460b      	mov	r3, r1
 8008224:	18db      	adds	r3, r3, r3
 8008226:	653b      	str	r3, [r7, #80]	@ 0x50
 8008228:	4613      	mov	r3, r2
 800822a:	eb42 0303 	adc.w	r3, r2, r3
 800822e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008230:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008234:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008238:	f7f8 fcce 	bl	8000bd8 <__aeabi_uldivmod>
 800823c:	4602      	mov	r2, r0
 800823e:	460b      	mov	r3, r1
 8008240:	4b61      	ldr	r3, [pc, #388]	@ (80083c8 <UART_SetConfig+0x2d4>)
 8008242:	fba3 2302 	umull	r2, r3, r3, r2
 8008246:	095b      	lsrs	r3, r3, #5
 8008248:	011c      	lsls	r4, r3, #4
 800824a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800824e:	2200      	movs	r2, #0
 8008250:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008254:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008258:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800825c:	4642      	mov	r2, r8
 800825e:	464b      	mov	r3, r9
 8008260:	1891      	adds	r1, r2, r2
 8008262:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008264:	415b      	adcs	r3, r3
 8008266:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008268:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800826c:	4641      	mov	r1, r8
 800826e:	eb12 0a01 	adds.w	sl, r2, r1
 8008272:	4649      	mov	r1, r9
 8008274:	eb43 0b01 	adc.w	fp, r3, r1
 8008278:	f04f 0200 	mov.w	r2, #0
 800827c:	f04f 0300 	mov.w	r3, #0
 8008280:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008284:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008288:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800828c:	4692      	mov	sl, r2
 800828e:	469b      	mov	fp, r3
 8008290:	4643      	mov	r3, r8
 8008292:	eb1a 0303 	adds.w	r3, sl, r3
 8008296:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800829a:	464b      	mov	r3, r9
 800829c:	eb4b 0303 	adc.w	r3, fp, r3
 80082a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80082a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80082b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80082b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80082b8:	460b      	mov	r3, r1
 80082ba:	18db      	adds	r3, r3, r3
 80082bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80082be:	4613      	mov	r3, r2
 80082c0:	eb42 0303 	adc.w	r3, r2, r3
 80082c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80082c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80082ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80082ce:	f7f8 fc83 	bl	8000bd8 <__aeabi_uldivmod>
 80082d2:	4602      	mov	r2, r0
 80082d4:	460b      	mov	r3, r1
 80082d6:	4611      	mov	r1, r2
 80082d8:	4b3b      	ldr	r3, [pc, #236]	@ (80083c8 <UART_SetConfig+0x2d4>)
 80082da:	fba3 2301 	umull	r2, r3, r3, r1
 80082de:	095b      	lsrs	r3, r3, #5
 80082e0:	2264      	movs	r2, #100	@ 0x64
 80082e2:	fb02 f303 	mul.w	r3, r2, r3
 80082e6:	1acb      	subs	r3, r1, r3
 80082e8:	00db      	lsls	r3, r3, #3
 80082ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80082ee:	4b36      	ldr	r3, [pc, #216]	@ (80083c8 <UART_SetConfig+0x2d4>)
 80082f0:	fba3 2302 	umull	r2, r3, r3, r2
 80082f4:	095b      	lsrs	r3, r3, #5
 80082f6:	005b      	lsls	r3, r3, #1
 80082f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80082fc:	441c      	add	r4, r3
 80082fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008302:	2200      	movs	r2, #0
 8008304:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008308:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800830c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008310:	4642      	mov	r2, r8
 8008312:	464b      	mov	r3, r9
 8008314:	1891      	adds	r1, r2, r2
 8008316:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008318:	415b      	adcs	r3, r3
 800831a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800831c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008320:	4641      	mov	r1, r8
 8008322:	1851      	adds	r1, r2, r1
 8008324:	6339      	str	r1, [r7, #48]	@ 0x30
 8008326:	4649      	mov	r1, r9
 8008328:	414b      	adcs	r3, r1
 800832a:	637b      	str	r3, [r7, #52]	@ 0x34
 800832c:	f04f 0200 	mov.w	r2, #0
 8008330:	f04f 0300 	mov.w	r3, #0
 8008334:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008338:	4659      	mov	r1, fp
 800833a:	00cb      	lsls	r3, r1, #3
 800833c:	4651      	mov	r1, sl
 800833e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008342:	4651      	mov	r1, sl
 8008344:	00ca      	lsls	r2, r1, #3
 8008346:	4610      	mov	r0, r2
 8008348:	4619      	mov	r1, r3
 800834a:	4603      	mov	r3, r0
 800834c:	4642      	mov	r2, r8
 800834e:	189b      	adds	r3, r3, r2
 8008350:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008354:	464b      	mov	r3, r9
 8008356:	460a      	mov	r2, r1
 8008358:	eb42 0303 	adc.w	r3, r2, r3
 800835c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800836c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008370:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008374:	460b      	mov	r3, r1
 8008376:	18db      	adds	r3, r3, r3
 8008378:	62bb      	str	r3, [r7, #40]	@ 0x28
 800837a:	4613      	mov	r3, r2
 800837c:	eb42 0303 	adc.w	r3, r2, r3
 8008380:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008382:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008386:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800838a:	f7f8 fc25 	bl	8000bd8 <__aeabi_uldivmod>
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	4b0d      	ldr	r3, [pc, #52]	@ (80083c8 <UART_SetConfig+0x2d4>)
 8008394:	fba3 1302 	umull	r1, r3, r3, r2
 8008398:	095b      	lsrs	r3, r3, #5
 800839a:	2164      	movs	r1, #100	@ 0x64
 800839c:	fb01 f303 	mul.w	r3, r1, r3
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	00db      	lsls	r3, r3, #3
 80083a4:	3332      	adds	r3, #50	@ 0x32
 80083a6:	4a08      	ldr	r2, [pc, #32]	@ (80083c8 <UART_SetConfig+0x2d4>)
 80083a8:	fba2 2303 	umull	r2, r3, r2, r3
 80083ac:	095b      	lsrs	r3, r3, #5
 80083ae:	f003 0207 	and.w	r2, r3, #7
 80083b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4422      	add	r2, r4
 80083ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80083bc:	e106      	b.n	80085cc <UART_SetConfig+0x4d8>
 80083be:	bf00      	nop
 80083c0:	40011000 	.word	0x40011000
 80083c4:	40011400 	.word	0x40011400
 80083c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083d0:	2200      	movs	r2, #0
 80083d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80083d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80083da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80083de:	4642      	mov	r2, r8
 80083e0:	464b      	mov	r3, r9
 80083e2:	1891      	adds	r1, r2, r2
 80083e4:	6239      	str	r1, [r7, #32]
 80083e6:	415b      	adcs	r3, r3
 80083e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80083ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083ee:	4641      	mov	r1, r8
 80083f0:	1854      	adds	r4, r2, r1
 80083f2:	4649      	mov	r1, r9
 80083f4:	eb43 0501 	adc.w	r5, r3, r1
 80083f8:	f04f 0200 	mov.w	r2, #0
 80083fc:	f04f 0300 	mov.w	r3, #0
 8008400:	00eb      	lsls	r3, r5, #3
 8008402:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008406:	00e2      	lsls	r2, r4, #3
 8008408:	4614      	mov	r4, r2
 800840a:	461d      	mov	r5, r3
 800840c:	4643      	mov	r3, r8
 800840e:	18e3      	adds	r3, r4, r3
 8008410:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008414:	464b      	mov	r3, r9
 8008416:	eb45 0303 	adc.w	r3, r5, r3
 800841a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800841e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800842a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800842e:	f04f 0200 	mov.w	r2, #0
 8008432:	f04f 0300 	mov.w	r3, #0
 8008436:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800843a:	4629      	mov	r1, r5
 800843c:	008b      	lsls	r3, r1, #2
 800843e:	4621      	mov	r1, r4
 8008440:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008444:	4621      	mov	r1, r4
 8008446:	008a      	lsls	r2, r1, #2
 8008448:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800844c:	f7f8 fbc4 	bl	8000bd8 <__aeabi_uldivmod>
 8008450:	4602      	mov	r2, r0
 8008452:	460b      	mov	r3, r1
 8008454:	4b60      	ldr	r3, [pc, #384]	@ (80085d8 <UART_SetConfig+0x4e4>)
 8008456:	fba3 2302 	umull	r2, r3, r3, r2
 800845a:	095b      	lsrs	r3, r3, #5
 800845c:	011c      	lsls	r4, r3, #4
 800845e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008462:	2200      	movs	r2, #0
 8008464:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008468:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800846c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008470:	4642      	mov	r2, r8
 8008472:	464b      	mov	r3, r9
 8008474:	1891      	adds	r1, r2, r2
 8008476:	61b9      	str	r1, [r7, #24]
 8008478:	415b      	adcs	r3, r3
 800847a:	61fb      	str	r3, [r7, #28]
 800847c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008480:	4641      	mov	r1, r8
 8008482:	1851      	adds	r1, r2, r1
 8008484:	6139      	str	r1, [r7, #16]
 8008486:	4649      	mov	r1, r9
 8008488:	414b      	adcs	r3, r1
 800848a:	617b      	str	r3, [r7, #20]
 800848c:	f04f 0200 	mov.w	r2, #0
 8008490:	f04f 0300 	mov.w	r3, #0
 8008494:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008498:	4659      	mov	r1, fp
 800849a:	00cb      	lsls	r3, r1, #3
 800849c:	4651      	mov	r1, sl
 800849e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084a2:	4651      	mov	r1, sl
 80084a4:	00ca      	lsls	r2, r1, #3
 80084a6:	4610      	mov	r0, r2
 80084a8:	4619      	mov	r1, r3
 80084aa:	4603      	mov	r3, r0
 80084ac:	4642      	mov	r2, r8
 80084ae:	189b      	adds	r3, r3, r2
 80084b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80084b4:	464b      	mov	r3, r9
 80084b6:	460a      	mov	r2, r1
 80084b8:	eb42 0303 	adc.w	r3, r2, r3
 80084bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80084c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80084ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80084cc:	f04f 0200 	mov.w	r2, #0
 80084d0:	f04f 0300 	mov.w	r3, #0
 80084d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80084d8:	4649      	mov	r1, r9
 80084da:	008b      	lsls	r3, r1, #2
 80084dc:	4641      	mov	r1, r8
 80084de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084e2:	4641      	mov	r1, r8
 80084e4:	008a      	lsls	r2, r1, #2
 80084e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80084ea:	f7f8 fb75 	bl	8000bd8 <__aeabi_uldivmod>
 80084ee:	4602      	mov	r2, r0
 80084f0:	460b      	mov	r3, r1
 80084f2:	4611      	mov	r1, r2
 80084f4:	4b38      	ldr	r3, [pc, #224]	@ (80085d8 <UART_SetConfig+0x4e4>)
 80084f6:	fba3 2301 	umull	r2, r3, r3, r1
 80084fa:	095b      	lsrs	r3, r3, #5
 80084fc:	2264      	movs	r2, #100	@ 0x64
 80084fe:	fb02 f303 	mul.w	r3, r2, r3
 8008502:	1acb      	subs	r3, r1, r3
 8008504:	011b      	lsls	r3, r3, #4
 8008506:	3332      	adds	r3, #50	@ 0x32
 8008508:	4a33      	ldr	r2, [pc, #204]	@ (80085d8 <UART_SetConfig+0x4e4>)
 800850a:	fba2 2303 	umull	r2, r3, r2, r3
 800850e:	095b      	lsrs	r3, r3, #5
 8008510:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008514:	441c      	add	r4, r3
 8008516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800851a:	2200      	movs	r2, #0
 800851c:	673b      	str	r3, [r7, #112]	@ 0x70
 800851e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008520:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008524:	4642      	mov	r2, r8
 8008526:	464b      	mov	r3, r9
 8008528:	1891      	adds	r1, r2, r2
 800852a:	60b9      	str	r1, [r7, #8]
 800852c:	415b      	adcs	r3, r3
 800852e:	60fb      	str	r3, [r7, #12]
 8008530:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008534:	4641      	mov	r1, r8
 8008536:	1851      	adds	r1, r2, r1
 8008538:	6039      	str	r1, [r7, #0]
 800853a:	4649      	mov	r1, r9
 800853c:	414b      	adcs	r3, r1
 800853e:	607b      	str	r3, [r7, #4]
 8008540:	f04f 0200 	mov.w	r2, #0
 8008544:	f04f 0300 	mov.w	r3, #0
 8008548:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800854c:	4659      	mov	r1, fp
 800854e:	00cb      	lsls	r3, r1, #3
 8008550:	4651      	mov	r1, sl
 8008552:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008556:	4651      	mov	r1, sl
 8008558:	00ca      	lsls	r2, r1, #3
 800855a:	4610      	mov	r0, r2
 800855c:	4619      	mov	r1, r3
 800855e:	4603      	mov	r3, r0
 8008560:	4642      	mov	r2, r8
 8008562:	189b      	adds	r3, r3, r2
 8008564:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008566:	464b      	mov	r3, r9
 8008568:	460a      	mov	r2, r1
 800856a:	eb42 0303 	adc.w	r3, r2, r3
 800856e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	663b      	str	r3, [r7, #96]	@ 0x60
 800857a:	667a      	str	r2, [r7, #100]	@ 0x64
 800857c:	f04f 0200 	mov.w	r2, #0
 8008580:	f04f 0300 	mov.w	r3, #0
 8008584:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008588:	4649      	mov	r1, r9
 800858a:	008b      	lsls	r3, r1, #2
 800858c:	4641      	mov	r1, r8
 800858e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008592:	4641      	mov	r1, r8
 8008594:	008a      	lsls	r2, r1, #2
 8008596:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800859a:	f7f8 fb1d 	bl	8000bd8 <__aeabi_uldivmod>
 800859e:	4602      	mov	r2, r0
 80085a0:	460b      	mov	r3, r1
 80085a2:	4b0d      	ldr	r3, [pc, #52]	@ (80085d8 <UART_SetConfig+0x4e4>)
 80085a4:	fba3 1302 	umull	r1, r3, r3, r2
 80085a8:	095b      	lsrs	r3, r3, #5
 80085aa:	2164      	movs	r1, #100	@ 0x64
 80085ac:	fb01 f303 	mul.w	r3, r1, r3
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	011b      	lsls	r3, r3, #4
 80085b4:	3332      	adds	r3, #50	@ 0x32
 80085b6:	4a08      	ldr	r2, [pc, #32]	@ (80085d8 <UART_SetConfig+0x4e4>)
 80085b8:	fba2 2303 	umull	r2, r3, r2, r3
 80085bc:	095b      	lsrs	r3, r3, #5
 80085be:	f003 020f 	and.w	r2, r3, #15
 80085c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4422      	add	r2, r4
 80085ca:	609a      	str	r2, [r3, #8]
}
 80085cc:	bf00      	nop
 80085ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80085d2:	46bd      	mov	sp, r7
 80085d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085d8:	51eb851f 	.word	0x51eb851f

080085dc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d123      	bne.n	8008636 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80085f6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	6851      	ldr	r1, [r2, #4]
 80085fe:	683a      	ldr	r2, [r7, #0]
 8008600:	6892      	ldr	r2, [r2, #8]
 8008602:	4311      	orrs	r1, r2
 8008604:	683a      	ldr	r2, [r7, #0]
 8008606:	68d2      	ldr	r2, [r2, #12]
 8008608:	4311      	orrs	r1, r2
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	6912      	ldr	r2, [r2, #16]
 800860e:	4311      	orrs	r1, r2
 8008610:	683a      	ldr	r2, [r7, #0]
 8008612:	6952      	ldr	r2, [r2, #20]
 8008614:	4311      	orrs	r1, r2
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	6992      	ldr	r2, [r2, #24]
 800861a:	4311      	orrs	r1, r2
 800861c:	683a      	ldr	r2, [r7, #0]
 800861e:	69d2      	ldr	r2, [r2, #28]
 8008620:	4311      	orrs	r1, r2
 8008622:	683a      	ldr	r2, [r7, #0]
 8008624:	6a12      	ldr	r2, [r2, #32]
 8008626:	4311      	orrs	r1, r2
 8008628:	683a      	ldr	r2, [r7, #0]
 800862a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800862c:	430a      	orrs	r2, r1
 800862e:	431a      	orrs	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	601a      	str	r2, [r3, #0]
 8008634:	e028      	b.n	8008688 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	69d9      	ldr	r1, [r3, #28]
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	6a1b      	ldr	r3, [r3, #32]
 8008646:	4319      	orrs	r1, r3
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800864c:	430b      	orrs	r3, r1
 800864e:	431a      	orrs	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800865c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008660:	683a      	ldr	r2, [r7, #0]
 8008662:	6851      	ldr	r1, [r2, #4]
 8008664:	683a      	ldr	r2, [r7, #0]
 8008666:	6892      	ldr	r2, [r2, #8]
 8008668:	4311      	orrs	r1, r2
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	68d2      	ldr	r2, [r2, #12]
 800866e:	4311      	orrs	r1, r2
 8008670:	683a      	ldr	r2, [r7, #0]
 8008672:	6912      	ldr	r2, [r2, #16]
 8008674:	4311      	orrs	r1, r2
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	6952      	ldr	r2, [r2, #20]
 800867a:	4311      	orrs	r1, r2
 800867c:	683a      	ldr	r2, [r7, #0]
 800867e:	6992      	ldr	r2, [r2, #24]
 8008680:	430a      	orrs	r2, r1
 8008682:	431a      	orrs	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	370c      	adds	r7, #12
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr

08008696 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008696:	b480      	push	{r7}
 8008698:	b085      	sub	sp, #20
 800869a:	af00      	add	r7, sp, #0
 800869c:	60f8      	str	r0, [r7, #12]
 800869e:	60b9      	str	r1, [r7, #8]
 80086a0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d128      	bne.n	80086fa <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	1e59      	subs	r1, r3, #1
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	3b01      	subs	r3, #1
 80086bc:	011b      	lsls	r3, r3, #4
 80086be:	4319      	orrs	r1, r3
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	3b01      	subs	r3, #1
 80086c6:	021b      	lsls	r3, r3, #8
 80086c8:	4319      	orrs	r1, r3
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	3b01      	subs	r3, #1
 80086d0:	031b      	lsls	r3, r3, #12
 80086d2:	4319      	orrs	r1, r3
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	3b01      	subs	r3, #1
 80086da:	041b      	lsls	r3, r3, #16
 80086dc:	4319      	orrs	r1, r3
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	3b01      	subs	r3, #1
 80086e4:	051b      	lsls	r3, r3, #20
 80086e6:	4319      	orrs	r1, r3
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	3b01      	subs	r3, #1
 80086ee:	061b      	lsls	r3, r3, #24
 80086f0:	430b      	orrs	r3, r1
 80086f2:	431a      	orrs	r2, r3
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	609a      	str	r2, [r3, #8]
 80086f8:	e02f      	b.n	800875a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008702:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008706:	68ba      	ldr	r2, [r7, #8]
 8008708:	68d2      	ldr	r2, [r2, #12]
 800870a:	3a01      	subs	r2, #1
 800870c:	0311      	lsls	r1, r2, #12
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	6952      	ldr	r2, [r2, #20]
 8008712:	3a01      	subs	r2, #1
 8008714:	0512      	lsls	r2, r2, #20
 8008716:	430a      	orrs	r2, r1
 8008718:	431a      	orrs	r2, r3
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	1e59      	subs	r1, r3, #1
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	3b01      	subs	r3, #1
 8008732:	011b      	lsls	r3, r3, #4
 8008734:	4319      	orrs	r1, r3
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	3b01      	subs	r3, #1
 800873c:	021b      	lsls	r3, r3, #8
 800873e:	4319      	orrs	r1, r3
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	3b01      	subs	r3, #1
 8008746:	041b      	lsls	r3, r3, #16
 8008748:	4319      	orrs	r1, r3
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	699b      	ldr	r3, [r3, #24]
 800874e:	3b01      	subs	r3, #1
 8008750:	061b      	lsls	r3, r3, #24
 8008752:	430b      	orrs	r3, r1
 8008754:	431a      	orrs	r2, r3
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3714      	adds	r7, #20
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008774:	2300      	movs	r3, #0
 8008776:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	0d9b      	lsrs	r3, r3, #22
 800877e:	059b      	lsls	r3, r3, #22
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	6811      	ldr	r1, [r2, #0]
 8008784:	68ba      	ldr	r2, [r7, #8]
 8008786:	6852      	ldr	r2, [r2, #4]
 8008788:	4311      	orrs	r1, r2
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	6892      	ldr	r2, [r2, #8]
 800878e:	3a01      	subs	r2, #1
 8008790:	0152      	lsls	r2, r2, #5
 8008792:	4311      	orrs	r1, r2
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	68d2      	ldr	r2, [r2, #12]
 8008798:	0252      	lsls	r2, r2, #9
 800879a:	430a      	orrs	r2, r1
 800879c:	431a      	orrs	r2, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80087a2:	f7fc f9cd 	bl	8004b40 <HAL_GetTick>
 80087a6:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80087a8:	e010      	b.n	80087cc <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b0:	d00c      	beq.n	80087cc <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d007      	beq.n	80087c8 <FMC_SDRAM_SendCommand+0x60>
 80087b8:	f7fc f9c2 	bl	8004b40 <HAL_GetTick>
 80087bc:	4602      	mov	r2, r0
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d201      	bcs.n	80087cc <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80087c8:	2303      	movs	r3, #3
 80087ca:	e006      	b.n	80087da <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	f003 0320 	and.w	r3, r3, #32
 80087d4:	2b20      	cmp	r3, #32
 80087d6:	d0e8      	beq.n	80087aa <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3718      	adds	r7, #24
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b083      	sub	sp, #12
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80087f4:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 80087f8:	683a      	ldr	r2, [r7, #0]
 80087fa:	0052      	lsls	r2, r2, #1
 80087fc:	431a      	orrs	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <__NVIC_SetPriority>:
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	4603      	mov	r3, r0
 8008818:	6039      	str	r1, [r7, #0]
 800881a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800881c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008820:	2b00      	cmp	r3, #0
 8008822:	db0a      	blt.n	800883a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	b2da      	uxtb	r2, r3
 8008828:	490c      	ldr	r1, [pc, #48]	@ (800885c <__NVIC_SetPriority+0x4c>)
 800882a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800882e:	0112      	lsls	r2, r2, #4
 8008830:	b2d2      	uxtb	r2, r2
 8008832:	440b      	add	r3, r1
 8008834:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008838:	e00a      	b.n	8008850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	b2da      	uxtb	r2, r3
 800883e:	4908      	ldr	r1, [pc, #32]	@ (8008860 <__NVIC_SetPriority+0x50>)
 8008840:	79fb      	ldrb	r3, [r7, #7]
 8008842:	f003 030f 	and.w	r3, r3, #15
 8008846:	3b04      	subs	r3, #4
 8008848:	0112      	lsls	r2, r2, #4
 800884a:	b2d2      	uxtb	r2, r2
 800884c:	440b      	add	r3, r1
 800884e:	761a      	strb	r2, [r3, #24]
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr
 800885c:	e000e100 	.word	0xe000e100
 8008860:	e000ed00 	.word	0xe000ed00

08008864 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008864:	b580      	push	{r7, lr}
 8008866:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008868:	4b05      	ldr	r3, [pc, #20]	@ (8008880 <SysTick_Handler+0x1c>)
 800886a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800886c:	f002 fcc4 	bl	800b1f8 <xTaskGetSchedulerState>
 8008870:	4603      	mov	r3, r0
 8008872:	2b01      	cmp	r3, #1
 8008874:	d001      	beq.n	800887a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008876:	f000 feaf 	bl	80095d8 <xPortSysTickHandler>
  }
}
 800887a:	bf00      	nop
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	e000e010 	.word	0xe000e010

08008884 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008884:	b580      	push	{r7, lr}
 8008886:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008888:	2100      	movs	r1, #0
 800888a:	f06f 0004 	mvn.w	r0, #4
 800888e:	f7ff ffbf 	bl	8008810 <__NVIC_SetPriority>
#endif
}
 8008892:	bf00      	nop
 8008894:	bd80      	pop	{r7, pc}
	...

08008898 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800889e:	f3ef 8305 	mrs	r3, IPSR
 80088a2:	603b      	str	r3, [r7, #0]
  return(result);
 80088a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d003      	beq.n	80088b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80088aa:	f06f 0305 	mvn.w	r3, #5
 80088ae:	607b      	str	r3, [r7, #4]
 80088b0:	e00c      	b.n	80088cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80088b2:	4b0a      	ldr	r3, [pc, #40]	@ (80088dc <osKernelInitialize+0x44>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d105      	bne.n	80088c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80088ba:	4b08      	ldr	r3, [pc, #32]	@ (80088dc <osKernelInitialize+0x44>)
 80088bc:	2201      	movs	r2, #1
 80088be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	607b      	str	r3, [r7, #4]
 80088c4:	e002      	b.n	80088cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80088c6:	f04f 33ff 	mov.w	r3, #4294967295
 80088ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80088cc:	687b      	ldr	r3, [r7, #4]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	370c      	adds	r7, #12
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	200011a8 	.word	0x200011a8

080088e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088e6:	f3ef 8305 	mrs	r3, IPSR
 80088ea:	603b      	str	r3, [r7, #0]
  return(result);
 80088ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d003      	beq.n	80088fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80088f2:	f06f 0305 	mvn.w	r3, #5
 80088f6:	607b      	str	r3, [r7, #4]
 80088f8:	e010      	b.n	800891c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80088fa:	4b0b      	ldr	r3, [pc, #44]	@ (8008928 <osKernelStart+0x48>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d109      	bne.n	8008916 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008902:	f7ff ffbf 	bl	8008884 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008906:	4b08      	ldr	r3, [pc, #32]	@ (8008928 <osKernelStart+0x48>)
 8008908:	2202      	movs	r2, #2
 800890a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800890c:	f002 f800 	bl	800a910 <vTaskStartScheduler>
      stat = osOK;
 8008910:	2300      	movs	r3, #0
 8008912:	607b      	str	r3, [r7, #4]
 8008914:	e002      	b.n	800891c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008916:	f04f 33ff 	mov.w	r3, #4294967295
 800891a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800891c:	687b      	ldr	r3, [r7, #4]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3708      	adds	r7, #8
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	200011a8 	.word	0x200011a8

0800892c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800892c:	b580      	push	{r7, lr}
 800892e:	b08e      	sub	sp, #56	@ 0x38
 8008930:	af04      	add	r7, sp, #16
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008938:	2300      	movs	r3, #0
 800893a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800893c:	f3ef 8305 	mrs	r3, IPSR
 8008940:	617b      	str	r3, [r7, #20]
  return(result);
 8008942:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008944:	2b00      	cmp	r3, #0
 8008946:	d17e      	bne.n	8008a46 <osThreadNew+0x11a>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d07b      	beq.n	8008a46 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800894e:	2380      	movs	r3, #128	@ 0x80
 8008950:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008952:	2318      	movs	r3, #24
 8008954:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008956:	2300      	movs	r3, #0
 8008958:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800895a:	f04f 33ff 	mov.w	r3, #4294967295
 800895e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d045      	beq.n	80089f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d002      	beq.n	8008974 <osThreadNew+0x48>
        name = attr->name;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	699b      	ldr	r3, [r3, #24]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d002      	beq.n	8008982 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	699b      	ldr	r3, [r3, #24]
 8008980:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d008      	beq.n	800899a <osThreadNew+0x6e>
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	2b38      	cmp	r3, #56	@ 0x38
 800898c:	d805      	bhi.n	800899a <osThreadNew+0x6e>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	f003 0301 	and.w	r3, r3, #1
 8008996:	2b00      	cmp	r3, #0
 8008998:	d001      	beq.n	800899e <osThreadNew+0x72>
        return (NULL);
 800899a:	2300      	movs	r3, #0
 800899c:	e054      	b.n	8008a48 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	695b      	ldr	r3, [r3, #20]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d003      	beq.n	80089ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	089b      	lsrs	r3, r3, #2
 80089ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00e      	beq.n	80089d4 <osThreadNew+0xa8>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	2ba7      	cmp	r3, #167	@ 0xa7
 80089bc:	d90a      	bls.n	80089d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d006      	beq.n	80089d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d002      	beq.n	80089d4 <osThreadNew+0xa8>
        mem = 1;
 80089ce:	2301      	movs	r3, #1
 80089d0:	61bb      	str	r3, [r7, #24]
 80089d2:	e010      	b.n	80089f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d10c      	bne.n	80089f6 <osThreadNew+0xca>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d108      	bne.n	80089f6 <osThreadNew+0xca>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d104      	bne.n	80089f6 <osThreadNew+0xca>
          mem = 0;
 80089ec:	2300      	movs	r3, #0
 80089ee:	61bb      	str	r3, [r7, #24]
 80089f0:	e001      	b.n	80089f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80089f2:	2300      	movs	r3, #0
 80089f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d110      	bne.n	8008a1e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a04:	9202      	str	r2, [sp, #8]
 8008a06:	9301      	str	r3, [sp, #4]
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	6a3a      	ldr	r2, [r7, #32]
 8008a10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f001 fd88 	bl	800a528 <xTaskCreateStatic>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	613b      	str	r3, [r7, #16]
 8008a1c:	e013      	b.n	8008a46 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d110      	bne.n	8008a46 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008a24:	6a3b      	ldr	r3, [r7, #32]
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	f107 0310 	add.w	r3, r7, #16
 8008a2c:	9301      	str	r3, [sp, #4]
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f001 fdd6 	bl	800a5e8 <xTaskCreate>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d001      	beq.n	8008a46 <osThreadNew+0x11a>
            hTask = NULL;
 8008a42:	2300      	movs	r3, #0
 8008a44:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008a46:	693b      	ldr	r3, [r7, #16]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3728      	adds	r7, #40	@ 0x28
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a58:	f3ef 8305 	mrs	r3, IPSR
 8008a5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a5e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d003      	beq.n	8008a6c <osDelay+0x1c>
    stat = osErrorISR;
 8008a64:	f06f 0305 	mvn.w	r3, #5
 8008a68:	60fb      	str	r3, [r7, #12]
 8008a6a:	e007      	b.n	8008a7c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d002      	beq.n	8008a7c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f001 ff14 	bl	800a8a4 <vTaskDelay>
    }
  }

  return (stat);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b088      	sub	sp, #32
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a92:	f3ef 8305 	mrs	r3, IPSR
 8008a96:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a98:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d174      	bne.n	8008b88 <osMutexNew+0x102>
    if (attr != NULL) {
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d003      	beq.n	8008aac <osMutexNew+0x26>
      type = attr->attr_bits;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	61bb      	str	r3, [r7, #24]
 8008aaa:	e001      	b.n	8008ab0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008aac:	2300      	movs	r3, #0
 8008aae:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	f003 0301 	and.w	r3, r3, #1
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d002      	beq.n	8008ac0 <osMutexNew+0x3a>
      rmtx = 1U;
 8008aba:	2301      	movs	r3, #1
 8008abc:	617b      	str	r3, [r7, #20]
 8008abe:	e001      	b.n	8008ac4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	f003 0308 	and.w	r3, r3, #8
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d15c      	bne.n	8008b88 <osMutexNew+0x102>
      mem = -1;
 8008ace:	f04f 33ff 	mov.w	r3, #4294967295
 8008ad2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d015      	beq.n	8008b06 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d006      	beq.n	8008af0 <osMutexNew+0x6a>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	2b4f      	cmp	r3, #79	@ 0x4f
 8008ae8:	d902      	bls.n	8008af0 <osMutexNew+0x6a>
          mem = 1;
 8008aea:	2301      	movs	r3, #1
 8008aec:	613b      	str	r3, [r7, #16]
 8008aee:	e00c      	b.n	8008b0a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d108      	bne.n	8008b0a <osMutexNew+0x84>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d104      	bne.n	8008b0a <osMutexNew+0x84>
            mem = 0;
 8008b00:	2300      	movs	r3, #0
 8008b02:	613b      	str	r3, [r7, #16]
 8008b04:	e001      	b.n	8008b0a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008b06:	2300      	movs	r3, #0
 8008b08:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d112      	bne.n	8008b36 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d007      	beq.n	8008b26 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	2004      	movs	r0, #4
 8008b1e:	f000 ff64 	bl	80099ea <xQueueCreateMutexStatic>
 8008b22:	61f8      	str	r0, [r7, #28]
 8008b24:	e016      	b.n	8008b54 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	2001      	movs	r0, #1
 8008b2e:	f000 ff5c 	bl	80099ea <xQueueCreateMutexStatic>
 8008b32:	61f8      	str	r0, [r7, #28]
 8008b34:	e00e      	b.n	8008b54 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d10b      	bne.n	8008b54 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d004      	beq.n	8008b4c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008b42:	2004      	movs	r0, #4
 8008b44:	f000 ff39 	bl	80099ba <xQueueCreateMutex>
 8008b48:	61f8      	str	r0, [r7, #28]
 8008b4a:	e003      	b.n	8008b54 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008b4c:	2001      	movs	r0, #1
 8008b4e:	f000 ff34 	bl	80099ba <xQueueCreateMutex>
 8008b52:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00c      	beq.n	8008b74 <osMutexNew+0xee>
        if (attr != NULL) {
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d003      	beq.n	8008b68 <osMutexNew+0xe2>
          name = attr->name;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	60fb      	str	r3, [r7, #12]
 8008b66:	e001      	b.n	8008b6c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008b6c:	68f9      	ldr	r1, [r7, #12]
 8008b6e:	69f8      	ldr	r0, [r7, #28]
 8008b70:	f001 fc7c 	bl	800a46c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d006      	beq.n	8008b88 <osMutexNew+0x102>
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d003      	beq.n	8008b88 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	f043 0301 	orr.w	r3, r3, #1
 8008b86:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008b88:	69fb      	ldr	r3, [r7, #28]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3720      	adds	r7, #32
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b086      	sub	sp, #24
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f023 0301 	bic.w	r3, r3, #1
 8008ba2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f003 0301 	and.w	r3, r3, #1
 8008baa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008bac:	2300      	movs	r3, #0
 8008bae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bb0:	f3ef 8305 	mrs	r3, IPSR
 8008bb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8008bb6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d003      	beq.n	8008bc4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008bbc:	f06f 0305 	mvn.w	r3, #5
 8008bc0:	617b      	str	r3, [r7, #20]
 8008bc2:	e02c      	b.n	8008c1e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d103      	bne.n	8008bd2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008bca:	f06f 0303 	mvn.w	r3, #3
 8008bce:	617b      	str	r3, [r7, #20]
 8008bd0:	e025      	b.n	8008c1e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d011      	beq.n	8008bfc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008bd8:	6839      	ldr	r1, [r7, #0]
 8008bda:	6938      	ldr	r0, [r7, #16]
 8008bdc:	f000 ff55 	bl	8009a8a <xQueueTakeMutexRecursive>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d01b      	beq.n	8008c1e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d003      	beq.n	8008bf4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008bec:	f06f 0301 	mvn.w	r3, #1
 8008bf0:	617b      	str	r3, [r7, #20]
 8008bf2:	e014      	b.n	8008c1e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008bf4:	f06f 0302 	mvn.w	r3, #2
 8008bf8:	617b      	str	r3, [r7, #20]
 8008bfa:	e010      	b.n	8008c1e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008bfc:	6839      	ldr	r1, [r7, #0]
 8008bfe:	6938      	ldr	r0, [r7, #16]
 8008c00:	f001 f9fc 	bl	8009ffc <xQueueSemaphoreTake>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d009      	beq.n	8008c1e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d003      	beq.n	8008c18 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008c10:	f06f 0301 	mvn.w	r3, #1
 8008c14:	617b      	str	r3, [r7, #20]
 8008c16:	e002      	b.n	8008c1e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008c18:	f06f 0302 	mvn.w	r3, #2
 8008c1c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008c1e:	697b      	ldr	r3, [r7, #20]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3718      	adds	r7, #24
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b086      	sub	sp, #24
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f023 0301 	bic.w	r3, r3, #1
 8008c36:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f003 0301 	and.w	r3, r3, #1
 8008c3e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c44:	f3ef 8305 	mrs	r3, IPSR
 8008c48:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c4a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d003      	beq.n	8008c58 <osMutexRelease+0x30>
    stat = osErrorISR;
 8008c50:	f06f 0305 	mvn.w	r3, #5
 8008c54:	617b      	str	r3, [r7, #20]
 8008c56:	e01f      	b.n	8008c98 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d103      	bne.n	8008c66 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008c5e:	f06f 0303 	mvn.w	r3, #3
 8008c62:	617b      	str	r3, [r7, #20]
 8008c64:	e018      	b.n	8008c98 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d009      	beq.n	8008c80 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008c6c:	6938      	ldr	r0, [r7, #16]
 8008c6e:	f000 fed7 	bl	8009a20 <xQueueGiveMutexRecursive>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d00f      	beq.n	8008c98 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008c78:	f06f 0302 	mvn.w	r3, #2
 8008c7c:	617b      	str	r3, [r7, #20]
 8008c7e:	e00b      	b.n	8008c98 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008c80:	2300      	movs	r3, #0
 8008c82:	2200      	movs	r2, #0
 8008c84:	2100      	movs	r1, #0
 8008c86:	6938      	ldr	r0, [r7, #16]
 8008c88:	f000 ff36 	bl	8009af8 <xQueueGenericSend>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d002      	beq.n	8008c98 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008c92:	f06f 0302 	mvn.w	r3, #2
 8008c96:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008c98:	697b      	ldr	r3, [r7, #20]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3718      	adds	r7, #24
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
	...

08008ca4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4a07      	ldr	r2, [pc, #28]	@ (8008cd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008cb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	4a06      	ldr	r2, [pc, #24]	@ (8008cd4 <vApplicationGetIdleTaskMemory+0x30>)
 8008cba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2280      	movs	r2, #128	@ 0x80
 8008cc0:	601a      	str	r2, [r3, #0]
}
 8008cc2:	bf00      	nop
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	200011ac 	.word	0x200011ac
 8008cd4:	20001254 	.word	0x20001254

08008cd8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008cd8:	b480      	push	{r7}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	4a07      	ldr	r2, [pc, #28]	@ (8008d04 <vApplicationGetTimerTaskMemory+0x2c>)
 8008ce8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	4a06      	ldr	r2, [pc, #24]	@ (8008d08 <vApplicationGetTimerTaskMemory+0x30>)
 8008cee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008cf6:	601a      	str	r2, [r3, #0]
}
 8008cf8:	bf00      	nop
 8008cfa:	3714      	adds	r7, #20
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr
 8008d04:	20001454 	.word	0x20001454
 8008d08:	200014fc 	.word	0x200014fc

08008d0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b08a      	sub	sp, #40	@ 0x28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d14:	2300      	movs	r3, #0
 8008d16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d18:	f001 fe6a 	bl	800a9f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d1c:	4b5c      	ldr	r3, [pc, #368]	@ (8008e90 <pvPortMalloc+0x184>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d24:	f000 f924 	bl	8008f70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d28:	4b5a      	ldr	r3, [pc, #360]	@ (8008e94 <pvPortMalloc+0x188>)
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4013      	ands	r3, r2
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f040 8095 	bne.w	8008e60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d01e      	beq.n	8008d7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008d3c:	2208      	movs	r2, #8
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4413      	add	r3, r2
 8008d42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f003 0307 	and.w	r3, r3, #7
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d015      	beq.n	8008d7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f023 0307 	bic.w	r3, r3, #7
 8008d54:	3308      	adds	r3, #8
 8008d56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f003 0307 	and.w	r3, r3, #7
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00b      	beq.n	8008d7a <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d66:	f383 8811 	msr	BASEPRI, r3
 8008d6a:	f3bf 8f6f 	isb	sy
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008d74:	bf00      	nop
 8008d76:	bf00      	nop
 8008d78:	e7fd      	b.n	8008d76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d06f      	beq.n	8008e60 <pvPortMalloc+0x154>
 8008d80:	4b45      	ldr	r3, [pc, #276]	@ (8008e98 <pvPortMalloc+0x18c>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d86a      	bhi.n	8008e60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d8a:	4b44      	ldr	r3, [pc, #272]	@ (8008e9c <pvPortMalloc+0x190>)
 8008d8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d8e:	4b43      	ldr	r3, [pc, #268]	@ (8008e9c <pvPortMalloc+0x190>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d94:	e004      	b.n	8008da0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d903      	bls.n	8008db2 <pvPortMalloc+0xa6>
 8008daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1f1      	bne.n	8008d96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008db2:	4b37      	ldr	r3, [pc, #220]	@ (8008e90 <pvPortMalloc+0x184>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d051      	beq.n	8008e60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008dbc:	6a3b      	ldr	r3, [r7, #32]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2208      	movs	r2, #8
 8008dc2:	4413      	add	r3, r2
 8008dc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	6a3b      	ldr	r3, [r7, #32]
 8008dcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	1ad2      	subs	r2, r2, r3
 8008dd6:	2308      	movs	r3, #8
 8008dd8:	005b      	lsls	r3, r3, #1
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d920      	bls.n	8008e20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4413      	add	r3, r2
 8008de4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	f003 0307 	and.w	r3, r3, #7
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00b      	beq.n	8008e08 <pvPortMalloc+0xfc>
	__asm volatile
 8008df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	613b      	str	r3, [r7, #16]
}
 8008e02:	bf00      	nop
 8008e04:	bf00      	nop
 8008e06:	e7fd      	b.n	8008e04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e0a:	685a      	ldr	r2, [r3, #4]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	1ad2      	subs	r2, r2, r3
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e1a:	69b8      	ldr	r0, [r7, #24]
 8008e1c:	f000 f90a 	bl	8009034 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e20:	4b1d      	ldr	r3, [pc, #116]	@ (8008e98 <pvPortMalloc+0x18c>)
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8008e98 <pvPortMalloc+0x18c>)
 8008e2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8008e98 <pvPortMalloc+0x18c>)
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	4b1b      	ldr	r3, [pc, #108]	@ (8008ea0 <pvPortMalloc+0x194>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d203      	bcs.n	8008e42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e3a:	4b17      	ldr	r3, [pc, #92]	@ (8008e98 <pvPortMalloc+0x18c>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a18      	ldr	r2, [pc, #96]	@ (8008ea0 <pvPortMalloc+0x194>)
 8008e40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	4b13      	ldr	r3, [pc, #76]	@ (8008e94 <pvPortMalloc+0x188>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	431a      	orrs	r2, r3
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e52:	2200      	movs	r2, #0
 8008e54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008e56:	4b13      	ldr	r3, [pc, #76]	@ (8008ea4 <pvPortMalloc+0x198>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	4a11      	ldr	r2, [pc, #68]	@ (8008ea4 <pvPortMalloc+0x198>)
 8008e5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e60:	f001 fdd4 	bl	800aa0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	f003 0307 	and.w	r3, r3, #7
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00b      	beq.n	8008e86 <pvPortMalloc+0x17a>
	__asm volatile
 8008e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e72:	f383 8811 	msr	BASEPRI, r3
 8008e76:	f3bf 8f6f 	isb	sy
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	60fb      	str	r3, [r7, #12]
}
 8008e80:	bf00      	nop
 8008e82:	bf00      	nop
 8008e84:	e7fd      	b.n	8008e82 <pvPortMalloc+0x176>
	return pvReturn;
 8008e86:	69fb      	ldr	r3, [r7, #28]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3728      	adds	r7, #40	@ 0x28
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	20005504 	.word	0x20005504
 8008e94:	20005518 	.word	0x20005518
 8008e98:	20005508 	.word	0x20005508
 8008e9c:	200054fc 	.word	0x200054fc
 8008ea0:	2000550c 	.word	0x2000550c
 8008ea4:	20005510 	.word	0x20005510

08008ea8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d04f      	beq.n	8008f5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008eba:	2308      	movs	r3, #8
 8008ebc:	425b      	negs	r3, r3
 8008ebe:	697a      	ldr	r2, [r7, #20]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	685a      	ldr	r2, [r3, #4]
 8008ecc:	4b25      	ldr	r3, [pc, #148]	@ (8008f64 <vPortFree+0xbc>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d10b      	bne.n	8008eee <vPortFree+0x46>
	__asm volatile
 8008ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eda:	f383 8811 	msr	BASEPRI, r3
 8008ede:	f3bf 8f6f 	isb	sy
 8008ee2:	f3bf 8f4f 	dsb	sy
 8008ee6:	60fb      	str	r3, [r7, #12]
}
 8008ee8:	bf00      	nop
 8008eea:	bf00      	nop
 8008eec:	e7fd      	b.n	8008eea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00b      	beq.n	8008f0e <vPortFree+0x66>
	__asm volatile
 8008ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008efa:	f383 8811 	msr	BASEPRI, r3
 8008efe:	f3bf 8f6f 	isb	sy
 8008f02:	f3bf 8f4f 	dsb	sy
 8008f06:	60bb      	str	r3, [r7, #8]
}
 8008f08:	bf00      	nop
 8008f0a:	bf00      	nop
 8008f0c:	e7fd      	b.n	8008f0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	685a      	ldr	r2, [r3, #4]
 8008f12:	4b14      	ldr	r3, [pc, #80]	@ (8008f64 <vPortFree+0xbc>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4013      	ands	r3, r2
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d01e      	beq.n	8008f5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d11a      	bne.n	8008f5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	685a      	ldr	r2, [r3, #4]
 8008f28:	4b0e      	ldr	r3, [pc, #56]	@ (8008f64 <vPortFree+0xbc>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	43db      	mvns	r3, r3
 8008f2e:	401a      	ands	r2, r3
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f34:	f001 fd5c 	bl	800a9f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	685a      	ldr	r2, [r3, #4]
 8008f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8008f68 <vPortFree+0xc0>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4413      	add	r3, r2
 8008f42:	4a09      	ldr	r2, [pc, #36]	@ (8008f68 <vPortFree+0xc0>)
 8008f44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f46:	6938      	ldr	r0, [r7, #16]
 8008f48:	f000 f874 	bl	8009034 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008f4c:	4b07      	ldr	r3, [pc, #28]	@ (8008f6c <vPortFree+0xc4>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	3301      	adds	r3, #1
 8008f52:	4a06      	ldr	r2, [pc, #24]	@ (8008f6c <vPortFree+0xc4>)
 8008f54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008f56:	f001 fd59 	bl	800aa0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f5a:	bf00      	nop
 8008f5c:	3718      	adds	r7, #24
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	20005518 	.word	0x20005518
 8008f68:	20005508 	.word	0x20005508
 8008f6c:	20005514 	.word	0x20005514

08008f70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f70:	b480      	push	{r7}
 8008f72:	b085      	sub	sp, #20
 8008f74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f76:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008f7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f7c:	4b27      	ldr	r3, [pc, #156]	@ (800901c <prvHeapInit+0xac>)
 8008f7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f003 0307 	and.w	r3, r3, #7
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00c      	beq.n	8008fa4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	3307      	adds	r3, #7
 8008f8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f023 0307 	bic.w	r3, r3, #7
 8008f96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	4a1f      	ldr	r2, [pc, #124]	@ (800901c <prvHeapInit+0xac>)
 8008fa0:	4413      	add	r3, r2
 8008fa2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8009020 <prvHeapInit+0xb0>)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008fae:	4b1c      	ldr	r3, [pc, #112]	@ (8009020 <prvHeapInit+0xb0>)
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	4413      	add	r3, r2
 8008fba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008fbc:	2208      	movs	r2, #8
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	1a9b      	subs	r3, r3, r2
 8008fc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f023 0307 	bic.w	r3, r3, #7
 8008fca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	4a15      	ldr	r2, [pc, #84]	@ (8009024 <prvHeapInit+0xb4>)
 8008fd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008fd2:	4b14      	ldr	r3, [pc, #80]	@ (8009024 <prvHeapInit+0xb4>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008fda:	4b12      	ldr	r3, [pc, #72]	@ (8009024 <prvHeapInit+0xb4>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	1ad2      	subs	r2, r2, r3
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8009024 <prvHeapInit+0xb4>)
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8009028 <prvHeapInit+0xb8>)
 8008ffe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	4a09      	ldr	r2, [pc, #36]	@ (800902c <prvHeapInit+0xbc>)
 8009006:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009008:	4b09      	ldr	r3, [pc, #36]	@ (8009030 <prvHeapInit+0xc0>)
 800900a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800900e:	601a      	str	r2, [r3, #0]
}
 8009010:	bf00      	nop
 8009012:	3714      	adds	r7, #20
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr
 800901c:	200018fc 	.word	0x200018fc
 8009020:	200054fc 	.word	0x200054fc
 8009024:	20005504 	.word	0x20005504
 8009028:	2000550c 	.word	0x2000550c
 800902c:	20005508 	.word	0x20005508
 8009030:	20005518 	.word	0x20005518

08009034 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800903c:	4b28      	ldr	r3, [pc, #160]	@ (80090e0 <prvInsertBlockIntoFreeList+0xac>)
 800903e:	60fb      	str	r3, [r7, #12]
 8009040:	e002      	b.n	8009048 <prvInsertBlockIntoFreeList+0x14>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	60fb      	str	r3, [r7, #12]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	429a      	cmp	r2, r3
 8009050:	d8f7      	bhi.n	8009042 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	4413      	add	r3, r2
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	429a      	cmp	r2, r3
 8009062:	d108      	bne.n	8009076 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	685a      	ldr	r2, [r3, #4]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	441a      	add	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	68ba      	ldr	r2, [r7, #8]
 8009080:	441a      	add	r2, r3
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	429a      	cmp	r2, r3
 8009088:	d118      	bne.n	80090bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	4b15      	ldr	r3, [pc, #84]	@ (80090e4 <prvInsertBlockIntoFreeList+0xb0>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	429a      	cmp	r2, r3
 8009094:	d00d      	beq.n	80090b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	685a      	ldr	r2, [r3, #4]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	441a      	add	r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	601a      	str	r2, [r3, #0]
 80090b0:	e008      	b.n	80090c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80090b2:	4b0c      	ldr	r3, [pc, #48]	@ (80090e4 <prvInsertBlockIntoFreeList+0xb0>)
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	601a      	str	r2, [r3, #0]
 80090ba:	e003      	b.n	80090c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d002      	beq.n	80090d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090d2:	bf00      	nop
 80090d4:	3714      	adds	r7, #20
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop
 80090e0:	200054fc 	.word	0x200054fc
 80090e4:	20005504 	.word	0x20005504

080090e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f103 0208 	add.w	r2, r3, #8
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009100:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f103 0208 	add.w	r2, r3, #8
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f103 0208 	add.w	r2, r3, #8
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800911c:	bf00      	nop
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009136:	bf00      	nop
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr

08009142 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009142:	b480      	push	{r7}
 8009144:	b085      	sub	sp, #20
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
 800914a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	689a      	ldr	r2, [r3, #8]
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	683a      	ldr	r2, [r7, #0]
 8009166:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	1c5a      	adds	r2, r3, #1
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	601a      	str	r2, [r3, #0]
}
 800917e:	bf00      	nop
 8009180:	3714      	adds	r7, #20
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800918a:	b480      	push	{r7}
 800918c:	b085      	sub	sp, #20
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a0:	d103      	bne.n	80091aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	60fb      	str	r3, [r7, #12]
 80091a8:	e00c      	b.n	80091c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	3308      	adds	r3, #8
 80091ae:	60fb      	str	r3, [r7, #12]
 80091b0:	e002      	b.n	80091b8 <vListInsert+0x2e>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	60fb      	str	r3, [r7, #12]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68ba      	ldr	r2, [r7, #8]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d2f6      	bcs.n	80091b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	685a      	ldr	r2, [r3, #4]
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	683a      	ldr	r2, [r7, #0]
 80091d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	683a      	ldr	r2, [r7, #0]
 80091de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	1c5a      	adds	r2, r3, #1
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	601a      	str	r2, [r3, #0]
}
 80091f0:	bf00      	nop
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80091fc:	b480      	push	{r7}
 80091fe:	b085      	sub	sp, #20
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	691b      	ldr	r3, [r3, #16]
 8009208:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	6892      	ldr	r2, [r2, #8]
 8009212:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	6852      	ldr	r2, [r2, #4]
 800921c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	429a      	cmp	r2, r3
 8009226:	d103      	bne.n	8009230 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	689a      	ldr	r2, [r3, #8]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	1e5a      	subs	r2, r3, #1
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
}
 8009244:	4618      	mov	r0, r3
 8009246:	3714      	adds	r7, #20
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009250:	b480      	push	{r7}
 8009252:	b085      	sub	sp, #20
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	3b04      	subs	r3, #4
 8009260:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009268:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	3b04      	subs	r3, #4
 800926e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	f023 0201 	bic.w	r2, r3, #1
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	3b04      	subs	r3, #4
 800927e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009280:	4a0c      	ldr	r2, [pc, #48]	@ (80092b4 <pxPortInitialiseStack+0x64>)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	3b14      	subs	r3, #20
 800928a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	3b04      	subs	r3, #4
 8009296:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f06f 0202 	mvn.w	r2, #2
 800929e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	3b20      	subs	r3, #32
 80092a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80092a6:	68fb      	ldr	r3, [r7, #12]
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3714      	adds	r7, #20
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr
 80092b4:	080092b9 	.word	0x080092b9

080092b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80092b8:	b480      	push	{r7}
 80092ba:	b085      	sub	sp, #20
 80092bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80092be:	2300      	movs	r3, #0
 80092c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80092c2:	4b13      	ldr	r3, [pc, #76]	@ (8009310 <prvTaskExitError+0x58>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ca:	d00b      	beq.n	80092e4 <prvTaskExitError+0x2c>
	__asm volatile
 80092cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d0:	f383 8811 	msr	BASEPRI, r3
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	60fb      	str	r3, [r7, #12]
}
 80092de:	bf00      	nop
 80092e0:	bf00      	nop
 80092e2:	e7fd      	b.n	80092e0 <prvTaskExitError+0x28>
	__asm volatile
 80092e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e8:	f383 8811 	msr	BASEPRI, r3
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	f3bf 8f4f 	dsb	sy
 80092f4:	60bb      	str	r3, [r7, #8]
}
 80092f6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80092f8:	bf00      	nop
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d0fc      	beq.n	80092fa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009300:	bf00      	nop
 8009302:	bf00      	nop
 8009304:	3714      	adds	r7, #20
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	20000108 	.word	0x20000108
	...

08009320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009320:	4b07      	ldr	r3, [pc, #28]	@ (8009340 <pxCurrentTCBConst2>)
 8009322:	6819      	ldr	r1, [r3, #0]
 8009324:	6808      	ldr	r0, [r1, #0]
 8009326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800932a:	f380 8809 	msr	PSP, r0
 800932e:	f3bf 8f6f 	isb	sy
 8009332:	f04f 0000 	mov.w	r0, #0
 8009336:	f380 8811 	msr	BASEPRI, r0
 800933a:	4770      	bx	lr
 800933c:	f3af 8000 	nop.w

08009340 <pxCurrentTCBConst2>:
 8009340:	20005564 	.word	0x20005564
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009344:	bf00      	nop
 8009346:	bf00      	nop

08009348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009348:	4808      	ldr	r0, [pc, #32]	@ (800936c <prvPortStartFirstTask+0x24>)
 800934a:	6800      	ldr	r0, [r0, #0]
 800934c:	6800      	ldr	r0, [r0, #0]
 800934e:	f380 8808 	msr	MSP, r0
 8009352:	f04f 0000 	mov.w	r0, #0
 8009356:	f380 8814 	msr	CONTROL, r0
 800935a:	b662      	cpsie	i
 800935c:	b661      	cpsie	f
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	f3bf 8f6f 	isb	sy
 8009366:	df00      	svc	0
 8009368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800936a:	bf00      	nop
 800936c:	e000ed08 	.word	0xe000ed08

08009370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009376:	4b47      	ldr	r3, [pc, #284]	@ (8009494 <xPortStartScheduler+0x124>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a47      	ldr	r2, [pc, #284]	@ (8009498 <xPortStartScheduler+0x128>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d10b      	bne.n	8009398 <xPortStartScheduler+0x28>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	613b      	str	r3, [r7, #16]
}
 8009392:	bf00      	nop
 8009394:	bf00      	nop
 8009396:	e7fd      	b.n	8009394 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009398:	4b3e      	ldr	r3, [pc, #248]	@ (8009494 <xPortStartScheduler+0x124>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a3f      	ldr	r2, [pc, #252]	@ (800949c <xPortStartScheduler+0x12c>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d10b      	bne.n	80093ba <xPortStartScheduler+0x4a>
	__asm volatile
 80093a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093a6:	f383 8811 	msr	BASEPRI, r3
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	60fb      	str	r3, [r7, #12]
}
 80093b4:	bf00      	nop
 80093b6:	bf00      	nop
 80093b8:	e7fd      	b.n	80093b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80093ba:	4b39      	ldr	r3, [pc, #228]	@ (80094a0 <xPortStartScheduler+0x130>)
 80093bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	22ff      	movs	r2, #255	@ 0xff
 80093ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80093d4:	78fb      	ldrb	r3, [r7, #3]
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	4b31      	ldr	r3, [pc, #196]	@ (80094a4 <xPortStartScheduler+0x134>)
 80093e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80093e2:	4b31      	ldr	r3, [pc, #196]	@ (80094a8 <xPortStartScheduler+0x138>)
 80093e4:	2207      	movs	r2, #7
 80093e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093e8:	e009      	b.n	80093fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80093ea:	4b2f      	ldr	r3, [pc, #188]	@ (80094a8 <xPortStartScheduler+0x138>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	3b01      	subs	r3, #1
 80093f0:	4a2d      	ldr	r2, [pc, #180]	@ (80094a8 <xPortStartScheduler+0x138>)
 80093f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80093f4:	78fb      	ldrb	r3, [r7, #3]
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	005b      	lsls	r3, r3, #1
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093fe:	78fb      	ldrb	r3, [r7, #3]
 8009400:	b2db      	uxtb	r3, r3
 8009402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009406:	2b80      	cmp	r3, #128	@ 0x80
 8009408:	d0ef      	beq.n	80093ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800940a:	4b27      	ldr	r3, [pc, #156]	@ (80094a8 <xPortStartScheduler+0x138>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f1c3 0307 	rsb	r3, r3, #7
 8009412:	2b04      	cmp	r3, #4
 8009414:	d00b      	beq.n	800942e <xPortStartScheduler+0xbe>
	__asm volatile
 8009416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800941a:	f383 8811 	msr	BASEPRI, r3
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	60bb      	str	r3, [r7, #8]
}
 8009428:	bf00      	nop
 800942a:	bf00      	nop
 800942c:	e7fd      	b.n	800942a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800942e:	4b1e      	ldr	r3, [pc, #120]	@ (80094a8 <xPortStartScheduler+0x138>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	021b      	lsls	r3, r3, #8
 8009434:	4a1c      	ldr	r2, [pc, #112]	@ (80094a8 <xPortStartScheduler+0x138>)
 8009436:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009438:	4b1b      	ldr	r3, [pc, #108]	@ (80094a8 <xPortStartScheduler+0x138>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009440:	4a19      	ldr	r2, [pc, #100]	@ (80094a8 <xPortStartScheduler+0x138>)
 8009442:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	b2da      	uxtb	r2, r3
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800944c:	4b17      	ldr	r3, [pc, #92]	@ (80094ac <xPortStartScheduler+0x13c>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a16      	ldr	r2, [pc, #88]	@ (80094ac <xPortStartScheduler+0x13c>)
 8009452:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009456:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009458:	4b14      	ldr	r3, [pc, #80]	@ (80094ac <xPortStartScheduler+0x13c>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a13      	ldr	r2, [pc, #76]	@ (80094ac <xPortStartScheduler+0x13c>)
 800945e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009462:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009464:	f000 f8da 	bl	800961c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009468:	4b11      	ldr	r3, [pc, #68]	@ (80094b0 <xPortStartScheduler+0x140>)
 800946a:	2200      	movs	r2, #0
 800946c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800946e:	f000 f8f9 	bl	8009664 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009472:	4b10      	ldr	r3, [pc, #64]	@ (80094b4 <xPortStartScheduler+0x144>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a0f      	ldr	r2, [pc, #60]	@ (80094b4 <xPortStartScheduler+0x144>)
 8009478:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800947c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800947e:	f7ff ff63 	bl	8009348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009482:	f001 fc2b 	bl	800acdc <vTaskSwitchContext>
	prvTaskExitError();
 8009486:	f7ff ff17 	bl	80092b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3718      	adds	r7, #24
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	e000ed00 	.word	0xe000ed00
 8009498:	410fc271 	.word	0x410fc271
 800949c:	410fc270 	.word	0x410fc270
 80094a0:	e000e400 	.word	0xe000e400
 80094a4:	2000551c 	.word	0x2000551c
 80094a8:	20005520 	.word	0x20005520
 80094ac:	e000ed20 	.word	0xe000ed20
 80094b0:	20000108 	.word	0x20000108
 80094b4:	e000ef34 	.word	0xe000ef34

080094b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
	__asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	607b      	str	r3, [r7, #4]
}
 80094d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80094d2:	4b10      	ldr	r3, [pc, #64]	@ (8009514 <vPortEnterCritical+0x5c>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	3301      	adds	r3, #1
 80094d8:	4a0e      	ldr	r2, [pc, #56]	@ (8009514 <vPortEnterCritical+0x5c>)
 80094da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80094dc:	4b0d      	ldr	r3, [pc, #52]	@ (8009514 <vPortEnterCritical+0x5c>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d110      	bne.n	8009506 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80094e4:	4b0c      	ldr	r3, [pc, #48]	@ (8009518 <vPortEnterCritical+0x60>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00b      	beq.n	8009506 <vPortEnterCritical+0x4e>
	__asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	603b      	str	r3, [r7, #0]
}
 8009500:	bf00      	nop
 8009502:	bf00      	nop
 8009504:	e7fd      	b.n	8009502 <vPortEnterCritical+0x4a>
	}
}
 8009506:	bf00      	nop
 8009508:	370c      	adds	r7, #12
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	20000108 	.word	0x20000108
 8009518:	e000ed04 	.word	0xe000ed04

0800951c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009522:	4b12      	ldr	r3, [pc, #72]	@ (800956c <vPortExitCritical+0x50>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10b      	bne.n	8009542 <vPortExitCritical+0x26>
	__asm volatile
 800952a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800952e:	f383 8811 	msr	BASEPRI, r3
 8009532:	f3bf 8f6f 	isb	sy
 8009536:	f3bf 8f4f 	dsb	sy
 800953a:	607b      	str	r3, [r7, #4]
}
 800953c:	bf00      	nop
 800953e:	bf00      	nop
 8009540:	e7fd      	b.n	800953e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009542:	4b0a      	ldr	r3, [pc, #40]	@ (800956c <vPortExitCritical+0x50>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	3b01      	subs	r3, #1
 8009548:	4a08      	ldr	r2, [pc, #32]	@ (800956c <vPortExitCritical+0x50>)
 800954a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800954c:	4b07      	ldr	r3, [pc, #28]	@ (800956c <vPortExitCritical+0x50>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d105      	bne.n	8009560 <vPortExitCritical+0x44>
 8009554:	2300      	movs	r3, #0
 8009556:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800955e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr
 800956c:	20000108 	.word	0x20000108

08009570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009570:	f3ef 8009 	mrs	r0, PSP
 8009574:	f3bf 8f6f 	isb	sy
 8009578:	4b15      	ldr	r3, [pc, #84]	@ (80095d0 <pxCurrentTCBConst>)
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	f01e 0f10 	tst.w	lr, #16
 8009580:	bf08      	it	eq
 8009582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800958a:	6010      	str	r0, [r2, #0]
 800958c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009590:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009594:	f380 8811 	msr	BASEPRI, r0
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f001 fb9c 	bl	800acdc <vTaskSwitchContext>
 80095a4:	f04f 0000 	mov.w	r0, #0
 80095a8:	f380 8811 	msr	BASEPRI, r0
 80095ac:	bc09      	pop	{r0, r3}
 80095ae:	6819      	ldr	r1, [r3, #0]
 80095b0:	6808      	ldr	r0, [r1, #0]
 80095b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b6:	f01e 0f10 	tst.w	lr, #16
 80095ba:	bf08      	it	eq
 80095bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80095c0:	f380 8809 	msr	PSP, r0
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	f3af 8000 	nop.w

080095d0 <pxCurrentTCBConst>:
 80095d0:	20005564 	.word	0x20005564
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80095d4:	bf00      	nop
 80095d6:	bf00      	nop

080095d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
	__asm volatile
 80095de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095e2:	f383 8811 	msr	BASEPRI, r3
 80095e6:	f3bf 8f6f 	isb	sy
 80095ea:	f3bf 8f4f 	dsb	sy
 80095ee:	607b      	str	r3, [r7, #4]
}
 80095f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80095f2:	f001 fab9 	bl	800ab68 <xTaskIncrementTick>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d003      	beq.n	8009604 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80095fc:	4b06      	ldr	r3, [pc, #24]	@ (8009618 <xPortSysTickHandler+0x40>)
 80095fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009602:	601a      	str	r2, [r3, #0]
 8009604:	2300      	movs	r3, #0
 8009606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	f383 8811 	msr	BASEPRI, r3
}
 800960e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009610:	bf00      	nop
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	e000ed04 	.word	0xe000ed04

0800961c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800961c:	b480      	push	{r7}
 800961e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009620:	4b0b      	ldr	r3, [pc, #44]	@ (8009650 <vPortSetupTimerInterrupt+0x34>)
 8009622:	2200      	movs	r2, #0
 8009624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009626:	4b0b      	ldr	r3, [pc, #44]	@ (8009654 <vPortSetupTimerInterrupt+0x38>)
 8009628:	2200      	movs	r2, #0
 800962a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800962c:	4b0a      	ldr	r3, [pc, #40]	@ (8009658 <vPortSetupTimerInterrupt+0x3c>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a0a      	ldr	r2, [pc, #40]	@ (800965c <vPortSetupTimerInterrupt+0x40>)
 8009632:	fba2 2303 	umull	r2, r3, r2, r3
 8009636:	099b      	lsrs	r3, r3, #6
 8009638:	4a09      	ldr	r2, [pc, #36]	@ (8009660 <vPortSetupTimerInterrupt+0x44>)
 800963a:	3b01      	subs	r3, #1
 800963c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800963e:	4b04      	ldr	r3, [pc, #16]	@ (8009650 <vPortSetupTimerInterrupt+0x34>)
 8009640:	2207      	movs	r2, #7
 8009642:	601a      	str	r2, [r3, #0]
}
 8009644:	bf00      	nop
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop
 8009650:	e000e010 	.word	0xe000e010
 8009654:	e000e018 	.word	0xe000e018
 8009658:	20000030 	.word	0x20000030
 800965c:	10624dd3 	.word	0x10624dd3
 8009660:	e000e014 	.word	0xe000e014

08009664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009664:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009674 <vPortEnableVFP+0x10>
 8009668:	6801      	ldr	r1, [r0, #0]
 800966a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800966e:	6001      	str	r1, [r0, #0]
 8009670:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009672:	bf00      	nop
 8009674:	e000ed88 	.word	0xe000ed88

08009678 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800967e:	f3ef 8305 	mrs	r3, IPSR
 8009682:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2b0f      	cmp	r3, #15
 8009688:	d915      	bls.n	80096b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800968a:	4a18      	ldr	r2, [pc, #96]	@ (80096ec <vPortValidateInterruptPriority+0x74>)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	4413      	add	r3, r2
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009694:	4b16      	ldr	r3, [pc, #88]	@ (80096f0 <vPortValidateInterruptPriority+0x78>)
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	7afa      	ldrb	r2, [r7, #11]
 800969a:	429a      	cmp	r2, r3
 800969c:	d20b      	bcs.n	80096b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800969e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a2:	f383 8811 	msr	BASEPRI, r3
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	607b      	str	r3, [r7, #4]
}
 80096b0:	bf00      	nop
 80096b2:	bf00      	nop
 80096b4:	e7fd      	b.n	80096b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80096b6:	4b0f      	ldr	r3, [pc, #60]	@ (80096f4 <vPortValidateInterruptPriority+0x7c>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80096be:	4b0e      	ldr	r3, [pc, #56]	@ (80096f8 <vPortValidateInterruptPriority+0x80>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d90b      	bls.n	80096de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80096c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ca:	f383 8811 	msr	BASEPRI, r3
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f3bf 8f4f 	dsb	sy
 80096d6:	603b      	str	r3, [r7, #0]
}
 80096d8:	bf00      	nop
 80096da:	bf00      	nop
 80096dc:	e7fd      	b.n	80096da <vPortValidateInterruptPriority+0x62>
	}
 80096de:	bf00      	nop
 80096e0:	3714      	adds	r7, #20
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	e000e3f0 	.word	0xe000e3f0
 80096f0:	2000551c 	.word	0x2000551c
 80096f4:	e000ed0c 	.word	0xe000ed0c
 80096f8:	20005520 	.word	0x20005520

080096fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10b      	bne.n	8009728 <xQueueGenericReset+0x2c>
	__asm volatile
 8009710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009714:	f383 8811 	msr	BASEPRI, r3
 8009718:	f3bf 8f6f 	isb	sy
 800971c:	f3bf 8f4f 	dsb	sy
 8009720:	60bb      	str	r3, [r7, #8]
}
 8009722:	bf00      	nop
 8009724:	bf00      	nop
 8009726:	e7fd      	b.n	8009724 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009728:	f7ff fec6 	bl	80094b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009734:	68f9      	ldr	r1, [r7, #12]
 8009736:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009738:	fb01 f303 	mul.w	r3, r1, r3
 800973c:	441a      	add	r2, r3
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009758:	3b01      	subs	r3, #1
 800975a:	68f9      	ldr	r1, [r7, #12]
 800975c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800975e:	fb01 f303 	mul.w	r3, r1, r3
 8009762:	441a      	add	r2, r3
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	22ff      	movs	r2, #255	@ 0xff
 800976c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	22ff      	movs	r2, #255	@ 0xff
 8009774:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d114      	bne.n	80097a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d01a      	beq.n	80097bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	3310      	adds	r3, #16
 800978a:	4618      	mov	r0, r3
 800978c:	f001 fb5e 	bl	800ae4c <xTaskRemoveFromEventList>
 8009790:	4603      	mov	r3, r0
 8009792:	2b00      	cmp	r3, #0
 8009794:	d012      	beq.n	80097bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009796:	4b0d      	ldr	r3, [pc, #52]	@ (80097cc <xQueueGenericReset+0xd0>)
 8009798:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800979c:	601a      	str	r2, [r3, #0]
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	e009      	b.n	80097bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	3310      	adds	r3, #16
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7ff fc9b 	bl	80090e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	3324      	adds	r3, #36	@ 0x24
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7ff fc96 	bl	80090e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80097bc:	f7ff feae 	bl	800951c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80097c0:	2301      	movs	r3, #1
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	e000ed04 	.word	0xe000ed04

080097d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08e      	sub	sp, #56	@ 0x38
 80097d4:	af02      	add	r7, sp, #8
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
 80097dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10b      	bne.n	80097fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80097e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80097f6:	bf00      	nop
 80097f8:	bf00      	nop
 80097fa:	e7fd      	b.n	80097f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d10b      	bne.n	800981a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009806:	f383 8811 	msr	BASEPRI, r3
 800980a:	f3bf 8f6f 	isb	sy
 800980e:	f3bf 8f4f 	dsb	sy
 8009812:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009814:	bf00      	nop
 8009816:	bf00      	nop
 8009818:	e7fd      	b.n	8009816 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d002      	beq.n	8009826 <xQueueGenericCreateStatic+0x56>
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d001      	beq.n	800982a <xQueueGenericCreateStatic+0x5a>
 8009826:	2301      	movs	r3, #1
 8009828:	e000      	b.n	800982c <xQueueGenericCreateStatic+0x5c>
 800982a:	2300      	movs	r3, #0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d10b      	bne.n	8009848 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	623b      	str	r3, [r7, #32]
}
 8009842:	bf00      	nop
 8009844:	bf00      	nop
 8009846:	e7fd      	b.n	8009844 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d102      	bne.n	8009854 <xQueueGenericCreateStatic+0x84>
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d101      	bne.n	8009858 <xQueueGenericCreateStatic+0x88>
 8009854:	2301      	movs	r3, #1
 8009856:	e000      	b.n	800985a <xQueueGenericCreateStatic+0x8a>
 8009858:	2300      	movs	r3, #0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d10b      	bne.n	8009876 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800985e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009862:	f383 8811 	msr	BASEPRI, r3
 8009866:	f3bf 8f6f 	isb	sy
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	61fb      	str	r3, [r7, #28]
}
 8009870:	bf00      	nop
 8009872:	bf00      	nop
 8009874:	e7fd      	b.n	8009872 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009876:	2350      	movs	r3, #80	@ 0x50
 8009878:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	2b50      	cmp	r3, #80	@ 0x50
 800987e:	d00b      	beq.n	8009898 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	61bb      	str	r3, [r7, #24]
}
 8009892:	bf00      	nop
 8009894:	bf00      	nop
 8009896:	e7fd      	b.n	8009894 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009898:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800989e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00d      	beq.n	80098c0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80098a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a6:	2201      	movs	r2, #1
 80098a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80098ac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80098b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	4613      	mov	r3, r2
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	68b9      	ldr	r1, [r7, #8]
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f000 f840 	bl	8009940 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80098c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3730      	adds	r7, #48	@ 0x30
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b08a      	sub	sp, #40	@ 0x28
 80098ce:	af02      	add	r7, sp, #8
 80098d0:	60f8      	str	r0, [r7, #12]
 80098d2:	60b9      	str	r1, [r7, #8]
 80098d4:	4613      	mov	r3, r2
 80098d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d10b      	bne.n	80098f6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80098de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e2:	f383 8811 	msr	BASEPRI, r3
 80098e6:	f3bf 8f6f 	isb	sy
 80098ea:	f3bf 8f4f 	dsb	sy
 80098ee:	613b      	str	r3, [r7, #16]
}
 80098f0:	bf00      	nop
 80098f2:	bf00      	nop
 80098f4:	e7fd      	b.n	80098f2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	fb02 f303 	mul.w	r3, r2, r3
 80098fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	3350      	adds	r3, #80	@ 0x50
 8009904:	4618      	mov	r0, r3
 8009906:	f7ff fa01 	bl	8008d0c <pvPortMalloc>
 800990a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d011      	beq.n	8009936 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	3350      	adds	r3, #80	@ 0x50
 800991a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	2200      	movs	r2, #0
 8009920:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009924:	79fa      	ldrb	r2, [r7, #7]
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	9300      	str	r3, [sp, #0]
 800992a:	4613      	mov	r3, r2
 800992c:	697a      	ldr	r2, [r7, #20]
 800992e:	68b9      	ldr	r1, [r7, #8]
 8009930:	68f8      	ldr	r0, [r7, #12]
 8009932:	f000 f805 	bl	8009940 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009936:	69bb      	ldr	r3, [r7, #24]
	}
 8009938:	4618      	mov	r0, r3
 800993a:	3720      	adds	r7, #32
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
 800994c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d103      	bne.n	800995c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	69ba      	ldr	r2, [r7, #24]
 8009958:	601a      	str	r2, [r3, #0]
 800995a:	e002      	b.n	8009962 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800996e:	2101      	movs	r1, #1
 8009970:	69b8      	ldr	r0, [r7, #24]
 8009972:	f7ff fec3 	bl	80096fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	78fa      	ldrb	r2, [r7, #3]
 800997a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800997e:	bf00      	nop
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009986:	b580      	push	{r7, lr}
 8009988:	b082      	sub	sp, #8
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00e      	beq.n	80099b2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80099a6:	2300      	movs	r3, #0
 80099a8:	2200      	movs	r2, #0
 80099aa:	2100      	movs	r1, #0
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 f8a3 	bl	8009af8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80099b2:	bf00      	nop
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b086      	sub	sp, #24
 80099be:	af00      	add	r7, sp, #0
 80099c0:	4603      	mov	r3, r0
 80099c2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80099c4:	2301      	movs	r3, #1
 80099c6:	617b      	str	r3, [r7, #20]
 80099c8:	2300      	movs	r3, #0
 80099ca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80099cc:	79fb      	ldrb	r3, [r7, #7]
 80099ce:	461a      	mov	r2, r3
 80099d0:	6939      	ldr	r1, [r7, #16]
 80099d2:	6978      	ldr	r0, [r7, #20]
 80099d4:	f7ff ff79 	bl	80098ca <xQueueGenericCreate>
 80099d8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f7ff ffd3 	bl	8009986 <prvInitialiseMutex>

		return xNewQueue;
 80099e0:	68fb      	ldr	r3, [r7, #12]
	}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3718      	adds	r7, #24
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b088      	sub	sp, #32
 80099ee:	af02      	add	r7, sp, #8
 80099f0:	4603      	mov	r3, r0
 80099f2:	6039      	str	r1, [r7, #0]
 80099f4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80099f6:	2301      	movs	r3, #1
 80099f8:	617b      	str	r3, [r7, #20]
 80099fa:	2300      	movs	r3, #0
 80099fc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80099fe:	79fb      	ldrb	r3, [r7, #7]
 8009a00:	9300      	str	r3, [sp, #0]
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	2200      	movs	r2, #0
 8009a06:	6939      	ldr	r1, [r7, #16]
 8009a08:	6978      	ldr	r0, [r7, #20]
 8009a0a:	f7ff fee1 	bl	80097d0 <xQueueGenericCreateStatic>
 8009a0e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f7ff ffb8 	bl	8009986 <prvInitialiseMutex>

		return xNewQueue;
 8009a16:	68fb      	ldr	r3, [r7, #12]
	}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3718      	adds	r7, #24
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009a20:	b590      	push	{r4, r7, lr}
 8009a22:	b087      	sub	sp, #28
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10b      	bne.n	8009a4a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8009a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a36:	f383 8811 	msr	BASEPRI, r3
 8009a3a:	f3bf 8f6f 	isb	sy
 8009a3e:	f3bf 8f4f 	dsb	sy
 8009a42:	60fb      	str	r3, [r7, #12]
}
 8009a44:	bf00      	nop
 8009a46:	bf00      	nop
 8009a48:	e7fd      	b.n	8009a46 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	689c      	ldr	r4, [r3, #8]
 8009a4e:	f001 fbc3 	bl	800b1d8 <xTaskGetCurrentTaskHandle>
 8009a52:	4603      	mov	r3, r0
 8009a54:	429c      	cmp	r4, r3
 8009a56:	d111      	bne.n	8009a7c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	1e5a      	subs	r2, r3, #1
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d105      	bne.n	8009a76 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	2100      	movs	r1, #0
 8009a70:	6938      	ldr	r0, [r7, #16]
 8009a72:	f000 f841 	bl	8009af8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009a76:	2301      	movs	r3, #1
 8009a78:	617b      	str	r3, [r7, #20]
 8009a7a:	e001      	b.n	8009a80 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009a80:	697b      	ldr	r3, [r7, #20]
	}
 8009a82:	4618      	mov	r0, r3
 8009a84:	371c      	adds	r7, #28
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd90      	pop	{r4, r7, pc}

08009a8a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009a8a:	b590      	push	{r4, r7, lr}
 8009a8c:	b087      	sub	sp, #28
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
 8009a92:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d10b      	bne.n	8009ab6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8009a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa2:	f383 8811 	msr	BASEPRI, r3
 8009aa6:	f3bf 8f6f 	isb	sy
 8009aaa:	f3bf 8f4f 	dsb	sy
 8009aae:	60fb      	str	r3, [r7, #12]
}
 8009ab0:	bf00      	nop
 8009ab2:	bf00      	nop
 8009ab4:	e7fd      	b.n	8009ab2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	689c      	ldr	r4, [r3, #8]
 8009aba:	f001 fb8d 	bl	800b1d8 <xTaskGetCurrentTaskHandle>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	429c      	cmp	r4, r3
 8009ac2:	d107      	bne.n	8009ad4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	1c5a      	adds	r2, r3, #1
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	617b      	str	r3, [r7, #20]
 8009ad2:	e00c      	b.n	8009aee <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009ad4:	6839      	ldr	r1, [r7, #0]
 8009ad6:	6938      	ldr	r0, [r7, #16]
 8009ad8:	f000 fa90 	bl	8009ffc <xQueueSemaphoreTake>
 8009adc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d004      	beq.n	8009aee <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	1c5a      	adds	r2, r3, #1
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009aee:	697b      	ldr	r3, [r7, #20]
	}
 8009af0:	4618      	mov	r0, r3
 8009af2:	371c      	adds	r7, #28
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd90      	pop	{r4, r7, pc}

08009af8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b08e      	sub	sp, #56	@ 0x38
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	607a      	str	r2, [r7, #4]
 8009b04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009b06:	2300      	movs	r3, #0
 8009b08:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d10b      	bne.n	8009b2c <xQueueGenericSend+0x34>
	__asm volatile
 8009b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b18:	f383 8811 	msr	BASEPRI, r3
 8009b1c:	f3bf 8f6f 	isb	sy
 8009b20:	f3bf 8f4f 	dsb	sy
 8009b24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009b26:	bf00      	nop
 8009b28:	bf00      	nop
 8009b2a:	e7fd      	b.n	8009b28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d103      	bne.n	8009b3a <xQueueGenericSend+0x42>
 8009b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d101      	bne.n	8009b3e <xQueueGenericSend+0x46>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e000      	b.n	8009b40 <xQueueGenericSend+0x48>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d10b      	bne.n	8009b5c <xQueueGenericSend+0x64>
	__asm volatile
 8009b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b48:	f383 8811 	msr	BASEPRI, r3
 8009b4c:	f3bf 8f6f 	isb	sy
 8009b50:	f3bf 8f4f 	dsb	sy
 8009b54:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009b56:	bf00      	nop
 8009b58:	bf00      	nop
 8009b5a:	e7fd      	b.n	8009b58 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	d103      	bne.n	8009b6a <xQueueGenericSend+0x72>
 8009b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d101      	bne.n	8009b6e <xQueueGenericSend+0x76>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e000      	b.n	8009b70 <xQueueGenericSend+0x78>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10b      	bne.n	8009b8c <xQueueGenericSend+0x94>
	__asm volatile
 8009b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b78:	f383 8811 	msr	BASEPRI, r3
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	623b      	str	r3, [r7, #32]
}
 8009b86:	bf00      	nop
 8009b88:	bf00      	nop
 8009b8a:	e7fd      	b.n	8009b88 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b8c:	f001 fb34 	bl	800b1f8 <xTaskGetSchedulerState>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d102      	bne.n	8009b9c <xQueueGenericSend+0xa4>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d101      	bne.n	8009ba0 <xQueueGenericSend+0xa8>
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	e000      	b.n	8009ba2 <xQueueGenericSend+0xaa>
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d10b      	bne.n	8009bbe <xQueueGenericSend+0xc6>
	__asm volatile
 8009ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009baa:	f383 8811 	msr	BASEPRI, r3
 8009bae:	f3bf 8f6f 	isb	sy
 8009bb2:	f3bf 8f4f 	dsb	sy
 8009bb6:	61fb      	str	r3, [r7, #28]
}
 8009bb8:	bf00      	nop
 8009bba:	bf00      	nop
 8009bbc:	e7fd      	b.n	8009bba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009bbe:	f7ff fc7b 	bl	80094b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d302      	bcc.n	8009bd4 <xQueueGenericSend+0xdc>
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d129      	bne.n	8009c28 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	68b9      	ldr	r1, [r7, #8]
 8009bd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009bda:	f000 fb37 	bl	800a24c <prvCopyDataToQueue>
 8009bde:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d010      	beq.n	8009c0a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bea:	3324      	adds	r3, #36	@ 0x24
 8009bec:	4618      	mov	r0, r3
 8009bee:	f001 f92d 	bl	800ae4c <xTaskRemoveFromEventList>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d013      	beq.n	8009c20 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009bf8:	4b3f      	ldr	r3, [pc, #252]	@ (8009cf8 <xQueueGenericSend+0x200>)
 8009bfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bfe:	601a      	str	r2, [r3, #0]
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	e00a      	b.n	8009c20 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d007      	beq.n	8009c20 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009c10:	4b39      	ldr	r3, [pc, #228]	@ (8009cf8 <xQueueGenericSend+0x200>)
 8009c12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c16:	601a      	str	r2, [r3, #0]
 8009c18:	f3bf 8f4f 	dsb	sy
 8009c1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009c20:	f7ff fc7c 	bl	800951c <vPortExitCritical>
				return pdPASS;
 8009c24:	2301      	movs	r3, #1
 8009c26:	e063      	b.n	8009cf0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d103      	bne.n	8009c36 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c2e:	f7ff fc75 	bl	800951c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009c32:	2300      	movs	r3, #0
 8009c34:	e05c      	b.n	8009cf0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d106      	bne.n	8009c4a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c3c:	f107 0314 	add.w	r3, r7, #20
 8009c40:	4618      	mov	r0, r3
 8009c42:	f001 f967 	bl	800af14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c46:	2301      	movs	r3, #1
 8009c48:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c4a:	f7ff fc67 	bl	800951c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c4e:	f000 fecf 	bl	800a9f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c52:	f7ff fc31 	bl	80094b8 <vPortEnterCritical>
 8009c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c5c:	b25b      	sxtb	r3, r3
 8009c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c62:	d103      	bne.n	8009c6c <xQueueGenericSend+0x174>
 8009c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c66:	2200      	movs	r2, #0
 8009c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c72:	b25b      	sxtb	r3, r3
 8009c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c78:	d103      	bne.n	8009c82 <xQueueGenericSend+0x18a>
 8009c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c82:	f7ff fc4b 	bl	800951c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c86:	1d3a      	adds	r2, r7, #4
 8009c88:	f107 0314 	add.w	r3, r7, #20
 8009c8c:	4611      	mov	r1, r2
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f001 f956 	bl	800af40 <xTaskCheckForTimeOut>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d124      	bne.n	8009ce4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009c9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009c9c:	f000 fbce 	bl	800a43c <prvIsQueueFull>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d018      	beq.n	8009cd8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca8:	3310      	adds	r3, #16
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	4611      	mov	r1, r2
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f001 f87a 	bl	800ada8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009cb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009cb6:	f000 fb59 	bl	800a36c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009cba:	f000 fea7 	bl	800aa0c <xTaskResumeAll>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f47f af7c 	bne.w	8009bbe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8009cf8 <xQueueGenericSend+0x200>)
 8009cc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ccc:	601a      	str	r2, [r3, #0]
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	e772      	b.n	8009bbe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009cd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009cda:	f000 fb47 	bl	800a36c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009cde:	f000 fe95 	bl	800aa0c <xTaskResumeAll>
 8009ce2:	e76c      	b.n	8009bbe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009ce4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ce6:	f000 fb41 	bl	800a36c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009cea:	f000 fe8f 	bl	800aa0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009cee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3738      	adds	r7, #56	@ 0x38
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	e000ed04 	.word	0xe000ed04

08009cfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b090      	sub	sp, #64	@ 0x40
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
 8009d08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d10b      	bne.n	8009d2c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d18:	f383 8811 	msr	BASEPRI, r3
 8009d1c:	f3bf 8f6f 	isb	sy
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009d26:	bf00      	nop
 8009d28:	bf00      	nop
 8009d2a:	e7fd      	b.n	8009d28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d103      	bne.n	8009d3a <xQueueGenericSendFromISR+0x3e>
 8009d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d101      	bne.n	8009d3e <xQueueGenericSendFromISR+0x42>
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e000      	b.n	8009d40 <xQueueGenericSendFromISR+0x44>
 8009d3e:	2300      	movs	r3, #0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d10b      	bne.n	8009d5c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d48:	f383 8811 	msr	BASEPRI, r3
 8009d4c:	f3bf 8f6f 	isb	sy
 8009d50:	f3bf 8f4f 	dsb	sy
 8009d54:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009d56:	bf00      	nop
 8009d58:	bf00      	nop
 8009d5a:	e7fd      	b.n	8009d58 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d103      	bne.n	8009d6a <xQueueGenericSendFromISR+0x6e>
 8009d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	d101      	bne.n	8009d6e <xQueueGenericSendFromISR+0x72>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e000      	b.n	8009d70 <xQueueGenericSendFromISR+0x74>
 8009d6e:	2300      	movs	r3, #0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d10b      	bne.n	8009d8c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d78:	f383 8811 	msr	BASEPRI, r3
 8009d7c:	f3bf 8f6f 	isb	sy
 8009d80:	f3bf 8f4f 	dsb	sy
 8009d84:	623b      	str	r3, [r7, #32]
}
 8009d86:	bf00      	nop
 8009d88:	bf00      	nop
 8009d8a:	e7fd      	b.n	8009d88 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d8c:	f7ff fc74 	bl	8009678 <vPortValidateInterruptPriority>
	__asm volatile
 8009d90:	f3ef 8211 	mrs	r2, BASEPRI
 8009d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d98:	f383 8811 	msr	BASEPRI, r3
 8009d9c:	f3bf 8f6f 	isb	sy
 8009da0:	f3bf 8f4f 	dsb	sy
 8009da4:	61fa      	str	r2, [r7, #28]
 8009da6:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8009da8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009daa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d302      	bcc.n	8009dbe <xQueueGenericSendFromISR+0xc2>
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	d12f      	bne.n	8009e1e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009dc4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009dce:	683a      	ldr	r2, [r7, #0]
 8009dd0:	68b9      	ldr	r1, [r7, #8]
 8009dd2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009dd4:	f000 fa3a 	bl	800a24c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009dd8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de0:	d112      	bne.n	8009e08 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d016      	beq.n	8009e18 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dec:	3324      	adds	r3, #36	@ 0x24
 8009dee:	4618      	mov	r0, r3
 8009df0:	f001 f82c 	bl	800ae4c <xTaskRemoveFromEventList>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00e      	beq.n	8009e18 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d00b      	beq.n	8009e18 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	601a      	str	r2, [r3, #0]
 8009e06:	e007      	b.n	8009e18 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009e08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	b25a      	sxtb	r2, r3
 8009e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009e1c:	e001      	b.n	8009e22 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e24:	617b      	str	r3, [r7, #20]
	__asm volatile
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	f383 8811 	msr	BASEPRI, r3
}
 8009e2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3740      	adds	r7, #64	@ 0x40
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b08c      	sub	sp, #48	@ 0x30
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009e44:	2300      	movs	r3, #0
 8009e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d10b      	bne.n	8009e6a <xQueueReceive+0x32>
	__asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	623b      	str	r3, [r7, #32]
}
 8009e64:	bf00      	nop
 8009e66:	bf00      	nop
 8009e68:	e7fd      	b.n	8009e66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d103      	bne.n	8009e78 <xQueueReceive+0x40>
 8009e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d101      	bne.n	8009e7c <xQueueReceive+0x44>
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e000      	b.n	8009e7e <xQueueReceive+0x46>
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d10b      	bne.n	8009e9a <xQueueReceive+0x62>
	__asm volatile
 8009e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e86:	f383 8811 	msr	BASEPRI, r3
 8009e8a:	f3bf 8f6f 	isb	sy
 8009e8e:	f3bf 8f4f 	dsb	sy
 8009e92:	61fb      	str	r3, [r7, #28]
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop
 8009e98:	e7fd      	b.n	8009e96 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e9a:	f001 f9ad 	bl	800b1f8 <xTaskGetSchedulerState>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d102      	bne.n	8009eaa <xQueueReceive+0x72>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d101      	bne.n	8009eae <xQueueReceive+0x76>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e000      	b.n	8009eb0 <xQueueReceive+0x78>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10b      	bne.n	8009ecc <xQueueReceive+0x94>
	__asm volatile
 8009eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb8:	f383 8811 	msr	BASEPRI, r3
 8009ebc:	f3bf 8f6f 	isb	sy
 8009ec0:	f3bf 8f4f 	dsb	sy
 8009ec4:	61bb      	str	r3, [r7, #24]
}
 8009ec6:	bf00      	nop
 8009ec8:	bf00      	nop
 8009eca:	e7fd      	b.n	8009ec8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ecc:	f7ff faf4 	bl	80094b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d01f      	beq.n	8009f1c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009edc:	68b9      	ldr	r1, [r7, #8]
 8009ede:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ee0:	f000 fa1e 	bl	800a320 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee6:	1e5a      	subs	r2, r3, #1
 8009ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00f      	beq.n	8009f14 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef6:	3310      	adds	r3, #16
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f000 ffa7 	bl	800ae4c <xTaskRemoveFromEventList>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d007      	beq.n	8009f14 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009f04:	4b3c      	ldr	r3, [pc, #240]	@ (8009ff8 <xQueueReceive+0x1c0>)
 8009f06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f0a:	601a      	str	r2, [r3, #0]
 8009f0c:	f3bf 8f4f 	dsb	sy
 8009f10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009f14:	f7ff fb02 	bl	800951c <vPortExitCritical>
				return pdPASS;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e069      	b.n	8009ff0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d103      	bne.n	8009f2a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f22:	f7ff fafb 	bl	800951c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009f26:	2300      	movs	r3, #0
 8009f28:	e062      	b.n	8009ff0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d106      	bne.n	8009f3e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f30:	f107 0310 	add.w	r3, r7, #16
 8009f34:	4618      	mov	r0, r3
 8009f36:	f000 ffed 	bl	800af14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f3e:	f7ff faed 	bl	800951c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f42:	f000 fd55 	bl	800a9f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f46:	f7ff fab7 	bl	80094b8 <vPortEnterCritical>
 8009f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f50:	b25b      	sxtb	r3, r3
 8009f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f56:	d103      	bne.n	8009f60 <xQueueReceive+0x128>
 8009f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f66:	b25b      	sxtb	r3, r3
 8009f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f6c:	d103      	bne.n	8009f76 <xQueueReceive+0x13e>
 8009f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f76:	f7ff fad1 	bl	800951c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f7a:	1d3a      	adds	r2, r7, #4
 8009f7c:	f107 0310 	add.w	r3, r7, #16
 8009f80:	4611      	mov	r1, r2
 8009f82:	4618      	mov	r0, r3
 8009f84:	f000 ffdc 	bl	800af40 <xTaskCheckForTimeOut>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d123      	bne.n	8009fd6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f90:	f000 fa3e 	bl	800a410 <prvIsQueueEmpty>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d017      	beq.n	8009fca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f9c:	3324      	adds	r3, #36	@ 0x24
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f000 ff00 	bl	800ada8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009fa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009faa:	f000 f9df 	bl	800a36c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009fae:	f000 fd2d 	bl	800aa0c <xTaskResumeAll>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d189      	bne.n	8009ecc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8009ff8 <xQueueReceive+0x1c0>)
 8009fba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fbe:	601a      	str	r2, [r3, #0]
 8009fc0:	f3bf 8f4f 	dsb	sy
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	e780      	b.n	8009ecc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009fca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fcc:	f000 f9ce 	bl	800a36c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fd0:	f000 fd1c 	bl	800aa0c <xTaskResumeAll>
 8009fd4:	e77a      	b.n	8009ecc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009fd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fd8:	f000 f9c8 	bl	800a36c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fdc:	f000 fd16 	bl	800aa0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fe0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fe2:	f000 fa15 	bl	800a410 <prvIsQueueEmpty>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f43f af6f 	beq.w	8009ecc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009fee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3730      	adds	r7, #48	@ 0x30
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}
 8009ff8:	e000ed04 	.word	0xe000ed04

08009ffc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b08e      	sub	sp, #56	@ 0x38
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a006:	2300      	movs	r3, #0
 800a008:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a00e:	2300      	movs	r3, #0
 800a010:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a014:	2b00      	cmp	r3, #0
 800a016:	d10b      	bne.n	800a030 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a01c:	f383 8811 	msr	BASEPRI, r3
 800a020:	f3bf 8f6f 	isb	sy
 800a024:	f3bf 8f4f 	dsb	sy
 800a028:	623b      	str	r3, [r7, #32]
}
 800a02a:	bf00      	nop
 800a02c:	bf00      	nop
 800a02e:	e7fd      	b.n	800a02c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a034:	2b00      	cmp	r3, #0
 800a036:	d00b      	beq.n	800a050 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a03c:	f383 8811 	msr	BASEPRI, r3
 800a040:	f3bf 8f6f 	isb	sy
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	61fb      	str	r3, [r7, #28]
}
 800a04a:	bf00      	nop
 800a04c:	bf00      	nop
 800a04e:	e7fd      	b.n	800a04c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a050:	f001 f8d2 	bl	800b1f8 <xTaskGetSchedulerState>
 800a054:	4603      	mov	r3, r0
 800a056:	2b00      	cmp	r3, #0
 800a058:	d102      	bne.n	800a060 <xQueueSemaphoreTake+0x64>
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d101      	bne.n	800a064 <xQueueSemaphoreTake+0x68>
 800a060:	2301      	movs	r3, #1
 800a062:	e000      	b.n	800a066 <xQueueSemaphoreTake+0x6a>
 800a064:	2300      	movs	r3, #0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d10b      	bne.n	800a082 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a06a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a06e:	f383 8811 	msr	BASEPRI, r3
 800a072:	f3bf 8f6f 	isb	sy
 800a076:	f3bf 8f4f 	dsb	sy
 800a07a:	61bb      	str	r3, [r7, #24]
}
 800a07c:	bf00      	nop
 800a07e:	bf00      	nop
 800a080:	e7fd      	b.n	800a07e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a082:	f7ff fa19 	bl	80094b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a08a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d024      	beq.n	800a0dc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a094:	1e5a      	subs	r2, r3, #1
 800a096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a098:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a09a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d104      	bne.n	800a0ac <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a0a2:	f001 fa23 	bl	800b4ec <pvTaskIncrementMutexHeldCount>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0aa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00f      	beq.n	800a0d4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0b6:	3310      	adds	r3, #16
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f000 fec7 	bl	800ae4c <xTaskRemoveFromEventList>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d007      	beq.n	800a0d4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a0c4:	4b54      	ldr	r3, [pc, #336]	@ (800a218 <xQueueSemaphoreTake+0x21c>)
 800a0c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0ca:	601a      	str	r2, [r3, #0]
 800a0cc:	f3bf 8f4f 	dsb	sy
 800a0d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a0d4:	f7ff fa22 	bl	800951c <vPortExitCritical>
				return pdPASS;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e098      	b.n	800a20e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d112      	bne.n	800a108 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d00b      	beq.n	800a100 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a0e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	617b      	str	r3, [r7, #20]
}
 800a0fa:	bf00      	nop
 800a0fc:	bf00      	nop
 800a0fe:	e7fd      	b.n	800a0fc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a100:	f7ff fa0c 	bl	800951c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a104:	2300      	movs	r3, #0
 800a106:	e082      	b.n	800a20e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d106      	bne.n	800a11c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a10e:	f107 030c 	add.w	r3, r7, #12
 800a112:	4618      	mov	r0, r3
 800a114:	f000 fefe 	bl	800af14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a118:	2301      	movs	r3, #1
 800a11a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a11c:	f7ff f9fe 	bl	800951c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a120:	f000 fc66 	bl	800a9f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a124:	f7ff f9c8 	bl	80094b8 <vPortEnterCritical>
 800a128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a12a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a12e:	b25b      	sxtb	r3, r3
 800a130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a134:	d103      	bne.n	800a13e <xQueueSemaphoreTake+0x142>
 800a136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a140:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a144:	b25b      	sxtb	r3, r3
 800a146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a14a:	d103      	bne.n	800a154 <xQueueSemaphoreTake+0x158>
 800a14c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a14e:	2200      	movs	r2, #0
 800a150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a154:	f7ff f9e2 	bl	800951c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a158:	463a      	mov	r2, r7
 800a15a:	f107 030c 	add.w	r3, r7, #12
 800a15e:	4611      	mov	r1, r2
 800a160:	4618      	mov	r0, r3
 800a162:	f000 feed 	bl	800af40 <xTaskCheckForTimeOut>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d132      	bne.n	800a1d2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a16c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a16e:	f000 f94f 	bl	800a410 <prvIsQueueEmpty>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d026      	beq.n	800a1c6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d109      	bne.n	800a194 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a180:	f7ff f99a 	bl	80094b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	4618      	mov	r0, r3
 800a18a:	f001 f853 	bl	800b234 <xTaskPriorityInherit>
 800a18e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a190:	f7ff f9c4 	bl	800951c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a196:	3324      	adds	r3, #36	@ 0x24
 800a198:	683a      	ldr	r2, [r7, #0]
 800a19a:	4611      	mov	r1, r2
 800a19c:	4618      	mov	r0, r3
 800a19e:	f000 fe03 	bl	800ada8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a1a4:	f000 f8e2 	bl	800a36c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a1a8:	f000 fc30 	bl	800aa0c <xTaskResumeAll>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f47f af67 	bne.w	800a082 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a1b4:	4b18      	ldr	r3, [pc, #96]	@ (800a218 <xQueueSemaphoreTake+0x21c>)
 800a1b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1ba:	601a      	str	r2, [r3, #0]
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	f3bf 8f6f 	isb	sy
 800a1c4:	e75d      	b.n	800a082 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a1c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a1c8:	f000 f8d0 	bl	800a36c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1cc:	f000 fc1e 	bl	800aa0c <xTaskResumeAll>
 800a1d0:	e757      	b.n	800a082 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a1d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a1d4:	f000 f8ca 	bl	800a36c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1d8:	f000 fc18 	bl	800aa0c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a1de:	f000 f917 	bl	800a410 <prvIsQueueEmpty>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f43f af4c 	beq.w	800a082 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00d      	beq.n	800a20c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a1f0:	f7ff f962 	bl	80094b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a1f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a1f6:	f000 f811 	bl	800a21c <prvGetDisinheritPriorityAfterTimeout>
 800a1fa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a202:	4618      	mov	r0, r3
 800a204:	f001 f8ee 	bl	800b3e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a208:	f7ff f988 	bl	800951c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a20c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3738      	adds	r7, #56	@ 0x38
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	e000ed04 	.word	0xe000ed04

0800a21c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a21c:	b480      	push	{r7}
 800a21e:	b085      	sub	sp, #20
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d006      	beq.n	800a23a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800a236:	60fb      	str	r3, [r7, #12]
 800a238:	e001      	b.n	800a23e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a23a:	2300      	movs	r3, #0
 800a23c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a23e:	68fb      	ldr	r3, [r7, #12]
	}
 800a240:	4618      	mov	r0, r3
 800a242:	3714      	adds	r7, #20
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b086      	sub	sp, #24
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a258:	2300      	movs	r3, #0
 800a25a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a260:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10d      	bne.n	800a286 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d14d      	bne.n	800a30e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	4618      	mov	r0, r3
 800a278:	f001 f844 	bl	800b304 <xTaskPriorityDisinherit>
 800a27c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2200      	movs	r2, #0
 800a282:	609a      	str	r2, [r3, #8]
 800a284:	e043      	b.n	800a30e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d119      	bne.n	800a2c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6858      	ldr	r0, [r3, #4]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a294:	461a      	mov	r2, r3
 800a296:	68b9      	ldr	r1, [r7, #8]
 800a298:	f001 fe7a 	bl	800bf90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	685a      	ldr	r2, [r3, #4]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2a4:	441a      	add	r2, r3
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	685a      	ldr	r2, [r3, #4]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d32b      	bcc.n	800a30e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	605a      	str	r2, [r3, #4]
 800a2be:	e026      	b.n	800a30e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	68d8      	ldr	r0, [r3, #12]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	68b9      	ldr	r1, [r7, #8]
 800a2cc:	f001 fe60 	bl	800bf90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	68da      	ldr	r2, [r3, #12]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2d8:	425b      	negs	r3, r3
 800a2da:	441a      	add	r2, r3
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	68da      	ldr	r2, [r3, #12]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d207      	bcs.n	800a2fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	689a      	ldr	r2, [r3, #8]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2f4:	425b      	negs	r3, r3
 800a2f6:	441a      	add	r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2b02      	cmp	r3, #2
 800a300:	d105      	bne.n	800a30e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d002      	beq.n	800a30e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	3b01      	subs	r3, #1
 800a30c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	1c5a      	adds	r2, r3, #1
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a316:	697b      	ldr	r3, [r7, #20]
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3718      	adds	r7, #24
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d018      	beq.n	800a364 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	68da      	ldr	r2, [r3, #12]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a33a:	441a      	add	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	68da      	ldr	r2, [r3, #12]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d303      	bcc.n	800a354 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	68d9      	ldr	r1, [r3, #12]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a35c:	461a      	mov	r2, r3
 800a35e:	6838      	ldr	r0, [r7, #0]
 800a360:	f001 fe16 	bl	800bf90 <memcpy>
	}
}
 800a364:	bf00      	nop
 800a366:	3708      	adds	r7, #8
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a374:	f7ff f8a0 	bl	80094b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a37e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a380:	e011      	b.n	800a3a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a386:	2b00      	cmp	r3, #0
 800a388:	d012      	beq.n	800a3b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	3324      	adds	r3, #36	@ 0x24
 800a38e:	4618      	mov	r0, r3
 800a390:	f000 fd5c 	bl	800ae4c <xTaskRemoveFromEventList>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d001      	beq.n	800a39e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a39a:	f000 fe35 	bl	800b008 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
 800a3a0:	3b01      	subs	r3, #1
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	dce9      	bgt.n	800a382 <prvUnlockQueue+0x16>
 800a3ae:	e000      	b.n	800a3b2 <prvUnlockQueue+0x46>
					break;
 800a3b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	22ff      	movs	r2, #255	@ 0xff
 800a3b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a3ba:	f7ff f8af 	bl	800951c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a3be:	f7ff f87b 	bl	80094b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a3c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a3ca:	e011      	b.n	800a3f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	691b      	ldr	r3, [r3, #16]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d012      	beq.n	800a3fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	3310      	adds	r3, #16
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f000 fd37 	bl	800ae4c <xTaskRemoveFromEventList>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d001      	beq.n	800a3e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a3e4:	f000 fe10 	bl	800b008 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a3e8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a3f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	dce9      	bgt.n	800a3cc <prvUnlockQueue+0x60>
 800a3f8:	e000      	b.n	800a3fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a3fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	22ff      	movs	r2, #255	@ 0xff
 800a400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a404:	f7ff f88a 	bl	800951c <vPortExitCritical>
}
 800a408:	bf00      	nop
 800a40a:	3710      	adds	r7, #16
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a418:	f7ff f84e 	bl	80094b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a420:	2b00      	cmp	r3, #0
 800a422:	d102      	bne.n	800a42a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a424:	2301      	movs	r3, #1
 800a426:	60fb      	str	r3, [r7, #12]
 800a428:	e001      	b.n	800a42e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a42a:	2300      	movs	r3, #0
 800a42c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a42e:	f7ff f875 	bl	800951c <vPortExitCritical>

	return xReturn;
 800a432:	68fb      	ldr	r3, [r7, #12]
}
 800a434:	4618      	mov	r0, r3
 800a436:	3710      	adds	r7, #16
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a444:	f7ff f838 	bl	80094b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a450:	429a      	cmp	r2, r3
 800a452:	d102      	bne.n	800a45a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a454:	2301      	movs	r3, #1
 800a456:	60fb      	str	r3, [r7, #12]
 800a458:	e001      	b.n	800a45e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a45a:	2300      	movs	r3, #0
 800a45c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a45e:	f7ff f85d 	bl	800951c <vPortExitCritical>

	return xReturn;
 800a462:	68fb      	ldr	r3, [r7, #12]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a476:	2300      	movs	r3, #0
 800a478:	60fb      	str	r3, [r7, #12]
 800a47a:	e014      	b.n	800a4a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a47c:	4a0f      	ldr	r2, [pc, #60]	@ (800a4bc <vQueueAddToRegistry+0x50>)
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d10b      	bne.n	800a4a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a488:	490c      	ldr	r1, [pc, #48]	@ (800a4bc <vQueueAddToRegistry+0x50>)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	683a      	ldr	r2, [r7, #0]
 800a48e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a492:	4a0a      	ldr	r2, [pc, #40]	@ (800a4bc <vQueueAddToRegistry+0x50>)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	00db      	lsls	r3, r3, #3
 800a498:	4413      	add	r3, r2
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a49e:	e006      	b.n	800a4ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	60fb      	str	r3, [r7, #12]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2b07      	cmp	r3, #7
 800a4aa:	d9e7      	bls.n	800a47c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a4ac:	bf00      	nop
 800a4ae:	bf00      	nop
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	20005524 	.word	0x20005524

0800a4c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b086      	sub	sp, #24
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a4d0:	f7fe fff2 	bl	80094b8 <vPortEnterCritical>
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a4da:	b25b      	sxtb	r3, r3
 800a4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e0:	d103      	bne.n	800a4ea <vQueueWaitForMessageRestricted+0x2a>
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a4f0:	b25b      	sxtb	r3, r3
 800a4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f6:	d103      	bne.n	800a500 <vQueueWaitForMessageRestricted+0x40>
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a500:	f7ff f80c 	bl	800951c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d106      	bne.n	800a51a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	3324      	adds	r3, #36	@ 0x24
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	68b9      	ldr	r1, [r7, #8]
 800a514:	4618      	mov	r0, r3
 800a516:	f000 fc6d 	bl	800adf4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a51a:	6978      	ldr	r0, [r7, #20]
 800a51c:	f7ff ff26 	bl	800a36c <prvUnlockQueue>
	}
 800a520:	bf00      	nop
 800a522:	3718      	adds	r7, #24
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b08e      	sub	sp, #56	@ 0x38
 800a52c:	af04      	add	r7, sp, #16
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
 800a534:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d10b      	bne.n	800a554 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a53c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a540:	f383 8811 	msr	BASEPRI, r3
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	623b      	str	r3, [r7, #32]
}
 800a54e:	bf00      	nop
 800a550:	bf00      	nop
 800a552:	e7fd      	b.n	800a550 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a556:	2b00      	cmp	r3, #0
 800a558:	d10b      	bne.n	800a572 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a55a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a55e:	f383 8811 	msr	BASEPRI, r3
 800a562:	f3bf 8f6f 	isb	sy
 800a566:	f3bf 8f4f 	dsb	sy
 800a56a:	61fb      	str	r3, [r7, #28]
}
 800a56c:	bf00      	nop
 800a56e:	bf00      	nop
 800a570:	e7fd      	b.n	800a56e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a572:	23a8      	movs	r3, #168	@ 0xa8
 800a574:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	2ba8      	cmp	r3, #168	@ 0xa8
 800a57a:	d00b      	beq.n	800a594 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a57c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a580:	f383 8811 	msr	BASEPRI, r3
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	61bb      	str	r3, [r7, #24]
}
 800a58e:	bf00      	nop
 800a590:	bf00      	nop
 800a592:	e7fd      	b.n	800a590 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a594:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d01e      	beq.n	800a5da <xTaskCreateStatic+0xb2>
 800a59c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d01b      	beq.n	800a5da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a5aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ae:	2202      	movs	r2, #2
 800a5b0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	9303      	str	r3, [sp, #12]
 800a5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ba:	9302      	str	r3, [sp, #8]
 800a5bc:	f107 0314 	add.w	r3, r7, #20
 800a5c0:	9301      	str	r3, [sp, #4]
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c4:	9300      	str	r3, [sp, #0]
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	68b9      	ldr	r1, [r7, #8]
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f000 f851 	bl	800a674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a5d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a5d4:	f000 f8f6 	bl	800a7c4 <prvAddNewTaskToReadyList>
 800a5d8:	e001      	b.n	800a5de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a5de:	697b      	ldr	r3, [r7, #20]
	}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3728      	adds	r7, #40	@ 0x28
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b08c      	sub	sp, #48	@ 0x30
 800a5ec:	af04      	add	r7, sp, #16
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	603b      	str	r3, [r7, #0]
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a5f8:	88fb      	ldrh	r3, [r7, #6]
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7fe fb85 	bl	8008d0c <pvPortMalloc>
 800a602:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00e      	beq.n	800a628 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a60a:	20a8      	movs	r0, #168	@ 0xa8
 800a60c:	f7fe fb7e 	bl	8008d0c <pvPortMalloc>
 800a610:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d003      	beq.n	800a620 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a618:	69fb      	ldr	r3, [r7, #28]
 800a61a:	697a      	ldr	r2, [r7, #20]
 800a61c:	631a      	str	r2, [r3, #48]	@ 0x30
 800a61e:	e005      	b.n	800a62c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a620:	6978      	ldr	r0, [r7, #20]
 800a622:	f7fe fc41 	bl	8008ea8 <vPortFree>
 800a626:	e001      	b.n	800a62c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a628:	2300      	movs	r3, #0
 800a62a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d017      	beq.n	800a662 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	2200      	movs	r2, #0
 800a636:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a63a:	88fa      	ldrh	r2, [r7, #6]
 800a63c:	2300      	movs	r3, #0
 800a63e:	9303      	str	r3, [sp, #12]
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	9302      	str	r3, [sp, #8]
 800a644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	68b9      	ldr	r1, [r7, #8]
 800a650:	68f8      	ldr	r0, [r7, #12]
 800a652:	f000 f80f 	bl	800a674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a656:	69f8      	ldr	r0, [r7, #28]
 800a658:	f000 f8b4 	bl	800a7c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a65c:	2301      	movs	r3, #1
 800a65e:	61bb      	str	r3, [r7, #24]
 800a660:	e002      	b.n	800a668 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a662:	f04f 33ff 	mov.w	r3, #4294967295
 800a666:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a668:	69bb      	ldr	r3, [r7, #24]
	}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3720      	adds	r7, #32
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
	...

0800a674 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b088      	sub	sp, #32
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	607a      	str	r2, [r7, #4]
 800a680:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a684:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	461a      	mov	r2, r3
 800a68c:	21a5      	movs	r1, #165	@ 0xa5
 800a68e:	f001 fbcd 	bl	800be2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a694:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a69c:	3b01      	subs	r3, #1
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	4413      	add	r3, r2
 800a6a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	f023 0307 	bic.w	r3, r3, #7
 800a6aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	f003 0307 	and.w	r3, r3, #7
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00b      	beq.n	800a6ce <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a6b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ba:	f383 8811 	msr	BASEPRI, r3
 800a6be:	f3bf 8f6f 	isb	sy
 800a6c2:	f3bf 8f4f 	dsb	sy
 800a6c6:	617b      	str	r3, [r7, #20]
}
 800a6c8:	bf00      	nop
 800a6ca:	bf00      	nop
 800a6cc:	e7fd      	b.n	800a6ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d01f      	beq.n	800a714 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	61fb      	str	r3, [r7, #28]
 800a6d8:	e012      	b.n	800a700 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a6da:	68ba      	ldr	r2, [r7, #8]
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	4413      	add	r3, r2
 800a6e0:	7819      	ldrb	r1, [r3, #0]
 800a6e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6e4:	69fb      	ldr	r3, [r7, #28]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	3334      	adds	r3, #52	@ 0x34
 800a6ea:	460a      	mov	r2, r1
 800a6ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d006      	beq.n	800a708 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	61fb      	str	r3, [r7, #28]
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	2b0f      	cmp	r3, #15
 800a704:	d9e9      	bls.n	800a6da <prvInitialiseNewTask+0x66>
 800a706:	e000      	b.n	800a70a <prvInitialiseNewTask+0x96>
			{
				break;
 800a708:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a70c:	2200      	movs	r2, #0
 800a70e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a712:	e003      	b.n	800a71c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a716:	2200      	movs	r2, #0
 800a718:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a71c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a71e:	2b37      	cmp	r3, #55	@ 0x37
 800a720:	d901      	bls.n	800a726 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a722:	2337      	movs	r3, #55	@ 0x37
 800a724:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a728:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a72a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a72e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a730:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a734:	2200      	movs	r2, #0
 800a736:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73a:	3304      	adds	r3, #4
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7fe fcf3 	bl	8009128 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a744:	3318      	adds	r3, #24
 800a746:	4618      	mov	r0, r3
 800a748:	f7fe fcee 	bl	8009128 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a74e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a750:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a754:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a75c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a760:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a764:	2200      	movs	r2, #0
 800a766:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76c:	2200      	movs	r2, #0
 800a76e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a774:	3354      	adds	r3, #84	@ 0x54
 800a776:	224c      	movs	r2, #76	@ 0x4c
 800a778:	2100      	movs	r1, #0
 800a77a:	4618      	mov	r0, r3
 800a77c:	f001 fb56 	bl	800be2c <memset>
 800a780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a782:	4a0d      	ldr	r2, [pc, #52]	@ (800a7b8 <prvInitialiseNewTask+0x144>)
 800a784:	659a      	str	r2, [r3, #88]	@ 0x58
 800a786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a788:	4a0c      	ldr	r2, [pc, #48]	@ (800a7bc <prvInitialiseNewTask+0x148>)
 800a78a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78e:	4a0c      	ldr	r2, [pc, #48]	@ (800a7c0 <prvInitialiseNewTask+0x14c>)
 800a790:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a792:	683a      	ldr	r2, [r7, #0]
 800a794:	68f9      	ldr	r1, [r7, #12]
 800a796:	69b8      	ldr	r0, [r7, #24]
 800a798:	f7fe fd5a 	bl	8009250 <pxPortInitialiseStack>
 800a79c:	4602      	mov	r2, r0
 800a79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a7a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d002      	beq.n	800a7ae <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7ae:	bf00      	nop
 800a7b0:	3720      	adds	r7, #32
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	20005b98 	.word	0x20005b98
 800a7bc:	20005c00 	.word	0x20005c00
 800a7c0:	20005c68 	.word	0x20005c68

0800a7c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a7cc:	f7fe fe74 	bl	80094b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a7d0:	4b2d      	ldr	r3, [pc, #180]	@ (800a888 <prvAddNewTaskToReadyList+0xc4>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	4a2c      	ldr	r2, [pc, #176]	@ (800a888 <prvAddNewTaskToReadyList+0xc4>)
 800a7d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a7da:	4b2c      	ldr	r3, [pc, #176]	@ (800a88c <prvAddNewTaskToReadyList+0xc8>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d109      	bne.n	800a7f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a7e2:	4a2a      	ldr	r2, [pc, #168]	@ (800a88c <prvAddNewTaskToReadyList+0xc8>)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a7e8:	4b27      	ldr	r3, [pc, #156]	@ (800a888 <prvAddNewTaskToReadyList+0xc4>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d110      	bne.n	800a812 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a7f0:	f000 fc2e 	bl	800b050 <prvInitialiseTaskLists>
 800a7f4:	e00d      	b.n	800a812 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a7f6:	4b26      	ldr	r3, [pc, #152]	@ (800a890 <prvAddNewTaskToReadyList+0xcc>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d109      	bne.n	800a812 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a7fe:	4b23      	ldr	r3, [pc, #140]	@ (800a88c <prvAddNewTaskToReadyList+0xc8>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a808:	429a      	cmp	r2, r3
 800a80a:	d802      	bhi.n	800a812 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a80c:	4a1f      	ldr	r2, [pc, #124]	@ (800a88c <prvAddNewTaskToReadyList+0xc8>)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a812:	4b20      	ldr	r3, [pc, #128]	@ (800a894 <prvAddNewTaskToReadyList+0xd0>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	3301      	adds	r3, #1
 800a818:	4a1e      	ldr	r2, [pc, #120]	@ (800a894 <prvAddNewTaskToReadyList+0xd0>)
 800a81a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a81c:	4b1d      	ldr	r3, [pc, #116]	@ (800a894 <prvAddNewTaskToReadyList+0xd0>)
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a828:	4b1b      	ldr	r3, [pc, #108]	@ (800a898 <prvAddNewTaskToReadyList+0xd4>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d903      	bls.n	800a838 <prvAddNewTaskToReadyList+0x74>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a834:	4a18      	ldr	r2, [pc, #96]	@ (800a898 <prvAddNewTaskToReadyList+0xd4>)
 800a836:	6013      	str	r3, [r2, #0]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a83c:	4613      	mov	r3, r2
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	4413      	add	r3, r2
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	4a15      	ldr	r2, [pc, #84]	@ (800a89c <prvAddNewTaskToReadyList+0xd8>)
 800a846:	441a      	add	r2, r3
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	3304      	adds	r3, #4
 800a84c:	4619      	mov	r1, r3
 800a84e:	4610      	mov	r0, r2
 800a850:	f7fe fc77 	bl	8009142 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a854:	f7fe fe62 	bl	800951c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a858:	4b0d      	ldr	r3, [pc, #52]	@ (800a890 <prvAddNewTaskToReadyList+0xcc>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d00e      	beq.n	800a87e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a860:	4b0a      	ldr	r3, [pc, #40]	@ (800a88c <prvAddNewTaskToReadyList+0xc8>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d207      	bcs.n	800a87e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a86e:	4b0c      	ldr	r3, [pc, #48]	@ (800a8a0 <prvAddNewTaskToReadyList+0xdc>)
 800a870:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a874:	601a      	str	r2, [r3, #0]
 800a876:	f3bf 8f4f 	dsb	sy
 800a87a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a87e:	bf00      	nop
 800a880:	3708      	adds	r7, #8
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	20005a38 	.word	0x20005a38
 800a88c:	20005564 	.word	0x20005564
 800a890:	20005a44 	.word	0x20005a44
 800a894:	20005a54 	.word	0x20005a54
 800a898:	20005a40 	.word	0x20005a40
 800a89c:	20005568 	.word	0x20005568
 800a8a0:	e000ed04 	.word	0xe000ed04

0800a8a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d018      	beq.n	800a8e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a8b6:	4b14      	ldr	r3, [pc, #80]	@ (800a908 <vTaskDelay+0x64>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d00b      	beq.n	800a8d6 <vTaskDelay+0x32>
	__asm volatile
 800a8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c2:	f383 8811 	msr	BASEPRI, r3
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	60bb      	str	r3, [r7, #8]
}
 800a8d0:	bf00      	nop
 800a8d2:	bf00      	nop
 800a8d4:	e7fd      	b.n	800a8d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a8d6:	f000 f88b 	bl	800a9f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a8da:	2100      	movs	r1, #0
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 fe19 	bl	800b514 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a8e2:	f000 f893 	bl	800aa0c <xTaskResumeAll>
 800a8e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d107      	bne.n	800a8fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a8ee:	4b07      	ldr	r3, [pc, #28]	@ (800a90c <vTaskDelay+0x68>)
 800a8f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8f4:	601a      	str	r2, [r3, #0]
 800a8f6:	f3bf 8f4f 	dsb	sy
 800a8fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a8fe:	bf00      	nop
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	20005a60 	.word	0x20005a60
 800a90c:	e000ed04 	.word	0xe000ed04

0800a910 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b08a      	sub	sp, #40	@ 0x28
 800a914:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a916:	2300      	movs	r3, #0
 800a918:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a91a:	2300      	movs	r3, #0
 800a91c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a91e:	463a      	mov	r2, r7
 800a920:	1d39      	adds	r1, r7, #4
 800a922:	f107 0308 	add.w	r3, r7, #8
 800a926:	4618      	mov	r0, r3
 800a928:	f7fe f9bc 	bl	8008ca4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a92c:	6839      	ldr	r1, [r7, #0]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	68ba      	ldr	r2, [r7, #8]
 800a932:	9202      	str	r2, [sp, #8]
 800a934:	9301      	str	r3, [sp, #4]
 800a936:	2300      	movs	r3, #0
 800a938:	9300      	str	r3, [sp, #0]
 800a93a:	2300      	movs	r3, #0
 800a93c:	460a      	mov	r2, r1
 800a93e:	4924      	ldr	r1, [pc, #144]	@ (800a9d0 <vTaskStartScheduler+0xc0>)
 800a940:	4824      	ldr	r0, [pc, #144]	@ (800a9d4 <vTaskStartScheduler+0xc4>)
 800a942:	f7ff fdf1 	bl	800a528 <xTaskCreateStatic>
 800a946:	4603      	mov	r3, r0
 800a948:	4a23      	ldr	r2, [pc, #140]	@ (800a9d8 <vTaskStartScheduler+0xc8>)
 800a94a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a94c:	4b22      	ldr	r3, [pc, #136]	@ (800a9d8 <vTaskStartScheduler+0xc8>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d002      	beq.n	800a95a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a954:	2301      	movs	r3, #1
 800a956:	617b      	str	r3, [r7, #20]
 800a958:	e001      	b.n	800a95e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a95a:	2300      	movs	r3, #0
 800a95c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	2b01      	cmp	r3, #1
 800a962:	d102      	bne.n	800a96a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a964:	f000 fe2a 	bl	800b5bc <xTimerCreateTimerTask>
 800a968:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d11b      	bne.n	800a9a8 <vTaskStartScheduler+0x98>
	__asm volatile
 800a970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a974:	f383 8811 	msr	BASEPRI, r3
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	613b      	str	r3, [r7, #16]
}
 800a982:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a984:	4b15      	ldr	r3, [pc, #84]	@ (800a9dc <vTaskStartScheduler+0xcc>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	3354      	adds	r3, #84	@ 0x54
 800a98a:	4a15      	ldr	r2, [pc, #84]	@ (800a9e0 <vTaskStartScheduler+0xd0>)
 800a98c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a98e:	4b15      	ldr	r3, [pc, #84]	@ (800a9e4 <vTaskStartScheduler+0xd4>)
 800a990:	f04f 32ff 	mov.w	r2, #4294967295
 800a994:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a996:	4b14      	ldr	r3, [pc, #80]	@ (800a9e8 <vTaskStartScheduler+0xd8>)
 800a998:	2201      	movs	r2, #1
 800a99a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a99c:	4b13      	ldr	r3, [pc, #76]	@ (800a9ec <vTaskStartScheduler+0xdc>)
 800a99e:	2200      	movs	r2, #0
 800a9a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a9a2:	f7fe fce5 	bl	8009370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a9a6:	e00f      	b.n	800a9c8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ae:	d10b      	bne.n	800a9c8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a9b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9b4:	f383 8811 	msr	BASEPRI, r3
 800a9b8:	f3bf 8f6f 	isb	sy
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	60fb      	str	r3, [r7, #12]
}
 800a9c2:	bf00      	nop
 800a9c4:	bf00      	nop
 800a9c6:	e7fd      	b.n	800a9c4 <vTaskStartScheduler+0xb4>
}
 800a9c8:	bf00      	nop
 800a9ca:	3718      	adds	r7, #24
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	0800ce28 	.word	0x0800ce28
 800a9d4:	0800b021 	.word	0x0800b021
 800a9d8:	20005a5c 	.word	0x20005a5c
 800a9dc:	20005564 	.word	0x20005564
 800a9e0:	2000010c 	.word	0x2000010c
 800a9e4:	20005a58 	.word	0x20005a58
 800a9e8:	20005a44 	.word	0x20005a44
 800a9ec:	20005a3c 	.word	0x20005a3c

0800a9f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a9f4:	4b04      	ldr	r3, [pc, #16]	@ (800aa08 <vTaskSuspendAll+0x18>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	4a03      	ldr	r2, [pc, #12]	@ (800aa08 <vTaskSuspendAll+0x18>)
 800a9fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a9fe:	bf00      	nop
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr
 800aa08:	20005a60 	.word	0x20005a60

0800aa0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aa12:	2300      	movs	r3, #0
 800aa14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aa16:	2300      	movs	r3, #0
 800aa18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aa1a:	4b42      	ldr	r3, [pc, #264]	@ (800ab24 <xTaskResumeAll+0x118>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d10b      	bne.n	800aa3a <xTaskResumeAll+0x2e>
	__asm volatile
 800aa22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa26:	f383 8811 	msr	BASEPRI, r3
 800aa2a:	f3bf 8f6f 	isb	sy
 800aa2e:	f3bf 8f4f 	dsb	sy
 800aa32:	603b      	str	r3, [r7, #0]
}
 800aa34:	bf00      	nop
 800aa36:	bf00      	nop
 800aa38:	e7fd      	b.n	800aa36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aa3a:	f7fe fd3d 	bl	80094b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aa3e:	4b39      	ldr	r3, [pc, #228]	@ (800ab24 <xTaskResumeAll+0x118>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	3b01      	subs	r3, #1
 800aa44:	4a37      	ldr	r2, [pc, #220]	@ (800ab24 <xTaskResumeAll+0x118>)
 800aa46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa48:	4b36      	ldr	r3, [pc, #216]	@ (800ab24 <xTaskResumeAll+0x118>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d162      	bne.n	800ab16 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aa50:	4b35      	ldr	r3, [pc, #212]	@ (800ab28 <xTaskResumeAll+0x11c>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d05e      	beq.n	800ab16 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa58:	e02f      	b.n	800aaba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa5a:	4b34      	ldr	r3, [pc, #208]	@ (800ab2c <xTaskResumeAll+0x120>)
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	3318      	adds	r3, #24
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7fe fbc8 	bl	80091fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	3304      	adds	r3, #4
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7fe fbc3 	bl	80091fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa7a:	4b2d      	ldr	r3, [pc, #180]	@ (800ab30 <xTaskResumeAll+0x124>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d903      	bls.n	800aa8a <xTaskResumeAll+0x7e>
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa86:	4a2a      	ldr	r2, [pc, #168]	@ (800ab30 <xTaskResumeAll+0x124>)
 800aa88:	6013      	str	r3, [r2, #0]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa8e:	4613      	mov	r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	4413      	add	r3, r2
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	4a27      	ldr	r2, [pc, #156]	@ (800ab34 <xTaskResumeAll+0x128>)
 800aa98:	441a      	add	r2, r3
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	3304      	adds	r3, #4
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	4610      	mov	r0, r2
 800aaa2:	f7fe fb4e 	bl	8009142 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaaa:	4b23      	ldr	r3, [pc, #140]	@ (800ab38 <xTaskResumeAll+0x12c>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d302      	bcc.n	800aaba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800aab4:	4b21      	ldr	r3, [pc, #132]	@ (800ab3c <xTaskResumeAll+0x130>)
 800aab6:	2201      	movs	r2, #1
 800aab8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aaba:	4b1c      	ldr	r3, [pc, #112]	@ (800ab2c <xTaskResumeAll+0x120>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1cb      	bne.n	800aa5a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d001      	beq.n	800aacc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aac8:	f000 fb66 	bl	800b198 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aacc:	4b1c      	ldr	r3, [pc, #112]	@ (800ab40 <xTaskResumeAll+0x134>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d010      	beq.n	800aafa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aad8:	f000 f846 	bl	800ab68 <xTaskIncrementTick>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d002      	beq.n	800aae8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800aae2:	4b16      	ldr	r3, [pc, #88]	@ (800ab3c <xTaskResumeAll+0x130>)
 800aae4:	2201      	movs	r2, #1
 800aae6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	3b01      	subs	r3, #1
 800aaec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d1f1      	bne.n	800aad8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800aaf4:	4b12      	ldr	r3, [pc, #72]	@ (800ab40 <xTaskResumeAll+0x134>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aafa:	4b10      	ldr	r3, [pc, #64]	@ (800ab3c <xTaskResumeAll+0x130>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d009      	beq.n	800ab16 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ab02:	2301      	movs	r3, #1
 800ab04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ab06:	4b0f      	ldr	r3, [pc, #60]	@ (800ab44 <xTaskResumeAll+0x138>)
 800ab08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab0c:	601a      	str	r2, [r3, #0]
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab16:	f7fe fd01 	bl	800951c <vPortExitCritical>

	return xAlreadyYielded;
 800ab1a:	68bb      	ldr	r3, [r7, #8]
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3710      	adds	r7, #16
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	20005a60 	.word	0x20005a60
 800ab28:	20005a38 	.word	0x20005a38
 800ab2c:	200059f8 	.word	0x200059f8
 800ab30:	20005a40 	.word	0x20005a40
 800ab34:	20005568 	.word	0x20005568
 800ab38:	20005564 	.word	0x20005564
 800ab3c:	20005a4c 	.word	0x20005a4c
 800ab40:	20005a48 	.word	0x20005a48
 800ab44:	e000ed04 	.word	0xe000ed04

0800ab48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ab4e:	4b05      	ldr	r3, [pc, #20]	@ (800ab64 <xTaskGetTickCount+0x1c>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ab54:	687b      	ldr	r3, [r7, #4]
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	370c      	adds	r7, #12
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	20005a3c 	.word	0x20005a3c

0800ab68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b086      	sub	sp, #24
 800ab6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab72:	4b4f      	ldr	r3, [pc, #316]	@ (800acb0 <xTaskIncrementTick+0x148>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f040 8090 	bne.w	800ac9c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ab7c:	4b4d      	ldr	r3, [pc, #308]	@ (800acb4 <xTaskIncrementTick+0x14c>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	3301      	adds	r3, #1
 800ab82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ab84:	4a4b      	ldr	r2, [pc, #300]	@ (800acb4 <xTaskIncrementTick+0x14c>)
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d121      	bne.n	800abd4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ab90:	4b49      	ldr	r3, [pc, #292]	@ (800acb8 <xTaskIncrementTick+0x150>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00b      	beq.n	800abb2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800ab9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab9e:	f383 8811 	msr	BASEPRI, r3
 800aba2:	f3bf 8f6f 	isb	sy
 800aba6:	f3bf 8f4f 	dsb	sy
 800abaa:	603b      	str	r3, [r7, #0]
}
 800abac:	bf00      	nop
 800abae:	bf00      	nop
 800abb0:	e7fd      	b.n	800abae <xTaskIncrementTick+0x46>
 800abb2:	4b41      	ldr	r3, [pc, #260]	@ (800acb8 <xTaskIncrementTick+0x150>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	60fb      	str	r3, [r7, #12]
 800abb8:	4b40      	ldr	r3, [pc, #256]	@ (800acbc <xTaskIncrementTick+0x154>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a3e      	ldr	r2, [pc, #248]	@ (800acb8 <xTaskIncrementTick+0x150>)
 800abbe:	6013      	str	r3, [r2, #0]
 800abc0:	4a3e      	ldr	r2, [pc, #248]	@ (800acbc <xTaskIncrementTick+0x154>)
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6013      	str	r3, [r2, #0]
 800abc6:	4b3e      	ldr	r3, [pc, #248]	@ (800acc0 <xTaskIncrementTick+0x158>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	3301      	adds	r3, #1
 800abcc:	4a3c      	ldr	r2, [pc, #240]	@ (800acc0 <xTaskIncrementTick+0x158>)
 800abce:	6013      	str	r3, [r2, #0]
 800abd0:	f000 fae2 	bl	800b198 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800abd4:	4b3b      	ldr	r3, [pc, #236]	@ (800acc4 <xTaskIncrementTick+0x15c>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	693a      	ldr	r2, [r7, #16]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d349      	bcc.n	800ac72 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abde:	4b36      	ldr	r3, [pc, #216]	@ (800acb8 <xTaskIncrementTick+0x150>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d104      	bne.n	800abf2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abe8:	4b36      	ldr	r3, [pc, #216]	@ (800acc4 <xTaskIncrementTick+0x15c>)
 800abea:	f04f 32ff 	mov.w	r2, #4294967295
 800abee:	601a      	str	r2, [r3, #0]
					break;
 800abf0:	e03f      	b.n	800ac72 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abf2:	4b31      	ldr	r3, [pc, #196]	@ (800acb8 <xTaskIncrementTick+0x150>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ac02:	693a      	ldr	r2, [r7, #16]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d203      	bcs.n	800ac12 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ac0a:	4a2e      	ldr	r2, [pc, #184]	@ (800acc4 <xTaskIncrementTick+0x15c>)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ac10:	e02f      	b.n	800ac72 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	3304      	adds	r3, #4
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7fe faf0 	bl	80091fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d004      	beq.n	800ac2e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	3318      	adds	r3, #24
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7fe fae7 	bl	80091fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac32:	4b25      	ldr	r3, [pc, #148]	@ (800acc8 <xTaskIncrementTick+0x160>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d903      	bls.n	800ac42 <xTaskIncrementTick+0xda>
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac3e:	4a22      	ldr	r2, [pc, #136]	@ (800acc8 <xTaskIncrementTick+0x160>)
 800ac40:	6013      	str	r3, [r2, #0]
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac46:	4613      	mov	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	4a1f      	ldr	r2, [pc, #124]	@ (800accc <xTaskIncrementTick+0x164>)
 800ac50:	441a      	add	r2, r3
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	3304      	adds	r3, #4
 800ac56:	4619      	mov	r1, r3
 800ac58:	4610      	mov	r0, r2
 800ac5a:	f7fe fa72 	bl	8009142 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac62:	4b1b      	ldr	r3, [pc, #108]	@ (800acd0 <xTaskIncrementTick+0x168>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d3b8      	bcc.n	800abde <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac70:	e7b5      	b.n	800abde <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ac72:	4b17      	ldr	r3, [pc, #92]	@ (800acd0 <xTaskIncrementTick+0x168>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac78:	4914      	ldr	r1, [pc, #80]	@ (800accc <xTaskIncrementTick+0x164>)
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	4413      	add	r3, r2
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	440b      	add	r3, r1
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d901      	bls.n	800ac8e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ac8e:	4b11      	ldr	r3, [pc, #68]	@ (800acd4 <xTaskIncrementTick+0x16c>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d007      	beq.n	800aca6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800ac96:	2301      	movs	r3, #1
 800ac98:	617b      	str	r3, [r7, #20]
 800ac9a:	e004      	b.n	800aca6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ac9c:	4b0e      	ldr	r3, [pc, #56]	@ (800acd8 <xTaskIncrementTick+0x170>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	3301      	adds	r3, #1
 800aca2:	4a0d      	ldr	r2, [pc, #52]	@ (800acd8 <xTaskIncrementTick+0x170>)
 800aca4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800aca6:	697b      	ldr	r3, [r7, #20]
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3718      	adds	r7, #24
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	20005a60 	.word	0x20005a60
 800acb4:	20005a3c 	.word	0x20005a3c
 800acb8:	200059f0 	.word	0x200059f0
 800acbc:	200059f4 	.word	0x200059f4
 800acc0:	20005a50 	.word	0x20005a50
 800acc4:	20005a58 	.word	0x20005a58
 800acc8:	20005a40 	.word	0x20005a40
 800accc:	20005568 	.word	0x20005568
 800acd0:	20005564 	.word	0x20005564
 800acd4:	20005a4c 	.word	0x20005a4c
 800acd8:	20005a48 	.word	0x20005a48

0800acdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ace2:	4b2b      	ldr	r3, [pc, #172]	@ (800ad90 <vTaskSwitchContext+0xb4>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d003      	beq.n	800acf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800acea:	4b2a      	ldr	r3, [pc, #168]	@ (800ad94 <vTaskSwitchContext+0xb8>)
 800acec:	2201      	movs	r2, #1
 800acee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800acf0:	e047      	b.n	800ad82 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800acf2:	4b28      	ldr	r3, [pc, #160]	@ (800ad94 <vTaskSwitchContext+0xb8>)
 800acf4:	2200      	movs	r2, #0
 800acf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acf8:	4b27      	ldr	r3, [pc, #156]	@ (800ad98 <vTaskSwitchContext+0xbc>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	60fb      	str	r3, [r7, #12]
 800acfe:	e011      	b.n	800ad24 <vTaskSwitchContext+0x48>
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d10b      	bne.n	800ad1e <vTaskSwitchContext+0x42>
	__asm volatile
 800ad06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	607b      	str	r3, [r7, #4]
}
 800ad18:	bf00      	nop
 800ad1a:	bf00      	nop
 800ad1c:	e7fd      	b.n	800ad1a <vTaskSwitchContext+0x3e>
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	3b01      	subs	r3, #1
 800ad22:	60fb      	str	r3, [r7, #12]
 800ad24:	491d      	ldr	r1, [pc, #116]	@ (800ad9c <vTaskSwitchContext+0xc0>)
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	4613      	mov	r3, r2
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	4413      	add	r3, r2
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	440b      	add	r3, r1
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d0e3      	beq.n	800ad00 <vTaskSwitchContext+0x24>
 800ad38:	68fa      	ldr	r2, [r7, #12]
 800ad3a:	4613      	mov	r3, r2
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	4413      	add	r3, r2
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	4a16      	ldr	r2, [pc, #88]	@ (800ad9c <vTaskSwitchContext+0xc0>)
 800ad44:	4413      	add	r3, r2
 800ad46:	60bb      	str	r3, [r7, #8]
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	685a      	ldr	r2, [r3, #4]
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	605a      	str	r2, [r3, #4]
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	685a      	ldr	r2, [r3, #4]
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	3308      	adds	r3, #8
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d104      	bne.n	800ad68 <vTaskSwitchContext+0x8c>
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	685a      	ldr	r2, [r3, #4]
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	605a      	str	r2, [r3, #4]
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	4a0c      	ldr	r2, [pc, #48]	@ (800ada0 <vTaskSwitchContext+0xc4>)
 800ad70:	6013      	str	r3, [r2, #0]
 800ad72:	4a09      	ldr	r2, [pc, #36]	@ (800ad98 <vTaskSwitchContext+0xbc>)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ad78:	4b09      	ldr	r3, [pc, #36]	@ (800ada0 <vTaskSwitchContext+0xc4>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	3354      	adds	r3, #84	@ 0x54
 800ad7e:	4a09      	ldr	r2, [pc, #36]	@ (800ada4 <vTaskSwitchContext+0xc8>)
 800ad80:	6013      	str	r3, [r2, #0]
}
 800ad82:	bf00      	nop
 800ad84:	3714      	adds	r7, #20
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr
 800ad8e:	bf00      	nop
 800ad90:	20005a60 	.word	0x20005a60
 800ad94:	20005a4c 	.word	0x20005a4c
 800ad98:	20005a40 	.word	0x20005a40
 800ad9c:	20005568 	.word	0x20005568
 800ada0:	20005564 	.word	0x20005564
 800ada4:	2000010c 	.word	0x2000010c

0800ada8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d10b      	bne.n	800add0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800adb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adbc:	f383 8811 	msr	BASEPRI, r3
 800adc0:	f3bf 8f6f 	isb	sy
 800adc4:	f3bf 8f4f 	dsb	sy
 800adc8:	60fb      	str	r3, [r7, #12]
}
 800adca:	bf00      	nop
 800adcc:	bf00      	nop
 800adce:	e7fd      	b.n	800adcc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800add0:	4b07      	ldr	r3, [pc, #28]	@ (800adf0 <vTaskPlaceOnEventList+0x48>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	3318      	adds	r3, #24
 800add6:	4619      	mov	r1, r3
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f7fe f9d6 	bl	800918a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800adde:	2101      	movs	r1, #1
 800ade0:	6838      	ldr	r0, [r7, #0]
 800ade2:	f000 fb97 	bl	800b514 <prvAddCurrentTaskToDelayedList>
}
 800ade6:	bf00      	nop
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	20005564 	.word	0x20005564

0800adf4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b086      	sub	sp, #24
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d10b      	bne.n	800ae1e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ae06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae0a:	f383 8811 	msr	BASEPRI, r3
 800ae0e:	f3bf 8f6f 	isb	sy
 800ae12:	f3bf 8f4f 	dsb	sy
 800ae16:	617b      	str	r3, [r7, #20]
}
 800ae18:	bf00      	nop
 800ae1a:	bf00      	nop
 800ae1c:	e7fd      	b.n	800ae1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae1e:	4b0a      	ldr	r3, [pc, #40]	@ (800ae48 <vTaskPlaceOnEventListRestricted+0x54>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	3318      	adds	r3, #24
 800ae24:	4619      	mov	r1, r3
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	f7fe f98b 	bl	8009142 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d002      	beq.n	800ae38 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ae32:	f04f 33ff 	mov.w	r3, #4294967295
 800ae36:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ae38:	6879      	ldr	r1, [r7, #4]
 800ae3a:	68b8      	ldr	r0, [r7, #8]
 800ae3c:	f000 fb6a 	bl	800b514 <prvAddCurrentTaskToDelayedList>
	}
 800ae40:	bf00      	nop
 800ae42:	3718      	adds	r7, #24
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	20005564 	.word	0x20005564

0800ae4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b086      	sub	sp, #24
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d10b      	bne.n	800ae7a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ae62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae66:	f383 8811 	msr	BASEPRI, r3
 800ae6a:	f3bf 8f6f 	isb	sy
 800ae6e:	f3bf 8f4f 	dsb	sy
 800ae72:	60fb      	str	r3, [r7, #12]
}
 800ae74:	bf00      	nop
 800ae76:	bf00      	nop
 800ae78:	e7fd      	b.n	800ae76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	3318      	adds	r3, #24
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fe f9bc 	bl	80091fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae84:	4b1d      	ldr	r3, [pc, #116]	@ (800aefc <xTaskRemoveFromEventList+0xb0>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d11d      	bne.n	800aec8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	3304      	adds	r3, #4
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7fe f9b3 	bl	80091fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae9a:	4b19      	ldr	r3, [pc, #100]	@ (800af00 <xTaskRemoveFromEventList+0xb4>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d903      	bls.n	800aeaa <xTaskRemoveFromEventList+0x5e>
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aea6:	4a16      	ldr	r2, [pc, #88]	@ (800af00 <xTaskRemoveFromEventList+0xb4>)
 800aea8:	6013      	str	r3, [r2, #0]
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeae:	4613      	mov	r3, r2
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	4413      	add	r3, r2
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	4a13      	ldr	r2, [pc, #76]	@ (800af04 <xTaskRemoveFromEventList+0xb8>)
 800aeb8:	441a      	add	r2, r3
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	3304      	adds	r3, #4
 800aebe:	4619      	mov	r1, r3
 800aec0:	4610      	mov	r0, r2
 800aec2:	f7fe f93e 	bl	8009142 <vListInsertEnd>
 800aec6:	e005      	b.n	800aed4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	3318      	adds	r3, #24
 800aecc:	4619      	mov	r1, r3
 800aece:	480e      	ldr	r0, [pc, #56]	@ (800af08 <xTaskRemoveFromEventList+0xbc>)
 800aed0:	f7fe f937 	bl	8009142 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aed8:	4b0c      	ldr	r3, [pc, #48]	@ (800af0c <xTaskRemoveFromEventList+0xc0>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aede:	429a      	cmp	r2, r3
 800aee0:	d905      	bls.n	800aeee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aee2:	2301      	movs	r3, #1
 800aee4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aee6:	4b0a      	ldr	r3, [pc, #40]	@ (800af10 <xTaskRemoveFromEventList+0xc4>)
 800aee8:	2201      	movs	r2, #1
 800aeea:	601a      	str	r2, [r3, #0]
 800aeec:	e001      	b.n	800aef2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800aeee:	2300      	movs	r3, #0
 800aef0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aef2:	697b      	ldr	r3, [r7, #20]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3718      	adds	r7, #24
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	20005a60 	.word	0x20005a60
 800af00:	20005a40 	.word	0x20005a40
 800af04:	20005568 	.word	0x20005568
 800af08:	200059f8 	.word	0x200059f8
 800af0c:	20005564 	.word	0x20005564
 800af10:	20005a4c 	.word	0x20005a4c

0800af14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800af1c:	4b06      	ldr	r3, [pc, #24]	@ (800af38 <vTaskInternalSetTimeOutState+0x24>)
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800af24:	4b05      	ldr	r3, [pc, #20]	@ (800af3c <vTaskInternalSetTimeOutState+0x28>)
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	605a      	str	r2, [r3, #4]
}
 800af2c:	bf00      	nop
 800af2e:	370c      	adds	r7, #12
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr
 800af38:	20005a50 	.word	0x20005a50
 800af3c:	20005a3c 	.word	0x20005a3c

0800af40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b088      	sub	sp, #32
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d10b      	bne.n	800af68 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800af50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af54:	f383 8811 	msr	BASEPRI, r3
 800af58:	f3bf 8f6f 	isb	sy
 800af5c:	f3bf 8f4f 	dsb	sy
 800af60:	613b      	str	r3, [r7, #16]
}
 800af62:	bf00      	nop
 800af64:	bf00      	nop
 800af66:	e7fd      	b.n	800af64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d10b      	bne.n	800af86 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800af6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af72:	f383 8811 	msr	BASEPRI, r3
 800af76:	f3bf 8f6f 	isb	sy
 800af7a:	f3bf 8f4f 	dsb	sy
 800af7e:	60fb      	str	r3, [r7, #12]
}
 800af80:	bf00      	nop
 800af82:	bf00      	nop
 800af84:	e7fd      	b.n	800af82 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800af86:	f7fe fa97 	bl	80094b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800af8a:	4b1d      	ldr	r3, [pc, #116]	@ (800b000 <xTaskCheckForTimeOut+0xc0>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	69ba      	ldr	r2, [r7, #24]
 800af96:	1ad3      	subs	r3, r2, r3
 800af98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa2:	d102      	bne.n	800afaa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800afa4:	2300      	movs	r3, #0
 800afa6:	61fb      	str	r3, [r7, #28]
 800afa8:	e023      	b.n	800aff2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	4b15      	ldr	r3, [pc, #84]	@ (800b004 <xTaskCheckForTimeOut+0xc4>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d007      	beq.n	800afc6 <xTaskCheckForTimeOut+0x86>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	69ba      	ldr	r2, [r7, #24]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d302      	bcc.n	800afc6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800afc0:	2301      	movs	r3, #1
 800afc2:	61fb      	str	r3, [r7, #28]
 800afc4:	e015      	b.n	800aff2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	697a      	ldr	r2, [r7, #20]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d20b      	bcs.n	800afe8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	1ad2      	subs	r2, r2, r3
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f7ff ff99 	bl	800af14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800afe2:	2300      	movs	r3, #0
 800afe4:	61fb      	str	r3, [r7, #28]
 800afe6:	e004      	b.n	800aff2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	2200      	movs	r2, #0
 800afec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800afee:	2301      	movs	r3, #1
 800aff0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aff2:	f7fe fa93 	bl	800951c <vPortExitCritical>

	return xReturn;
 800aff6:	69fb      	ldr	r3, [r7, #28]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3720      	adds	r7, #32
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}
 800b000:	20005a3c 	.word	0x20005a3c
 800b004:	20005a50 	.word	0x20005a50

0800b008 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b008:	b480      	push	{r7}
 800b00a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b00c:	4b03      	ldr	r3, [pc, #12]	@ (800b01c <vTaskMissedYield+0x14>)
 800b00e:	2201      	movs	r2, #1
 800b010:	601a      	str	r2, [r3, #0]
}
 800b012:	bf00      	nop
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr
 800b01c:	20005a4c 	.word	0x20005a4c

0800b020 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b028:	f000 f852 	bl	800b0d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b02c:	4b06      	ldr	r3, [pc, #24]	@ (800b048 <prvIdleTask+0x28>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2b01      	cmp	r3, #1
 800b032:	d9f9      	bls.n	800b028 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b034:	4b05      	ldr	r3, [pc, #20]	@ (800b04c <prvIdleTask+0x2c>)
 800b036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b03a:	601a      	str	r2, [r3, #0]
 800b03c:	f3bf 8f4f 	dsb	sy
 800b040:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b044:	e7f0      	b.n	800b028 <prvIdleTask+0x8>
 800b046:	bf00      	nop
 800b048:	20005568 	.word	0x20005568
 800b04c:	e000ed04 	.word	0xe000ed04

0800b050 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b056:	2300      	movs	r3, #0
 800b058:	607b      	str	r3, [r7, #4]
 800b05a:	e00c      	b.n	800b076 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	4613      	mov	r3, r2
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	4413      	add	r3, r2
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	4a12      	ldr	r2, [pc, #72]	@ (800b0b0 <prvInitialiseTaskLists+0x60>)
 800b068:	4413      	add	r3, r2
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7fe f83c 	bl	80090e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	3301      	adds	r3, #1
 800b074:	607b      	str	r3, [r7, #4]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2b37      	cmp	r3, #55	@ 0x37
 800b07a:	d9ef      	bls.n	800b05c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b07c:	480d      	ldr	r0, [pc, #52]	@ (800b0b4 <prvInitialiseTaskLists+0x64>)
 800b07e:	f7fe f833 	bl	80090e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b082:	480d      	ldr	r0, [pc, #52]	@ (800b0b8 <prvInitialiseTaskLists+0x68>)
 800b084:	f7fe f830 	bl	80090e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b088:	480c      	ldr	r0, [pc, #48]	@ (800b0bc <prvInitialiseTaskLists+0x6c>)
 800b08a:	f7fe f82d 	bl	80090e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b08e:	480c      	ldr	r0, [pc, #48]	@ (800b0c0 <prvInitialiseTaskLists+0x70>)
 800b090:	f7fe f82a 	bl	80090e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b094:	480b      	ldr	r0, [pc, #44]	@ (800b0c4 <prvInitialiseTaskLists+0x74>)
 800b096:	f7fe f827 	bl	80090e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b09a:	4b0b      	ldr	r3, [pc, #44]	@ (800b0c8 <prvInitialiseTaskLists+0x78>)
 800b09c:	4a05      	ldr	r2, [pc, #20]	@ (800b0b4 <prvInitialiseTaskLists+0x64>)
 800b09e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b0a0:	4b0a      	ldr	r3, [pc, #40]	@ (800b0cc <prvInitialiseTaskLists+0x7c>)
 800b0a2:	4a05      	ldr	r2, [pc, #20]	@ (800b0b8 <prvInitialiseTaskLists+0x68>)
 800b0a4:	601a      	str	r2, [r3, #0]
}
 800b0a6:	bf00      	nop
 800b0a8:	3708      	adds	r7, #8
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	20005568 	.word	0x20005568
 800b0b4:	200059c8 	.word	0x200059c8
 800b0b8:	200059dc 	.word	0x200059dc
 800b0bc:	200059f8 	.word	0x200059f8
 800b0c0:	20005a0c 	.word	0x20005a0c
 800b0c4:	20005a24 	.word	0x20005a24
 800b0c8:	200059f0 	.word	0x200059f0
 800b0cc:	200059f4 	.word	0x200059f4

0800b0d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b0d6:	e019      	b.n	800b10c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b0d8:	f7fe f9ee 	bl	80094b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0dc:	4b10      	ldr	r3, [pc, #64]	@ (800b120 <prvCheckTasksWaitingTermination+0x50>)
 800b0de:	68db      	ldr	r3, [r3, #12]
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	3304      	adds	r3, #4
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f7fe f887 	bl	80091fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b0ee:	4b0d      	ldr	r3, [pc, #52]	@ (800b124 <prvCheckTasksWaitingTermination+0x54>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	3b01      	subs	r3, #1
 800b0f4:	4a0b      	ldr	r2, [pc, #44]	@ (800b124 <prvCheckTasksWaitingTermination+0x54>)
 800b0f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b0f8:	4b0b      	ldr	r3, [pc, #44]	@ (800b128 <prvCheckTasksWaitingTermination+0x58>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	4a0a      	ldr	r2, [pc, #40]	@ (800b128 <prvCheckTasksWaitingTermination+0x58>)
 800b100:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b102:	f7fe fa0b 	bl	800951c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 f810 	bl	800b12c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b10c:	4b06      	ldr	r3, [pc, #24]	@ (800b128 <prvCheckTasksWaitingTermination+0x58>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d1e1      	bne.n	800b0d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b114:	bf00      	nop
 800b116:	bf00      	nop
 800b118:	3708      	adds	r7, #8
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	20005a0c 	.word	0x20005a0c
 800b124:	20005a38 	.word	0x20005a38
 800b128:	20005a20 	.word	0x20005a20

0800b12c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	3354      	adds	r3, #84	@ 0x54
 800b138:	4618      	mov	r0, r3
 800b13a:	f000 fe8f 	bl	800be5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b144:	2b00      	cmp	r3, #0
 800b146:	d108      	bne.n	800b15a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7fd feab 	bl	8008ea8 <vPortFree>
				vPortFree( pxTCB );
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f7fd fea8 	bl	8008ea8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b158:	e019      	b.n	800b18e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b160:	2b01      	cmp	r3, #1
 800b162:	d103      	bne.n	800b16c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f7fd fe9f 	bl	8008ea8 <vPortFree>
	}
 800b16a:	e010      	b.n	800b18e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b172:	2b02      	cmp	r3, #2
 800b174:	d00b      	beq.n	800b18e <prvDeleteTCB+0x62>
	__asm volatile
 800b176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b17a:	f383 8811 	msr	BASEPRI, r3
 800b17e:	f3bf 8f6f 	isb	sy
 800b182:	f3bf 8f4f 	dsb	sy
 800b186:	60fb      	str	r3, [r7, #12]
}
 800b188:	bf00      	nop
 800b18a:	bf00      	nop
 800b18c:	e7fd      	b.n	800b18a <prvDeleteTCB+0x5e>
	}
 800b18e:	bf00      	nop
 800b190:	3710      	adds	r7, #16
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
	...

0800b198 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b19e:	4b0c      	ldr	r3, [pc, #48]	@ (800b1d0 <prvResetNextTaskUnblockTime+0x38>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d104      	bne.n	800b1b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b1a8:	4b0a      	ldr	r3, [pc, #40]	@ (800b1d4 <prvResetNextTaskUnblockTime+0x3c>)
 800b1aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b1b0:	e008      	b.n	800b1c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1b2:	4b07      	ldr	r3, [pc, #28]	@ (800b1d0 <prvResetNextTaskUnblockTime+0x38>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	4a04      	ldr	r2, [pc, #16]	@ (800b1d4 <prvResetNextTaskUnblockTime+0x3c>)
 800b1c2:	6013      	str	r3, [r2, #0]
}
 800b1c4:	bf00      	nop
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr
 800b1d0:	200059f0 	.word	0x200059f0
 800b1d4:	20005a58 	.word	0x20005a58

0800b1d8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b1de:	4b05      	ldr	r3, [pc, #20]	@ (800b1f4 <xTaskGetCurrentTaskHandle+0x1c>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b1e4:	687b      	ldr	r3, [r7, #4]
	}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	370c      	adds	r7, #12
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f0:	4770      	bx	lr
 800b1f2:	bf00      	nop
 800b1f4:	20005564 	.word	0x20005564

0800b1f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b1fe:	4b0b      	ldr	r3, [pc, #44]	@ (800b22c <xTaskGetSchedulerState+0x34>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d102      	bne.n	800b20c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b206:	2301      	movs	r3, #1
 800b208:	607b      	str	r3, [r7, #4]
 800b20a:	e008      	b.n	800b21e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b20c:	4b08      	ldr	r3, [pc, #32]	@ (800b230 <xTaskGetSchedulerState+0x38>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d102      	bne.n	800b21a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b214:	2302      	movs	r3, #2
 800b216:	607b      	str	r3, [r7, #4]
 800b218:	e001      	b.n	800b21e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b21a:	2300      	movs	r3, #0
 800b21c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b21e:	687b      	ldr	r3, [r7, #4]
	}
 800b220:	4618      	mov	r0, r3
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr
 800b22c:	20005a44 	.word	0x20005a44
 800b230:	20005a60 	.word	0x20005a60

0800b234 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b240:	2300      	movs	r3, #0
 800b242:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d051      	beq.n	800b2ee <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b24e:	4b2a      	ldr	r3, [pc, #168]	@ (800b2f8 <xTaskPriorityInherit+0xc4>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b254:	429a      	cmp	r2, r3
 800b256:	d241      	bcs.n	800b2dc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	699b      	ldr	r3, [r3, #24]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	db06      	blt.n	800b26e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b260:	4b25      	ldr	r3, [pc, #148]	@ (800b2f8 <xTaskPriorityInherit+0xc4>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b266:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	6959      	ldr	r1, [r3, #20]
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b276:	4613      	mov	r3, r2
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	4413      	add	r3, r2
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	4a1f      	ldr	r2, [pc, #124]	@ (800b2fc <xTaskPriorityInherit+0xc8>)
 800b280:	4413      	add	r3, r2
 800b282:	4299      	cmp	r1, r3
 800b284:	d122      	bne.n	800b2cc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	3304      	adds	r3, #4
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7fd ffb6 	bl	80091fc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b290:	4b19      	ldr	r3, [pc, #100]	@ (800b2f8 <xTaskPriorityInherit+0xc4>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b29e:	4b18      	ldr	r3, [pc, #96]	@ (800b300 <xTaskPriorityInherit+0xcc>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d903      	bls.n	800b2ae <xTaskPriorityInherit+0x7a>
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2aa:	4a15      	ldr	r2, [pc, #84]	@ (800b300 <xTaskPriorityInherit+0xcc>)
 800b2ac:	6013      	str	r3, [r2, #0]
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2b2:	4613      	mov	r3, r2
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	4413      	add	r3, r2
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	4a10      	ldr	r2, [pc, #64]	@ (800b2fc <xTaskPriorityInherit+0xc8>)
 800b2bc:	441a      	add	r2, r3
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	3304      	adds	r3, #4
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	4610      	mov	r0, r2
 800b2c6:	f7fd ff3c 	bl	8009142 <vListInsertEnd>
 800b2ca:	e004      	b.n	800b2d6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b2cc:	4b0a      	ldr	r3, [pc, #40]	@ (800b2f8 <xTaskPriorityInherit+0xc4>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	60fb      	str	r3, [r7, #12]
 800b2da:	e008      	b.n	800b2ee <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b2e0:	4b05      	ldr	r3, [pc, #20]	@ (800b2f8 <xTaskPriorityInherit+0xc4>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d201      	bcs.n	800b2ee <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
	}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3710      	adds	r7, #16
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	20005564 	.word	0x20005564
 800b2fc:	20005568 	.word	0x20005568
 800b300:	20005a40 	.word	0x20005a40

0800b304 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b304:	b580      	push	{r7, lr}
 800b306:	b086      	sub	sp, #24
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b310:	2300      	movs	r3, #0
 800b312:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d058      	beq.n	800b3cc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b31a:	4b2f      	ldr	r3, [pc, #188]	@ (800b3d8 <xTaskPriorityDisinherit+0xd4>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	693a      	ldr	r2, [r7, #16]
 800b320:	429a      	cmp	r2, r3
 800b322:	d00b      	beq.n	800b33c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b328:	f383 8811 	msr	BASEPRI, r3
 800b32c:	f3bf 8f6f 	isb	sy
 800b330:	f3bf 8f4f 	dsb	sy
 800b334:	60fb      	str	r3, [r7, #12]
}
 800b336:	bf00      	nop
 800b338:	bf00      	nop
 800b33a:	e7fd      	b.n	800b338 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b340:	2b00      	cmp	r3, #0
 800b342:	d10b      	bne.n	800b35c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b348:	f383 8811 	msr	BASEPRI, r3
 800b34c:	f3bf 8f6f 	isb	sy
 800b350:	f3bf 8f4f 	dsb	sy
 800b354:	60bb      	str	r3, [r7, #8]
}
 800b356:	bf00      	nop
 800b358:	bf00      	nop
 800b35a:	e7fd      	b.n	800b358 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b360:	1e5a      	subs	r2, r3, #1
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b36e:	429a      	cmp	r2, r3
 800b370:	d02c      	beq.n	800b3cc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b376:	2b00      	cmp	r3, #0
 800b378:	d128      	bne.n	800b3cc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	3304      	adds	r3, #4
 800b37e:	4618      	mov	r0, r3
 800b380:	f7fd ff3c 	bl	80091fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b390:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b39c:	4b0f      	ldr	r3, [pc, #60]	@ (800b3dc <xTaskPriorityDisinherit+0xd8>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d903      	bls.n	800b3ac <xTaskPriorityDisinherit+0xa8>
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3a8:	4a0c      	ldr	r2, [pc, #48]	@ (800b3dc <xTaskPriorityDisinherit+0xd8>)
 800b3aa:	6013      	str	r3, [r2, #0]
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3b0:	4613      	mov	r3, r2
 800b3b2:	009b      	lsls	r3, r3, #2
 800b3b4:	4413      	add	r3, r2
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	4a09      	ldr	r2, [pc, #36]	@ (800b3e0 <xTaskPriorityDisinherit+0xdc>)
 800b3ba:	441a      	add	r2, r3
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	3304      	adds	r3, #4
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	4610      	mov	r0, r2
 800b3c4:	f7fd febd 	bl	8009142 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b3cc:	697b      	ldr	r3, [r7, #20]
	}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3718      	adds	r7, #24
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	20005564 	.word	0x20005564
 800b3dc:	20005a40 	.word	0x20005a40
 800b3e0:	20005568 	.word	0x20005568

0800b3e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b088      	sub	sp, #32
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d06c      	beq.n	800b4d6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b3fc:	69bb      	ldr	r3, [r7, #24]
 800b3fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b400:	2b00      	cmp	r3, #0
 800b402:	d10b      	bne.n	800b41c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b408:	f383 8811 	msr	BASEPRI, r3
 800b40c:	f3bf 8f6f 	isb	sy
 800b410:	f3bf 8f4f 	dsb	sy
 800b414:	60fb      	str	r3, [r7, #12]
}
 800b416:	bf00      	nop
 800b418:	bf00      	nop
 800b41a:	e7fd      	b.n	800b418 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b41c:	69bb      	ldr	r3, [r7, #24]
 800b41e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b420:	683a      	ldr	r2, [r7, #0]
 800b422:	429a      	cmp	r2, r3
 800b424:	d902      	bls.n	800b42c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	61fb      	str	r3, [r7, #28]
 800b42a:	e002      	b.n	800b432 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b42c:	69bb      	ldr	r3, [r7, #24]
 800b42e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b430:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b432:	69bb      	ldr	r3, [r7, #24]
 800b434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b436:	69fa      	ldr	r2, [r7, #28]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d04c      	beq.n	800b4d6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b43c:	69bb      	ldr	r3, [r7, #24]
 800b43e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b440:	697a      	ldr	r2, [r7, #20]
 800b442:	429a      	cmp	r2, r3
 800b444:	d147      	bne.n	800b4d6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b446:	4b26      	ldr	r3, [pc, #152]	@ (800b4e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	69ba      	ldr	r2, [r7, #24]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d10b      	bne.n	800b468 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800b450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b454:	f383 8811 	msr	BASEPRI, r3
 800b458:	f3bf 8f6f 	isb	sy
 800b45c:	f3bf 8f4f 	dsb	sy
 800b460:	60bb      	str	r3, [r7, #8]
}
 800b462:	bf00      	nop
 800b464:	bf00      	nop
 800b466:	e7fd      	b.n	800b464 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b46c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b46e:	69bb      	ldr	r3, [r7, #24]
 800b470:	69fa      	ldr	r2, [r7, #28]
 800b472:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	699b      	ldr	r3, [r3, #24]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	db04      	blt.n	800b486 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b482:	69bb      	ldr	r3, [r7, #24]
 800b484:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b486:	69bb      	ldr	r3, [r7, #24]
 800b488:	6959      	ldr	r1, [r3, #20]
 800b48a:	693a      	ldr	r2, [r7, #16]
 800b48c:	4613      	mov	r3, r2
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	4413      	add	r3, r2
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	4a13      	ldr	r2, [pc, #76]	@ (800b4e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b496:	4413      	add	r3, r2
 800b498:	4299      	cmp	r1, r3
 800b49a:	d11c      	bne.n	800b4d6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b49c:	69bb      	ldr	r3, [r7, #24]
 800b49e:	3304      	adds	r3, #4
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7fd feab 	bl	80091fc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4aa:	4b0f      	ldr	r3, [pc, #60]	@ (800b4e8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d903      	bls.n	800b4ba <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4b6:	4a0c      	ldr	r2, [pc, #48]	@ (800b4e8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b4b8:	6013      	str	r3, [r2, #0]
 800b4ba:	69bb      	ldr	r3, [r7, #24]
 800b4bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4be:	4613      	mov	r3, r2
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	4413      	add	r3, r2
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	4a07      	ldr	r2, [pc, #28]	@ (800b4e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b4c8:	441a      	add	r2, r3
 800b4ca:	69bb      	ldr	r3, [r7, #24]
 800b4cc:	3304      	adds	r3, #4
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	4610      	mov	r0, r2
 800b4d2:	f7fd fe36 	bl	8009142 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b4d6:	bf00      	nop
 800b4d8:	3720      	adds	r7, #32
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	20005564 	.word	0x20005564
 800b4e4:	20005568 	.word	0x20005568
 800b4e8:	20005a40 	.word	0x20005a40

0800b4ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b4ec:	b480      	push	{r7}
 800b4ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b4f0:	4b07      	ldr	r3, [pc, #28]	@ (800b510 <pvTaskIncrementMutexHeldCount+0x24>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d004      	beq.n	800b502 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b4f8:	4b05      	ldr	r3, [pc, #20]	@ (800b510 <pvTaskIncrementMutexHeldCount+0x24>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b4fe:	3201      	adds	r2, #1
 800b500:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800b502:	4b03      	ldr	r3, [pc, #12]	@ (800b510 <pvTaskIncrementMutexHeldCount+0x24>)
 800b504:	681b      	ldr	r3, [r3, #0]
	}
 800b506:	4618      	mov	r0, r3
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr
 800b510:	20005564 	.word	0x20005564

0800b514 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b51e:	4b21      	ldr	r3, [pc, #132]	@ (800b5a4 <prvAddCurrentTaskToDelayedList+0x90>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b524:	4b20      	ldr	r3, [pc, #128]	@ (800b5a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	3304      	adds	r3, #4
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7fd fe66 	bl	80091fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b536:	d10a      	bne.n	800b54e <prvAddCurrentTaskToDelayedList+0x3a>
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d007      	beq.n	800b54e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b53e:	4b1a      	ldr	r3, [pc, #104]	@ (800b5a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	3304      	adds	r3, #4
 800b544:	4619      	mov	r1, r3
 800b546:	4819      	ldr	r0, [pc, #100]	@ (800b5ac <prvAddCurrentTaskToDelayedList+0x98>)
 800b548:	f7fd fdfb 	bl	8009142 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b54c:	e026      	b.n	800b59c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b54e:	68fa      	ldr	r2, [r7, #12]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	4413      	add	r3, r2
 800b554:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b556:	4b14      	ldr	r3, [pc, #80]	@ (800b5a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	68ba      	ldr	r2, [r7, #8]
 800b55c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b55e:	68ba      	ldr	r2, [r7, #8]
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	429a      	cmp	r2, r3
 800b564:	d209      	bcs.n	800b57a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b566:	4b12      	ldr	r3, [pc, #72]	@ (800b5b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	4b0f      	ldr	r3, [pc, #60]	@ (800b5a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	3304      	adds	r3, #4
 800b570:	4619      	mov	r1, r3
 800b572:	4610      	mov	r0, r2
 800b574:	f7fd fe09 	bl	800918a <vListInsert>
}
 800b578:	e010      	b.n	800b59c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b57a:	4b0e      	ldr	r3, [pc, #56]	@ (800b5b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b57c:	681a      	ldr	r2, [r3, #0]
 800b57e:	4b0a      	ldr	r3, [pc, #40]	@ (800b5a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	3304      	adds	r3, #4
 800b584:	4619      	mov	r1, r3
 800b586:	4610      	mov	r0, r2
 800b588:	f7fd fdff 	bl	800918a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b58c:	4b0a      	ldr	r3, [pc, #40]	@ (800b5b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	68ba      	ldr	r2, [r7, #8]
 800b592:	429a      	cmp	r2, r3
 800b594:	d202      	bcs.n	800b59c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b596:	4a08      	ldr	r2, [pc, #32]	@ (800b5b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	6013      	str	r3, [r2, #0]
}
 800b59c:	bf00      	nop
 800b59e:	3710      	adds	r7, #16
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}
 800b5a4:	20005a3c 	.word	0x20005a3c
 800b5a8:	20005564 	.word	0x20005564
 800b5ac:	20005a24 	.word	0x20005a24
 800b5b0:	200059f4 	.word	0x200059f4
 800b5b4:	200059f0 	.word	0x200059f0
 800b5b8:	20005a58 	.word	0x20005a58

0800b5bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b08a      	sub	sp, #40	@ 0x28
 800b5c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b5c6:	f000 fb13 	bl	800bbf0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b5ca:	4b1d      	ldr	r3, [pc, #116]	@ (800b640 <xTimerCreateTimerTask+0x84>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d021      	beq.n	800b616 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b5da:	1d3a      	adds	r2, r7, #4
 800b5dc:	f107 0108 	add.w	r1, r7, #8
 800b5e0:	f107 030c 	add.w	r3, r7, #12
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7fd fb77 	bl	8008cd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b5ea:	6879      	ldr	r1, [r7, #4]
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	9202      	str	r2, [sp, #8]
 800b5f2:	9301      	str	r3, [sp, #4]
 800b5f4:	2302      	movs	r3, #2
 800b5f6:	9300      	str	r3, [sp, #0]
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	460a      	mov	r2, r1
 800b5fc:	4911      	ldr	r1, [pc, #68]	@ (800b644 <xTimerCreateTimerTask+0x88>)
 800b5fe:	4812      	ldr	r0, [pc, #72]	@ (800b648 <xTimerCreateTimerTask+0x8c>)
 800b600:	f7fe ff92 	bl	800a528 <xTaskCreateStatic>
 800b604:	4603      	mov	r3, r0
 800b606:	4a11      	ldr	r2, [pc, #68]	@ (800b64c <xTimerCreateTimerTask+0x90>)
 800b608:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b60a:	4b10      	ldr	r3, [pc, #64]	@ (800b64c <xTimerCreateTimerTask+0x90>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d001      	beq.n	800b616 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b612:	2301      	movs	r3, #1
 800b614:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d10b      	bne.n	800b634 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b620:	f383 8811 	msr	BASEPRI, r3
 800b624:	f3bf 8f6f 	isb	sy
 800b628:	f3bf 8f4f 	dsb	sy
 800b62c:	613b      	str	r3, [r7, #16]
}
 800b62e:	bf00      	nop
 800b630:	bf00      	nop
 800b632:	e7fd      	b.n	800b630 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b634:	697b      	ldr	r3, [r7, #20]
}
 800b636:	4618      	mov	r0, r3
 800b638:	3718      	adds	r7, #24
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	20005a94 	.word	0x20005a94
 800b644:	0800ce30 	.word	0x0800ce30
 800b648:	0800b789 	.word	0x0800b789
 800b64c:	20005a98 	.word	0x20005a98

0800b650 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b08a      	sub	sp, #40	@ 0x28
 800b654:	af00      	add	r7, sp, #0
 800b656:	60f8      	str	r0, [r7, #12]
 800b658:	60b9      	str	r1, [r7, #8]
 800b65a:	607a      	str	r2, [r7, #4]
 800b65c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b65e:	2300      	movs	r3, #0
 800b660:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d10b      	bne.n	800b680 <xTimerGenericCommand+0x30>
	__asm volatile
 800b668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b66c:	f383 8811 	msr	BASEPRI, r3
 800b670:	f3bf 8f6f 	isb	sy
 800b674:	f3bf 8f4f 	dsb	sy
 800b678:	623b      	str	r3, [r7, #32]
}
 800b67a:	bf00      	nop
 800b67c:	bf00      	nop
 800b67e:	e7fd      	b.n	800b67c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b680:	4b19      	ldr	r3, [pc, #100]	@ (800b6e8 <xTimerGenericCommand+0x98>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d02a      	beq.n	800b6de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	2b05      	cmp	r3, #5
 800b698:	dc18      	bgt.n	800b6cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b69a:	f7ff fdad 	bl	800b1f8 <xTaskGetSchedulerState>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b02      	cmp	r3, #2
 800b6a2:	d109      	bne.n	800b6b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b6a4:	4b10      	ldr	r3, [pc, #64]	@ (800b6e8 <xTimerGenericCommand+0x98>)
 800b6a6:	6818      	ldr	r0, [r3, #0]
 800b6a8:	f107 0110 	add.w	r1, r7, #16
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6b0:	f7fe fa22 	bl	8009af8 <xQueueGenericSend>
 800b6b4:	6278      	str	r0, [r7, #36]	@ 0x24
 800b6b6:	e012      	b.n	800b6de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b6b8:	4b0b      	ldr	r3, [pc, #44]	@ (800b6e8 <xTimerGenericCommand+0x98>)
 800b6ba:	6818      	ldr	r0, [r3, #0]
 800b6bc:	f107 0110 	add.w	r1, r7, #16
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f7fe fa18 	bl	8009af8 <xQueueGenericSend>
 800b6c8:	6278      	str	r0, [r7, #36]	@ 0x24
 800b6ca:	e008      	b.n	800b6de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b6cc:	4b06      	ldr	r3, [pc, #24]	@ (800b6e8 <xTimerGenericCommand+0x98>)
 800b6ce:	6818      	ldr	r0, [r3, #0]
 800b6d0:	f107 0110 	add.w	r1, r7, #16
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	683a      	ldr	r2, [r7, #0]
 800b6d8:	f7fe fb10 	bl	8009cfc <xQueueGenericSendFromISR>
 800b6dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3728      	adds	r7, #40	@ 0x28
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	20005a94 	.word	0x20005a94

0800b6ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b088      	sub	sp, #32
 800b6f0:	af02      	add	r7, sp, #8
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6f6:	4b23      	ldr	r3, [pc, #140]	@ (800b784 <prvProcessExpiredTimer+0x98>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	68db      	ldr	r3, [r3, #12]
 800b6fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	3304      	adds	r3, #4
 800b704:	4618      	mov	r0, r3
 800b706:	f7fd fd79 	bl	80091fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b710:	f003 0304 	and.w	r3, r3, #4
 800b714:	2b00      	cmp	r3, #0
 800b716:	d023      	beq.n	800b760 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	699a      	ldr	r2, [r3, #24]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	18d1      	adds	r1, r2, r3
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	683a      	ldr	r2, [r7, #0]
 800b724:	6978      	ldr	r0, [r7, #20]
 800b726:	f000 f8d5 	bl	800b8d4 <prvInsertTimerInActiveList>
 800b72a:	4603      	mov	r3, r0
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d020      	beq.n	800b772 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b730:	2300      	movs	r3, #0
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	2300      	movs	r3, #0
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	2100      	movs	r1, #0
 800b73a:	6978      	ldr	r0, [r7, #20]
 800b73c:	f7ff ff88 	bl	800b650 <xTimerGenericCommand>
 800b740:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d114      	bne.n	800b772 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b74c:	f383 8811 	msr	BASEPRI, r3
 800b750:	f3bf 8f6f 	isb	sy
 800b754:	f3bf 8f4f 	dsb	sy
 800b758:	60fb      	str	r3, [r7, #12]
}
 800b75a:	bf00      	nop
 800b75c:	bf00      	nop
 800b75e:	e7fd      	b.n	800b75c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b766:	f023 0301 	bic.w	r3, r3, #1
 800b76a:	b2da      	uxtb	r2, r3
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	6a1b      	ldr	r3, [r3, #32]
 800b776:	6978      	ldr	r0, [r7, #20]
 800b778:	4798      	blx	r3
}
 800b77a:	bf00      	nop
 800b77c:	3718      	adds	r7, #24
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	20005a8c 	.word	0x20005a8c

0800b788 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b790:	f107 0308 	add.w	r3, r7, #8
 800b794:	4618      	mov	r0, r3
 800b796:	f000 f859 	bl	800b84c <prvGetNextExpireTime>
 800b79a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	4619      	mov	r1, r3
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	f000 f805 	bl	800b7b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b7a6:	f000 f8d7 	bl	800b958 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b7aa:	bf00      	nop
 800b7ac:	e7f0      	b.n	800b790 <prvTimerTask+0x8>
	...

0800b7b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b7ba:	f7ff f919 	bl	800a9f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b7be:	f107 0308 	add.w	r3, r7, #8
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f000 f866 	bl	800b894 <prvSampleTimeNow>
 800b7c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d130      	bne.n	800b832 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d10a      	bne.n	800b7ec <prvProcessTimerOrBlockTask+0x3c>
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d806      	bhi.n	800b7ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b7de:	f7ff f915 	bl	800aa0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b7e2:	68f9      	ldr	r1, [r7, #12]
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f7ff ff81 	bl	800b6ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b7ea:	e024      	b.n	800b836 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d008      	beq.n	800b804 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b7f2:	4b13      	ldr	r3, [pc, #76]	@ (800b840 <prvProcessTimerOrBlockTask+0x90>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d101      	bne.n	800b800 <prvProcessTimerOrBlockTask+0x50>
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	e000      	b.n	800b802 <prvProcessTimerOrBlockTask+0x52>
 800b800:	2300      	movs	r3, #0
 800b802:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b804:	4b0f      	ldr	r3, [pc, #60]	@ (800b844 <prvProcessTimerOrBlockTask+0x94>)
 800b806:	6818      	ldr	r0, [r3, #0]
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	1ad3      	subs	r3, r2, r3
 800b80e:	683a      	ldr	r2, [r7, #0]
 800b810:	4619      	mov	r1, r3
 800b812:	f7fe fe55 	bl	800a4c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b816:	f7ff f8f9 	bl	800aa0c <xTaskResumeAll>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d10a      	bne.n	800b836 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b820:	4b09      	ldr	r3, [pc, #36]	@ (800b848 <prvProcessTimerOrBlockTask+0x98>)
 800b822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b826:	601a      	str	r2, [r3, #0]
 800b828:	f3bf 8f4f 	dsb	sy
 800b82c:	f3bf 8f6f 	isb	sy
}
 800b830:	e001      	b.n	800b836 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b832:	f7ff f8eb 	bl	800aa0c <xTaskResumeAll>
}
 800b836:	bf00      	nop
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	20005a90 	.word	0x20005a90
 800b844:	20005a94 	.word	0x20005a94
 800b848:	e000ed04 	.word	0xe000ed04

0800b84c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b84c:	b480      	push	{r7}
 800b84e:	b085      	sub	sp, #20
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b854:	4b0e      	ldr	r3, [pc, #56]	@ (800b890 <prvGetNextExpireTime+0x44>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d101      	bne.n	800b862 <prvGetNextExpireTime+0x16>
 800b85e:	2201      	movs	r2, #1
 800b860:	e000      	b.n	800b864 <prvGetNextExpireTime+0x18>
 800b862:	2200      	movs	r2, #0
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d105      	bne.n	800b87c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b870:	4b07      	ldr	r3, [pc, #28]	@ (800b890 <prvGetNextExpireTime+0x44>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	68db      	ldr	r3, [r3, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	60fb      	str	r3, [r7, #12]
 800b87a:	e001      	b.n	800b880 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b87c:	2300      	movs	r3, #0
 800b87e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b880:	68fb      	ldr	r3, [r7, #12]
}
 800b882:	4618      	mov	r0, r3
 800b884:	3714      	adds	r7, #20
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop
 800b890:	20005a8c 	.word	0x20005a8c

0800b894 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b89c:	f7ff f954 	bl	800ab48 <xTaskGetTickCount>
 800b8a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b8a2:	4b0b      	ldr	r3, [pc, #44]	@ (800b8d0 <prvSampleTimeNow+0x3c>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	68fa      	ldr	r2, [r7, #12]
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d205      	bcs.n	800b8b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b8ac:	f000 f93a 	bl	800bb24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	601a      	str	r2, [r3, #0]
 800b8b6:	e002      	b.n	800b8be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b8be:	4a04      	ldr	r2, [pc, #16]	@ (800b8d0 <prvSampleTimeNow+0x3c>)
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3710      	adds	r7, #16
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	20005a9c 	.word	0x20005a9c

0800b8d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b086      	sub	sp, #24
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	60b9      	str	r1, [r7, #8]
 800b8de:	607a      	str	r2, [r7, #4]
 800b8e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	68ba      	ldr	r2, [r7, #8]
 800b8ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	68fa      	ldr	r2, [r7, #12]
 800b8f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b8f2:	68ba      	ldr	r2, [r7, #8]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d812      	bhi.n	800b920 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	1ad2      	subs	r2, r2, r3
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	699b      	ldr	r3, [r3, #24]
 800b904:	429a      	cmp	r2, r3
 800b906:	d302      	bcc.n	800b90e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b908:	2301      	movs	r3, #1
 800b90a:	617b      	str	r3, [r7, #20]
 800b90c:	e01b      	b.n	800b946 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b90e:	4b10      	ldr	r3, [pc, #64]	@ (800b950 <prvInsertTimerInActiveList+0x7c>)
 800b910:	681a      	ldr	r2, [r3, #0]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	3304      	adds	r3, #4
 800b916:	4619      	mov	r1, r3
 800b918:	4610      	mov	r0, r2
 800b91a:	f7fd fc36 	bl	800918a <vListInsert>
 800b91e:	e012      	b.n	800b946 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	429a      	cmp	r2, r3
 800b926:	d206      	bcs.n	800b936 <prvInsertTimerInActiveList+0x62>
 800b928:	68ba      	ldr	r2, [r7, #8]
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d302      	bcc.n	800b936 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b930:	2301      	movs	r3, #1
 800b932:	617b      	str	r3, [r7, #20]
 800b934:	e007      	b.n	800b946 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b936:	4b07      	ldr	r3, [pc, #28]	@ (800b954 <prvInsertTimerInActiveList+0x80>)
 800b938:	681a      	ldr	r2, [r3, #0]
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	3304      	adds	r3, #4
 800b93e:	4619      	mov	r1, r3
 800b940:	4610      	mov	r0, r2
 800b942:	f7fd fc22 	bl	800918a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b946:	697b      	ldr	r3, [r7, #20]
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3718      	adds	r7, #24
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	20005a90 	.word	0x20005a90
 800b954:	20005a8c 	.word	0x20005a8c

0800b958 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b08e      	sub	sp, #56	@ 0x38
 800b95c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b95e:	e0ce      	b.n	800bafe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2b00      	cmp	r3, #0
 800b964:	da19      	bge.n	800b99a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b966:	1d3b      	adds	r3, r7, #4
 800b968:	3304      	adds	r3, #4
 800b96a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b96c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d10b      	bne.n	800b98a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b976:	f383 8811 	msr	BASEPRI, r3
 800b97a:	f3bf 8f6f 	isb	sy
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	61fb      	str	r3, [r7, #28]
}
 800b984:	bf00      	nop
 800b986:	bf00      	nop
 800b988:	e7fd      	b.n	800b986 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b98a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b990:	6850      	ldr	r0, [r2, #4]
 800b992:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b994:	6892      	ldr	r2, [r2, #8]
 800b996:	4611      	mov	r1, r2
 800b998:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	f2c0 80ae 	blt.w	800bafe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9a8:	695b      	ldr	r3, [r3, #20]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d004      	beq.n	800b9b8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b0:	3304      	adds	r3, #4
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7fd fc22 	bl	80091fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b9b8:	463b      	mov	r3, r7
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7ff ff6a 	bl	800b894 <prvSampleTimeNow>
 800b9c0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2b09      	cmp	r3, #9
 800b9c6:	f200 8097 	bhi.w	800baf8 <prvProcessReceivedCommands+0x1a0>
 800b9ca:	a201      	add	r2, pc, #4	@ (adr r2, 800b9d0 <prvProcessReceivedCommands+0x78>)
 800b9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d0:	0800b9f9 	.word	0x0800b9f9
 800b9d4:	0800b9f9 	.word	0x0800b9f9
 800b9d8:	0800b9f9 	.word	0x0800b9f9
 800b9dc:	0800ba6f 	.word	0x0800ba6f
 800b9e0:	0800ba83 	.word	0x0800ba83
 800b9e4:	0800bacf 	.word	0x0800bacf
 800b9e8:	0800b9f9 	.word	0x0800b9f9
 800b9ec:	0800b9f9 	.word	0x0800b9f9
 800b9f0:	0800ba6f 	.word	0x0800ba6f
 800b9f4:	0800ba83 	.word	0x0800ba83
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b9f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9fe:	f043 0301 	orr.w	r3, r3, #1
 800ba02:	b2da      	uxtb	r2, r3
 800ba04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ba0a:	68ba      	ldr	r2, [r7, #8]
 800ba0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba0e:	699b      	ldr	r3, [r3, #24]
 800ba10:	18d1      	adds	r1, r2, r3
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba18:	f7ff ff5c 	bl	800b8d4 <prvInsertTimerInActiveList>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d06c      	beq.n	800bafc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba24:	6a1b      	ldr	r3, [r3, #32]
 800ba26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba28:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba30:	f003 0304 	and.w	r3, r3, #4
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d061      	beq.n	800bafc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ba38:	68ba      	ldr	r2, [r7, #8]
 800ba3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba3c:	699b      	ldr	r3, [r3, #24]
 800ba3e:	441a      	add	r2, r3
 800ba40:	2300      	movs	r3, #0
 800ba42:	9300      	str	r3, [sp, #0]
 800ba44:	2300      	movs	r3, #0
 800ba46:	2100      	movs	r1, #0
 800ba48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba4a:	f7ff fe01 	bl	800b650 <xTimerGenericCommand>
 800ba4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ba50:	6a3b      	ldr	r3, [r7, #32]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d152      	bne.n	800bafc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ba56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba5a:	f383 8811 	msr	BASEPRI, r3
 800ba5e:	f3bf 8f6f 	isb	sy
 800ba62:	f3bf 8f4f 	dsb	sy
 800ba66:	61bb      	str	r3, [r7, #24]
}
 800ba68:	bf00      	nop
 800ba6a:	bf00      	nop
 800ba6c:	e7fd      	b.n	800ba6a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba74:	f023 0301 	bic.w	r3, r3, #1
 800ba78:	b2da      	uxtb	r2, r3
 800ba7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ba80:	e03d      	b.n	800bafe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ba82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba88:	f043 0301 	orr.w	r3, r3, #1
 800ba8c:	b2da      	uxtb	r2, r3
 800ba8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba90:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ba94:	68ba      	ldr	r2, [r7, #8]
 800ba96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba98:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ba9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba9c:	699b      	ldr	r3, [r3, #24]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d10b      	bne.n	800baba <prvProcessReceivedCommands+0x162>
	__asm volatile
 800baa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baa6:	f383 8811 	msr	BASEPRI, r3
 800baaa:	f3bf 8f6f 	isb	sy
 800baae:	f3bf 8f4f 	dsb	sy
 800bab2:	617b      	str	r3, [r7, #20]
}
 800bab4:	bf00      	nop
 800bab6:	bf00      	nop
 800bab8:	e7fd      	b.n	800bab6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800baba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800babc:	699a      	ldr	r2, [r3, #24]
 800babe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac0:	18d1      	adds	r1, r2, r3
 800bac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bac6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bac8:	f7ff ff04 	bl	800b8d4 <prvInsertTimerInActiveList>
					break;
 800bacc:	e017      	b.n	800bafe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bad0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bad4:	f003 0302 	and.w	r3, r3, #2
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d103      	bne.n	800bae4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800badc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bade:	f7fd f9e3 	bl	8008ea8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bae2:	e00c      	b.n	800bafe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bae6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800baea:	f023 0301 	bic.w	r3, r3, #1
 800baee:	b2da      	uxtb	r2, r3
 800baf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baf2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800baf6:	e002      	b.n	800bafe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800baf8:	bf00      	nop
 800bafa:	e000      	b.n	800bafe <prvProcessReceivedCommands+0x1a6>
					break;
 800bafc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bafe:	4b08      	ldr	r3, [pc, #32]	@ (800bb20 <prvProcessReceivedCommands+0x1c8>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	1d39      	adds	r1, r7, #4
 800bb04:	2200      	movs	r2, #0
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7fe f996 	bl	8009e38 <xQueueReceive>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	f47f af26 	bne.w	800b960 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bb14:	bf00      	nop
 800bb16:	bf00      	nop
 800bb18:	3730      	adds	r7, #48	@ 0x30
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	20005a94 	.word	0x20005a94

0800bb24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b088      	sub	sp, #32
 800bb28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb2a:	e049      	b.n	800bbc0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb2c:	4b2e      	ldr	r3, [pc, #184]	@ (800bbe8 <prvSwitchTimerLists+0xc4>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb36:	4b2c      	ldr	r3, [pc, #176]	@ (800bbe8 <prvSwitchTimerLists+0xc4>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	68db      	ldr	r3, [r3, #12]
 800bb3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	3304      	adds	r3, #4
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7fd fb59 	bl	80091fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	6a1b      	ldr	r3, [r3, #32]
 800bb4e:	68f8      	ldr	r0, [r7, #12]
 800bb50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb58:	f003 0304 	and.w	r3, r3, #4
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d02f      	beq.n	800bbc0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	699b      	ldr	r3, [r3, #24]
 800bb64:	693a      	ldr	r2, [r7, #16]
 800bb66:	4413      	add	r3, r2
 800bb68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bb6a:	68ba      	ldr	r2, [r7, #8]
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d90e      	bls.n	800bb90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	68ba      	ldr	r2, [r7, #8]
 800bb76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	68fa      	ldr	r2, [r7, #12]
 800bb7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb7e:	4b1a      	ldr	r3, [pc, #104]	@ (800bbe8 <prvSwitchTimerLists+0xc4>)
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	3304      	adds	r3, #4
 800bb86:	4619      	mov	r1, r3
 800bb88:	4610      	mov	r0, r2
 800bb8a:	f7fd fafe 	bl	800918a <vListInsert>
 800bb8e:	e017      	b.n	800bbc0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb90:	2300      	movs	r3, #0
 800bb92:	9300      	str	r3, [sp, #0]
 800bb94:	2300      	movs	r3, #0
 800bb96:	693a      	ldr	r2, [r7, #16]
 800bb98:	2100      	movs	r1, #0
 800bb9a:	68f8      	ldr	r0, [r7, #12]
 800bb9c:	f7ff fd58 	bl	800b650 <xTimerGenericCommand>
 800bba0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d10b      	bne.n	800bbc0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbac:	f383 8811 	msr	BASEPRI, r3
 800bbb0:	f3bf 8f6f 	isb	sy
 800bbb4:	f3bf 8f4f 	dsb	sy
 800bbb8:	603b      	str	r3, [r7, #0]
}
 800bbba:	bf00      	nop
 800bbbc:	bf00      	nop
 800bbbe:	e7fd      	b.n	800bbbc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bbc0:	4b09      	ldr	r3, [pc, #36]	@ (800bbe8 <prvSwitchTimerLists+0xc4>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d1b0      	bne.n	800bb2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bbca:	4b07      	ldr	r3, [pc, #28]	@ (800bbe8 <prvSwitchTimerLists+0xc4>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bbd0:	4b06      	ldr	r3, [pc, #24]	@ (800bbec <prvSwitchTimerLists+0xc8>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a04      	ldr	r2, [pc, #16]	@ (800bbe8 <prvSwitchTimerLists+0xc4>)
 800bbd6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bbd8:	4a04      	ldr	r2, [pc, #16]	@ (800bbec <prvSwitchTimerLists+0xc8>)
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	6013      	str	r3, [r2, #0]
}
 800bbde:	bf00      	nop
 800bbe0:	3718      	adds	r7, #24
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	20005a8c 	.word	0x20005a8c
 800bbec:	20005a90 	.word	0x20005a90

0800bbf0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bbf6:	f7fd fc5f 	bl	80094b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bbfa:	4b15      	ldr	r3, [pc, #84]	@ (800bc50 <prvCheckForValidListAndQueue+0x60>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d120      	bne.n	800bc44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bc02:	4814      	ldr	r0, [pc, #80]	@ (800bc54 <prvCheckForValidListAndQueue+0x64>)
 800bc04:	f7fd fa70 	bl	80090e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bc08:	4813      	ldr	r0, [pc, #76]	@ (800bc58 <prvCheckForValidListAndQueue+0x68>)
 800bc0a:	f7fd fa6d 	bl	80090e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bc0e:	4b13      	ldr	r3, [pc, #76]	@ (800bc5c <prvCheckForValidListAndQueue+0x6c>)
 800bc10:	4a10      	ldr	r2, [pc, #64]	@ (800bc54 <prvCheckForValidListAndQueue+0x64>)
 800bc12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bc14:	4b12      	ldr	r3, [pc, #72]	@ (800bc60 <prvCheckForValidListAndQueue+0x70>)
 800bc16:	4a10      	ldr	r2, [pc, #64]	@ (800bc58 <prvCheckForValidListAndQueue+0x68>)
 800bc18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	9300      	str	r3, [sp, #0]
 800bc1e:	4b11      	ldr	r3, [pc, #68]	@ (800bc64 <prvCheckForValidListAndQueue+0x74>)
 800bc20:	4a11      	ldr	r2, [pc, #68]	@ (800bc68 <prvCheckForValidListAndQueue+0x78>)
 800bc22:	2110      	movs	r1, #16
 800bc24:	200a      	movs	r0, #10
 800bc26:	f7fd fdd3 	bl	80097d0 <xQueueGenericCreateStatic>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	4a08      	ldr	r2, [pc, #32]	@ (800bc50 <prvCheckForValidListAndQueue+0x60>)
 800bc2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bc30:	4b07      	ldr	r3, [pc, #28]	@ (800bc50 <prvCheckForValidListAndQueue+0x60>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d005      	beq.n	800bc44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bc38:	4b05      	ldr	r3, [pc, #20]	@ (800bc50 <prvCheckForValidListAndQueue+0x60>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	490b      	ldr	r1, [pc, #44]	@ (800bc6c <prvCheckForValidListAndQueue+0x7c>)
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7fe fc14 	bl	800a46c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc44:	f7fd fc6a 	bl	800951c <vPortExitCritical>
}
 800bc48:	bf00      	nop
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	20005a94 	.word	0x20005a94
 800bc54:	20005a64 	.word	0x20005a64
 800bc58:	20005a78 	.word	0x20005a78
 800bc5c:	20005a8c 	.word	0x20005a8c
 800bc60:	20005a90 	.word	0x20005a90
 800bc64:	20005b40 	.word	0x20005b40
 800bc68:	20005aa0 	.word	0x20005aa0
 800bc6c:	0800ce38 	.word	0x0800ce38

0800bc70 <malloc>:
 800bc70:	4b02      	ldr	r3, [pc, #8]	@ (800bc7c <malloc+0xc>)
 800bc72:	4601      	mov	r1, r0
 800bc74:	6818      	ldr	r0, [r3, #0]
 800bc76:	f000 b82d 	b.w	800bcd4 <_malloc_r>
 800bc7a:	bf00      	nop
 800bc7c:	2000010c 	.word	0x2000010c

0800bc80 <free>:
 800bc80:	4b02      	ldr	r3, [pc, #8]	@ (800bc8c <free+0xc>)
 800bc82:	4601      	mov	r1, r0
 800bc84:	6818      	ldr	r0, [r3, #0]
 800bc86:	f000 b991 	b.w	800bfac <_free_r>
 800bc8a:	bf00      	nop
 800bc8c:	2000010c 	.word	0x2000010c

0800bc90 <sbrk_aligned>:
 800bc90:	b570      	push	{r4, r5, r6, lr}
 800bc92:	4e0f      	ldr	r6, [pc, #60]	@ (800bcd0 <sbrk_aligned+0x40>)
 800bc94:	460c      	mov	r4, r1
 800bc96:	6831      	ldr	r1, [r6, #0]
 800bc98:	4605      	mov	r5, r0
 800bc9a:	b911      	cbnz	r1, 800bca2 <sbrk_aligned+0x12>
 800bc9c:	f000 f934 	bl	800bf08 <_sbrk_r>
 800bca0:	6030      	str	r0, [r6, #0]
 800bca2:	4621      	mov	r1, r4
 800bca4:	4628      	mov	r0, r5
 800bca6:	f000 f92f 	bl	800bf08 <_sbrk_r>
 800bcaa:	1c43      	adds	r3, r0, #1
 800bcac:	d103      	bne.n	800bcb6 <sbrk_aligned+0x26>
 800bcae:	f04f 34ff 	mov.w	r4, #4294967295
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	bd70      	pop	{r4, r5, r6, pc}
 800bcb6:	1cc4      	adds	r4, r0, #3
 800bcb8:	f024 0403 	bic.w	r4, r4, #3
 800bcbc:	42a0      	cmp	r0, r4
 800bcbe:	d0f8      	beq.n	800bcb2 <sbrk_aligned+0x22>
 800bcc0:	1a21      	subs	r1, r4, r0
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	f000 f920 	bl	800bf08 <_sbrk_r>
 800bcc8:	3001      	adds	r0, #1
 800bcca:	d1f2      	bne.n	800bcb2 <sbrk_aligned+0x22>
 800bccc:	e7ef      	b.n	800bcae <sbrk_aligned+0x1e>
 800bcce:	bf00      	nop
 800bcd0:	20005b90 	.word	0x20005b90

0800bcd4 <_malloc_r>:
 800bcd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcd8:	1ccd      	adds	r5, r1, #3
 800bcda:	f025 0503 	bic.w	r5, r5, #3
 800bcde:	3508      	adds	r5, #8
 800bce0:	2d0c      	cmp	r5, #12
 800bce2:	bf38      	it	cc
 800bce4:	250c      	movcc	r5, #12
 800bce6:	2d00      	cmp	r5, #0
 800bce8:	4606      	mov	r6, r0
 800bcea:	db01      	blt.n	800bcf0 <_malloc_r+0x1c>
 800bcec:	42a9      	cmp	r1, r5
 800bcee:	d904      	bls.n	800bcfa <_malloc_r+0x26>
 800bcf0:	230c      	movs	r3, #12
 800bcf2:	6033      	str	r3, [r6, #0]
 800bcf4:	2000      	movs	r0, #0
 800bcf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bdd0 <_malloc_r+0xfc>
 800bcfe:	f000 f869 	bl	800bdd4 <__malloc_lock>
 800bd02:	f8d8 3000 	ldr.w	r3, [r8]
 800bd06:	461c      	mov	r4, r3
 800bd08:	bb44      	cbnz	r4, 800bd5c <_malloc_r+0x88>
 800bd0a:	4629      	mov	r1, r5
 800bd0c:	4630      	mov	r0, r6
 800bd0e:	f7ff ffbf 	bl	800bc90 <sbrk_aligned>
 800bd12:	1c43      	adds	r3, r0, #1
 800bd14:	4604      	mov	r4, r0
 800bd16:	d158      	bne.n	800bdca <_malloc_r+0xf6>
 800bd18:	f8d8 4000 	ldr.w	r4, [r8]
 800bd1c:	4627      	mov	r7, r4
 800bd1e:	2f00      	cmp	r7, #0
 800bd20:	d143      	bne.n	800bdaa <_malloc_r+0xd6>
 800bd22:	2c00      	cmp	r4, #0
 800bd24:	d04b      	beq.n	800bdbe <_malloc_r+0xea>
 800bd26:	6823      	ldr	r3, [r4, #0]
 800bd28:	4639      	mov	r1, r7
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	eb04 0903 	add.w	r9, r4, r3
 800bd30:	f000 f8ea 	bl	800bf08 <_sbrk_r>
 800bd34:	4581      	cmp	r9, r0
 800bd36:	d142      	bne.n	800bdbe <_malloc_r+0xea>
 800bd38:	6821      	ldr	r1, [r4, #0]
 800bd3a:	1a6d      	subs	r5, r5, r1
 800bd3c:	4629      	mov	r1, r5
 800bd3e:	4630      	mov	r0, r6
 800bd40:	f7ff ffa6 	bl	800bc90 <sbrk_aligned>
 800bd44:	3001      	adds	r0, #1
 800bd46:	d03a      	beq.n	800bdbe <_malloc_r+0xea>
 800bd48:	6823      	ldr	r3, [r4, #0]
 800bd4a:	442b      	add	r3, r5
 800bd4c:	6023      	str	r3, [r4, #0]
 800bd4e:	f8d8 3000 	ldr.w	r3, [r8]
 800bd52:	685a      	ldr	r2, [r3, #4]
 800bd54:	bb62      	cbnz	r2, 800bdb0 <_malloc_r+0xdc>
 800bd56:	f8c8 7000 	str.w	r7, [r8]
 800bd5a:	e00f      	b.n	800bd7c <_malloc_r+0xa8>
 800bd5c:	6822      	ldr	r2, [r4, #0]
 800bd5e:	1b52      	subs	r2, r2, r5
 800bd60:	d420      	bmi.n	800bda4 <_malloc_r+0xd0>
 800bd62:	2a0b      	cmp	r2, #11
 800bd64:	d917      	bls.n	800bd96 <_malloc_r+0xc2>
 800bd66:	1961      	adds	r1, r4, r5
 800bd68:	42a3      	cmp	r3, r4
 800bd6a:	6025      	str	r5, [r4, #0]
 800bd6c:	bf18      	it	ne
 800bd6e:	6059      	strne	r1, [r3, #4]
 800bd70:	6863      	ldr	r3, [r4, #4]
 800bd72:	bf08      	it	eq
 800bd74:	f8c8 1000 	streq.w	r1, [r8]
 800bd78:	5162      	str	r2, [r4, r5]
 800bd7a:	604b      	str	r3, [r1, #4]
 800bd7c:	4630      	mov	r0, r6
 800bd7e:	f000 f82f 	bl	800bde0 <__malloc_unlock>
 800bd82:	f104 000b 	add.w	r0, r4, #11
 800bd86:	1d23      	adds	r3, r4, #4
 800bd88:	f020 0007 	bic.w	r0, r0, #7
 800bd8c:	1ac2      	subs	r2, r0, r3
 800bd8e:	bf1c      	itt	ne
 800bd90:	1a1b      	subne	r3, r3, r0
 800bd92:	50a3      	strne	r3, [r4, r2]
 800bd94:	e7af      	b.n	800bcf6 <_malloc_r+0x22>
 800bd96:	6862      	ldr	r2, [r4, #4]
 800bd98:	42a3      	cmp	r3, r4
 800bd9a:	bf0c      	ite	eq
 800bd9c:	f8c8 2000 	streq.w	r2, [r8]
 800bda0:	605a      	strne	r2, [r3, #4]
 800bda2:	e7eb      	b.n	800bd7c <_malloc_r+0xa8>
 800bda4:	4623      	mov	r3, r4
 800bda6:	6864      	ldr	r4, [r4, #4]
 800bda8:	e7ae      	b.n	800bd08 <_malloc_r+0x34>
 800bdaa:	463c      	mov	r4, r7
 800bdac:	687f      	ldr	r7, [r7, #4]
 800bdae:	e7b6      	b.n	800bd1e <_malloc_r+0x4a>
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	42a3      	cmp	r3, r4
 800bdb6:	d1fb      	bne.n	800bdb0 <_malloc_r+0xdc>
 800bdb8:	2300      	movs	r3, #0
 800bdba:	6053      	str	r3, [r2, #4]
 800bdbc:	e7de      	b.n	800bd7c <_malloc_r+0xa8>
 800bdbe:	230c      	movs	r3, #12
 800bdc0:	6033      	str	r3, [r6, #0]
 800bdc2:	4630      	mov	r0, r6
 800bdc4:	f000 f80c 	bl	800bde0 <__malloc_unlock>
 800bdc8:	e794      	b.n	800bcf4 <_malloc_r+0x20>
 800bdca:	6005      	str	r5, [r0, #0]
 800bdcc:	e7d6      	b.n	800bd7c <_malloc_r+0xa8>
 800bdce:	bf00      	nop
 800bdd0:	20005b94 	.word	0x20005b94

0800bdd4 <__malloc_lock>:
 800bdd4:	4801      	ldr	r0, [pc, #4]	@ (800bddc <__malloc_lock+0x8>)
 800bdd6:	f000 b8d1 	b.w	800bf7c <__retarget_lock_acquire_recursive>
 800bdda:	bf00      	nop
 800bddc:	20005cd4 	.word	0x20005cd4

0800bde0 <__malloc_unlock>:
 800bde0:	4801      	ldr	r0, [pc, #4]	@ (800bde8 <__malloc_unlock+0x8>)
 800bde2:	f000 b8cc 	b.w	800bf7e <__retarget_lock_release_recursive>
 800bde6:	bf00      	nop
 800bde8:	20005cd4 	.word	0x20005cd4

0800bdec <siprintf>:
 800bdec:	b40e      	push	{r1, r2, r3}
 800bdee:	b500      	push	{lr}
 800bdf0:	b09c      	sub	sp, #112	@ 0x70
 800bdf2:	ab1d      	add	r3, sp, #116	@ 0x74
 800bdf4:	9002      	str	r0, [sp, #8]
 800bdf6:	9006      	str	r0, [sp, #24]
 800bdf8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bdfc:	4809      	ldr	r0, [pc, #36]	@ (800be24 <siprintf+0x38>)
 800bdfe:	9107      	str	r1, [sp, #28]
 800be00:	9104      	str	r1, [sp, #16]
 800be02:	4909      	ldr	r1, [pc, #36]	@ (800be28 <siprintf+0x3c>)
 800be04:	f853 2b04 	ldr.w	r2, [r3], #4
 800be08:	9105      	str	r1, [sp, #20]
 800be0a:	6800      	ldr	r0, [r0, #0]
 800be0c:	9301      	str	r3, [sp, #4]
 800be0e:	a902      	add	r1, sp, #8
 800be10:	f000 f972 	bl	800c0f8 <_svfiprintf_r>
 800be14:	9b02      	ldr	r3, [sp, #8]
 800be16:	2200      	movs	r2, #0
 800be18:	701a      	strb	r2, [r3, #0]
 800be1a:	b01c      	add	sp, #112	@ 0x70
 800be1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800be20:	b003      	add	sp, #12
 800be22:	4770      	bx	lr
 800be24:	2000010c 	.word	0x2000010c
 800be28:	ffff0208 	.word	0xffff0208

0800be2c <memset>:
 800be2c:	4402      	add	r2, r0
 800be2e:	4603      	mov	r3, r0
 800be30:	4293      	cmp	r3, r2
 800be32:	d100      	bne.n	800be36 <memset+0xa>
 800be34:	4770      	bx	lr
 800be36:	f803 1b01 	strb.w	r1, [r3], #1
 800be3a:	e7f9      	b.n	800be30 <memset+0x4>

0800be3c <strcat>:
 800be3c:	b510      	push	{r4, lr}
 800be3e:	4602      	mov	r2, r0
 800be40:	7814      	ldrb	r4, [r2, #0]
 800be42:	4613      	mov	r3, r2
 800be44:	3201      	adds	r2, #1
 800be46:	2c00      	cmp	r4, #0
 800be48:	d1fa      	bne.n	800be40 <strcat+0x4>
 800be4a:	3b01      	subs	r3, #1
 800be4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be50:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be54:	2a00      	cmp	r2, #0
 800be56:	d1f9      	bne.n	800be4c <strcat+0x10>
 800be58:	bd10      	pop	{r4, pc}
	...

0800be5c <_reclaim_reent>:
 800be5c:	4b29      	ldr	r3, [pc, #164]	@ (800bf04 <_reclaim_reent+0xa8>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4283      	cmp	r3, r0
 800be62:	b570      	push	{r4, r5, r6, lr}
 800be64:	4604      	mov	r4, r0
 800be66:	d04b      	beq.n	800bf00 <_reclaim_reent+0xa4>
 800be68:	69c3      	ldr	r3, [r0, #28]
 800be6a:	b1ab      	cbz	r3, 800be98 <_reclaim_reent+0x3c>
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	b16b      	cbz	r3, 800be8c <_reclaim_reent+0x30>
 800be70:	2500      	movs	r5, #0
 800be72:	69e3      	ldr	r3, [r4, #28]
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	5959      	ldr	r1, [r3, r5]
 800be78:	2900      	cmp	r1, #0
 800be7a:	d13b      	bne.n	800bef4 <_reclaim_reent+0x98>
 800be7c:	3504      	adds	r5, #4
 800be7e:	2d80      	cmp	r5, #128	@ 0x80
 800be80:	d1f7      	bne.n	800be72 <_reclaim_reent+0x16>
 800be82:	69e3      	ldr	r3, [r4, #28]
 800be84:	4620      	mov	r0, r4
 800be86:	68d9      	ldr	r1, [r3, #12]
 800be88:	f000 f890 	bl	800bfac <_free_r>
 800be8c:	69e3      	ldr	r3, [r4, #28]
 800be8e:	6819      	ldr	r1, [r3, #0]
 800be90:	b111      	cbz	r1, 800be98 <_reclaim_reent+0x3c>
 800be92:	4620      	mov	r0, r4
 800be94:	f000 f88a 	bl	800bfac <_free_r>
 800be98:	6961      	ldr	r1, [r4, #20]
 800be9a:	b111      	cbz	r1, 800bea2 <_reclaim_reent+0x46>
 800be9c:	4620      	mov	r0, r4
 800be9e:	f000 f885 	bl	800bfac <_free_r>
 800bea2:	69e1      	ldr	r1, [r4, #28]
 800bea4:	b111      	cbz	r1, 800beac <_reclaim_reent+0x50>
 800bea6:	4620      	mov	r0, r4
 800bea8:	f000 f880 	bl	800bfac <_free_r>
 800beac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800beae:	b111      	cbz	r1, 800beb6 <_reclaim_reent+0x5a>
 800beb0:	4620      	mov	r0, r4
 800beb2:	f000 f87b 	bl	800bfac <_free_r>
 800beb6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800beb8:	b111      	cbz	r1, 800bec0 <_reclaim_reent+0x64>
 800beba:	4620      	mov	r0, r4
 800bebc:	f000 f876 	bl	800bfac <_free_r>
 800bec0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bec2:	b111      	cbz	r1, 800beca <_reclaim_reent+0x6e>
 800bec4:	4620      	mov	r0, r4
 800bec6:	f000 f871 	bl	800bfac <_free_r>
 800beca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800becc:	b111      	cbz	r1, 800bed4 <_reclaim_reent+0x78>
 800bece:	4620      	mov	r0, r4
 800bed0:	f000 f86c 	bl	800bfac <_free_r>
 800bed4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bed6:	b111      	cbz	r1, 800bede <_reclaim_reent+0x82>
 800bed8:	4620      	mov	r0, r4
 800beda:	f000 f867 	bl	800bfac <_free_r>
 800bede:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bee0:	b111      	cbz	r1, 800bee8 <_reclaim_reent+0x8c>
 800bee2:	4620      	mov	r0, r4
 800bee4:	f000 f862 	bl	800bfac <_free_r>
 800bee8:	6a23      	ldr	r3, [r4, #32]
 800beea:	b14b      	cbz	r3, 800bf00 <_reclaim_reent+0xa4>
 800beec:	4620      	mov	r0, r4
 800beee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bef2:	4718      	bx	r3
 800bef4:	680e      	ldr	r6, [r1, #0]
 800bef6:	4620      	mov	r0, r4
 800bef8:	f000 f858 	bl	800bfac <_free_r>
 800befc:	4631      	mov	r1, r6
 800befe:	e7bb      	b.n	800be78 <_reclaim_reent+0x1c>
 800bf00:	bd70      	pop	{r4, r5, r6, pc}
 800bf02:	bf00      	nop
 800bf04:	2000010c 	.word	0x2000010c

0800bf08 <_sbrk_r>:
 800bf08:	b538      	push	{r3, r4, r5, lr}
 800bf0a:	4d06      	ldr	r5, [pc, #24]	@ (800bf24 <_sbrk_r+0x1c>)
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	4604      	mov	r4, r0
 800bf10:	4608      	mov	r0, r1
 800bf12:	602b      	str	r3, [r5, #0]
 800bf14:	f7f6 fcc2 	bl	800289c <_sbrk>
 800bf18:	1c43      	adds	r3, r0, #1
 800bf1a:	d102      	bne.n	800bf22 <_sbrk_r+0x1a>
 800bf1c:	682b      	ldr	r3, [r5, #0]
 800bf1e:	b103      	cbz	r3, 800bf22 <_sbrk_r+0x1a>
 800bf20:	6023      	str	r3, [r4, #0]
 800bf22:	bd38      	pop	{r3, r4, r5, pc}
 800bf24:	20005cd0 	.word	0x20005cd0

0800bf28 <__errno>:
 800bf28:	4b01      	ldr	r3, [pc, #4]	@ (800bf30 <__errno+0x8>)
 800bf2a:	6818      	ldr	r0, [r3, #0]
 800bf2c:	4770      	bx	lr
 800bf2e:	bf00      	nop
 800bf30:	2000010c 	.word	0x2000010c

0800bf34 <__libc_init_array>:
 800bf34:	b570      	push	{r4, r5, r6, lr}
 800bf36:	4d0d      	ldr	r5, [pc, #52]	@ (800bf6c <__libc_init_array+0x38>)
 800bf38:	4c0d      	ldr	r4, [pc, #52]	@ (800bf70 <__libc_init_array+0x3c>)
 800bf3a:	1b64      	subs	r4, r4, r5
 800bf3c:	10a4      	asrs	r4, r4, #2
 800bf3e:	2600      	movs	r6, #0
 800bf40:	42a6      	cmp	r6, r4
 800bf42:	d109      	bne.n	800bf58 <__libc_init_array+0x24>
 800bf44:	4d0b      	ldr	r5, [pc, #44]	@ (800bf74 <__libc_init_array+0x40>)
 800bf46:	4c0c      	ldr	r4, [pc, #48]	@ (800bf78 <__libc_init_array+0x44>)
 800bf48:	f000 fcb6 	bl	800c8b8 <_init>
 800bf4c:	1b64      	subs	r4, r4, r5
 800bf4e:	10a4      	asrs	r4, r4, #2
 800bf50:	2600      	movs	r6, #0
 800bf52:	42a6      	cmp	r6, r4
 800bf54:	d105      	bne.n	800bf62 <__libc_init_array+0x2e>
 800bf56:	bd70      	pop	{r4, r5, r6, pc}
 800bf58:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf5c:	4798      	blx	r3
 800bf5e:	3601      	adds	r6, #1
 800bf60:	e7ee      	b.n	800bf40 <__libc_init_array+0xc>
 800bf62:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf66:	4798      	blx	r3
 800bf68:	3601      	adds	r6, #1
 800bf6a:	e7f2      	b.n	800bf52 <__libc_init_array+0x1e>
 800bf6c:	0800f164 	.word	0x0800f164
 800bf70:	0800f164 	.word	0x0800f164
 800bf74:	0800f164 	.word	0x0800f164
 800bf78:	0800f168 	.word	0x0800f168

0800bf7c <__retarget_lock_acquire_recursive>:
 800bf7c:	4770      	bx	lr

0800bf7e <__retarget_lock_release_recursive>:
 800bf7e:	4770      	bx	lr

0800bf80 <strcpy>:
 800bf80:	4603      	mov	r3, r0
 800bf82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf86:	f803 2b01 	strb.w	r2, [r3], #1
 800bf8a:	2a00      	cmp	r2, #0
 800bf8c:	d1f9      	bne.n	800bf82 <strcpy+0x2>
 800bf8e:	4770      	bx	lr

0800bf90 <memcpy>:
 800bf90:	440a      	add	r2, r1
 800bf92:	4291      	cmp	r1, r2
 800bf94:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf98:	d100      	bne.n	800bf9c <memcpy+0xc>
 800bf9a:	4770      	bx	lr
 800bf9c:	b510      	push	{r4, lr}
 800bf9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfa6:	4291      	cmp	r1, r2
 800bfa8:	d1f9      	bne.n	800bf9e <memcpy+0xe>
 800bfaa:	bd10      	pop	{r4, pc}

0800bfac <_free_r>:
 800bfac:	b538      	push	{r3, r4, r5, lr}
 800bfae:	4605      	mov	r5, r0
 800bfb0:	2900      	cmp	r1, #0
 800bfb2:	d041      	beq.n	800c038 <_free_r+0x8c>
 800bfb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfb8:	1f0c      	subs	r4, r1, #4
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	bfb8      	it	lt
 800bfbe:	18e4      	addlt	r4, r4, r3
 800bfc0:	f7ff ff08 	bl	800bdd4 <__malloc_lock>
 800bfc4:	4a1d      	ldr	r2, [pc, #116]	@ (800c03c <_free_r+0x90>)
 800bfc6:	6813      	ldr	r3, [r2, #0]
 800bfc8:	b933      	cbnz	r3, 800bfd8 <_free_r+0x2c>
 800bfca:	6063      	str	r3, [r4, #4]
 800bfcc:	6014      	str	r4, [r2, #0]
 800bfce:	4628      	mov	r0, r5
 800bfd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfd4:	f7ff bf04 	b.w	800bde0 <__malloc_unlock>
 800bfd8:	42a3      	cmp	r3, r4
 800bfda:	d908      	bls.n	800bfee <_free_r+0x42>
 800bfdc:	6820      	ldr	r0, [r4, #0]
 800bfde:	1821      	adds	r1, r4, r0
 800bfe0:	428b      	cmp	r3, r1
 800bfe2:	bf01      	itttt	eq
 800bfe4:	6819      	ldreq	r1, [r3, #0]
 800bfe6:	685b      	ldreq	r3, [r3, #4]
 800bfe8:	1809      	addeq	r1, r1, r0
 800bfea:	6021      	streq	r1, [r4, #0]
 800bfec:	e7ed      	b.n	800bfca <_free_r+0x1e>
 800bfee:	461a      	mov	r2, r3
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	b10b      	cbz	r3, 800bff8 <_free_r+0x4c>
 800bff4:	42a3      	cmp	r3, r4
 800bff6:	d9fa      	bls.n	800bfee <_free_r+0x42>
 800bff8:	6811      	ldr	r1, [r2, #0]
 800bffa:	1850      	adds	r0, r2, r1
 800bffc:	42a0      	cmp	r0, r4
 800bffe:	d10b      	bne.n	800c018 <_free_r+0x6c>
 800c000:	6820      	ldr	r0, [r4, #0]
 800c002:	4401      	add	r1, r0
 800c004:	1850      	adds	r0, r2, r1
 800c006:	4283      	cmp	r3, r0
 800c008:	6011      	str	r1, [r2, #0]
 800c00a:	d1e0      	bne.n	800bfce <_free_r+0x22>
 800c00c:	6818      	ldr	r0, [r3, #0]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	6053      	str	r3, [r2, #4]
 800c012:	4408      	add	r0, r1
 800c014:	6010      	str	r0, [r2, #0]
 800c016:	e7da      	b.n	800bfce <_free_r+0x22>
 800c018:	d902      	bls.n	800c020 <_free_r+0x74>
 800c01a:	230c      	movs	r3, #12
 800c01c:	602b      	str	r3, [r5, #0]
 800c01e:	e7d6      	b.n	800bfce <_free_r+0x22>
 800c020:	6820      	ldr	r0, [r4, #0]
 800c022:	1821      	adds	r1, r4, r0
 800c024:	428b      	cmp	r3, r1
 800c026:	bf04      	itt	eq
 800c028:	6819      	ldreq	r1, [r3, #0]
 800c02a:	685b      	ldreq	r3, [r3, #4]
 800c02c:	6063      	str	r3, [r4, #4]
 800c02e:	bf04      	itt	eq
 800c030:	1809      	addeq	r1, r1, r0
 800c032:	6021      	streq	r1, [r4, #0]
 800c034:	6054      	str	r4, [r2, #4]
 800c036:	e7ca      	b.n	800bfce <_free_r+0x22>
 800c038:	bd38      	pop	{r3, r4, r5, pc}
 800c03a:	bf00      	nop
 800c03c:	20005b94 	.word	0x20005b94

0800c040 <__ssputs_r>:
 800c040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c044:	688e      	ldr	r6, [r1, #8]
 800c046:	461f      	mov	r7, r3
 800c048:	42be      	cmp	r6, r7
 800c04a:	680b      	ldr	r3, [r1, #0]
 800c04c:	4682      	mov	sl, r0
 800c04e:	460c      	mov	r4, r1
 800c050:	4690      	mov	r8, r2
 800c052:	d82d      	bhi.n	800c0b0 <__ssputs_r+0x70>
 800c054:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c058:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c05c:	d026      	beq.n	800c0ac <__ssputs_r+0x6c>
 800c05e:	6965      	ldr	r5, [r4, #20]
 800c060:	6909      	ldr	r1, [r1, #16]
 800c062:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c066:	eba3 0901 	sub.w	r9, r3, r1
 800c06a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c06e:	1c7b      	adds	r3, r7, #1
 800c070:	444b      	add	r3, r9
 800c072:	106d      	asrs	r5, r5, #1
 800c074:	429d      	cmp	r5, r3
 800c076:	bf38      	it	cc
 800c078:	461d      	movcc	r5, r3
 800c07a:	0553      	lsls	r3, r2, #21
 800c07c:	d527      	bpl.n	800c0ce <__ssputs_r+0x8e>
 800c07e:	4629      	mov	r1, r5
 800c080:	f7ff fe28 	bl	800bcd4 <_malloc_r>
 800c084:	4606      	mov	r6, r0
 800c086:	b360      	cbz	r0, 800c0e2 <__ssputs_r+0xa2>
 800c088:	6921      	ldr	r1, [r4, #16]
 800c08a:	464a      	mov	r2, r9
 800c08c:	f7ff ff80 	bl	800bf90 <memcpy>
 800c090:	89a3      	ldrh	r3, [r4, #12]
 800c092:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c09a:	81a3      	strh	r3, [r4, #12]
 800c09c:	6126      	str	r6, [r4, #16]
 800c09e:	6165      	str	r5, [r4, #20]
 800c0a0:	444e      	add	r6, r9
 800c0a2:	eba5 0509 	sub.w	r5, r5, r9
 800c0a6:	6026      	str	r6, [r4, #0]
 800c0a8:	60a5      	str	r5, [r4, #8]
 800c0aa:	463e      	mov	r6, r7
 800c0ac:	42be      	cmp	r6, r7
 800c0ae:	d900      	bls.n	800c0b2 <__ssputs_r+0x72>
 800c0b0:	463e      	mov	r6, r7
 800c0b2:	6820      	ldr	r0, [r4, #0]
 800c0b4:	4632      	mov	r2, r6
 800c0b6:	4641      	mov	r1, r8
 800c0b8:	f000 faa8 	bl	800c60c <memmove>
 800c0bc:	68a3      	ldr	r3, [r4, #8]
 800c0be:	1b9b      	subs	r3, r3, r6
 800c0c0:	60a3      	str	r3, [r4, #8]
 800c0c2:	6823      	ldr	r3, [r4, #0]
 800c0c4:	4433      	add	r3, r6
 800c0c6:	6023      	str	r3, [r4, #0]
 800c0c8:	2000      	movs	r0, #0
 800c0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0ce:	462a      	mov	r2, r5
 800c0d0:	f000 fab6 	bl	800c640 <_realloc_r>
 800c0d4:	4606      	mov	r6, r0
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	d1e0      	bne.n	800c09c <__ssputs_r+0x5c>
 800c0da:	6921      	ldr	r1, [r4, #16]
 800c0dc:	4650      	mov	r0, sl
 800c0de:	f7ff ff65 	bl	800bfac <_free_r>
 800c0e2:	230c      	movs	r3, #12
 800c0e4:	f8ca 3000 	str.w	r3, [sl]
 800c0e8:	89a3      	ldrh	r3, [r4, #12]
 800c0ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0ee:	81a3      	strh	r3, [r4, #12]
 800c0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f4:	e7e9      	b.n	800c0ca <__ssputs_r+0x8a>
	...

0800c0f8 <_svfiprintf_r>:
 800c0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0fc:	4698      	mov	r8, r3
 800c0fe:	898b      	ldrh	r3, [r1, #12]
 800c100:	061b      	lsls	r3, r3, #24
 800c102:	b09d      	sub	sp, #116	@ 0x74
 800c104:	4607      	mov	r7, r0
 800c106:	460d      	mov	r5, r1
 800c108:	4614      	mov	r4, r2
 800c10a:	d510      	bpl.n	800c12e <_svfiprintf_r+0x36>
 800c10c:	690b      	ldr	r3, [r1, #16]
 800c10e:	b973      	cbnz	r3, 800c12e <_svfiprintf_r+0x36>
 800c110:	2140      	movs	r1, #64	@ 0x40
 800c112:	f7ff fddf 	bl	800bcd4 <_malloc_r>
 800c116:	6028      	str	r0, [r5, #0]
 800c118:	6128      	str	r0, [r5, #16]
 800c11a:	b930      	cbnz	r0, 800c12a <_svfiprintf_r+0x32>
 800c11c:	230c      	movs	r3, #12
 800c11e:	603b      	str	r3, [r7, #0]
 800c120:	f04f 30ff 	mov.w	r0, #4294967295
 800c124:	b01d      	add	sp, #116	@ 0x74
 800c126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c12a:	2340      	movs	r3, #64	@ 0x40
 800c12c:	616b      	str	r3, [r5, #20]
 800c12e:	2300      	movs	r3, #0
 800c130:	9309      	str	r3, [sp, #36]	@ 0x24
 800c132:	2320      	movs	r3, #32
 800c134:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c138:	f8cd 800c 	str.w	r8, [sp, #12]
 800c13c:	2330      	movs	r3, #48	@ 0x30
 800c13e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c2dc <_svfiprintf_r+0x1e4>
 800c142:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c146:	f04f 0901 	mov.w	r9, #1
 800c14a:	4623      	mov	r3, r4
 800c14c:	469a      	mov	sl, r3
 800c14e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c152:	b10a      	cbz	r2, 800c158 <_svfiprintf_r+0x60>
 800c154:	2a25      	cmp	r2, #37	@ 0x25
 800c156:	d1f9      	bne.n	800c14c <_svfiprintf_r+0x54>
 800c158:	ebba 0b04 	subs.w	fp, sl, r4
 800c15c:	d00b      	beq.n	800c176 <_svfiprintf_r+0x7e>
 800c15e:	465b      	mov	r3, fp
 800c160:	4622      	mov	r2, r4
 800c162:	4629      	mov	r1, r5
 800c164:	4638      	mov	r0, r7
 800c166:	f7ff ff6b 	bl	800c040 <__ssputs_r>
 800c16a:	3001      	adds	r0, #1
 800c16c:	f000 80a7 	beq.w	800c2be <_svfiprintf_r+0x1c6>
 800c170:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c172:	445a      	add	r2, fp
 800c174:	9209      	str	r2, [sp, #36]	@ 0x24
 800c176:	f89a 3000 	ldrb.w	r3, [sl]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	f000 809f 	beq.w	800c2be <_svfiprintf_r+0x1c6>
 800c180:	2300      	movs	r3, #0
 800c182:	f04f 32ff 	mov.w	r2, #4294967295
 800c186:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c18a:	f10a 0a01 	add.w	sl, sl, #1
 800c18e:	9304      	str	r3, [sp, #16]
 800c190:	9307      	str	r3, [sp, #28]
 800c192:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c196:	931a      	str	r3, [sp, #104]	@ 0x68
 800c198:	4654      	mov	r4, sl
 800c19a:	2205      	movs	r2, #5
 800c19c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1a0:	484e      	ldr	r0, [pc, #312]	@ (800c2dc <_svfiprintf_r+0x1e4>)
 800c1a2:	f7f4 f835 	bl	8000210 <memchr>
 800c1a6:	9a04      	ldr	r2, [sp, #16]
 800c1a8:	b9d8      	cbnz	r0, 800c1e2 <_svfiprintf_r+0xea>
 800c1aa:	06d0      	lsls	r0, r2, #27
 800c1ac:	bf44      	itt	mi
 800c1ae:	2320      	movmi	r3, #32
 800c1b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c1b4:	0711      	lsls	r1, r2, #28
 800c1b6:	bf44      	itt	mi
 800c1b8:	232b      	movmi	r3, #43	@ 0x2b
 800c1ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c1be:	f89a 3000 	ldrb.w	r3, [sl]
 800c1c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1c4:	d015      	beq.n	800c1f2 <_svfiprintf_r+0xfa>
 800c1c6:	9a07      	ldr	r2, [sp, #28]
 800c1c8:	4654      	mov	r4, sl
 800c1ca:	2000      	movs	r0, #0
 800c1cc:	f04f 0c0a 	mov.w	ip, #10
 800c1d0:	4621      	mov	r1, r4
 800c1d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1d6:	3b30      	subs	r3, #48	@ 0x30
 800c1d8:	2b09      	cmp	r3, #9
 800c1da:	d94b      	bls.n	800c274 <_svfiprintf_r+0x17c>
 800c1dc:	b1b0      	cbz	r0, 800c20c <_svfiprintf_r+0x114>
 800c1de:	9207      	str	r2, [sp, #28]
 800c1e0:	e014      	b.n	800c20c <_svfiprintf_r+0x114>
 800c1e2:	eba0 0308 	sub.w	r3, r0, r8
 800c1e6:	fa09 f303 	lsl.w	r3, r9, r3
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	9304      	str	r3, [sp, #16]
 800c1ee:	46a2      	mov	sl, r4
 800c1f0:	e7d2      	b.n	800c198 <_svfiprintf_r+0xa0>
 800c1f2:	9b03      	ldr	r3, [sp, #12]
 800c1f4:	1d19      	adds	r1, r3, #4
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	9103      	str	r1, [sp, #12]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	bfbb      	ittet	lt
 800c1fe:	425b      	neglt	r3, r3
 800c200:	f042 0202 	orrlt.w	r2, r2, #2
 800c204:	9307      	strge	r3, [sp, #28]
 800c206:	9307      	strlt	r3, [sp, #28]
 800c208:	bfb8      	it	lt
 800c20a:	9204      	strlt	r2, [sp, #16]
 800c20c:	7823      	ldrb	r3, [r4, #0]
 800c20e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c210:	d10a      	bne.n	800c228 <_svfiprintf_r+0x130>
 800c212:	7863      	ldrb	r3, [r4, #1]
 800c214:	2b2a      	cmp	r3, #42	@ 0x2a
 800c216:	d132      	bne.n	800c27e <_svfiprintf_r+0x186>
 800c218:	9b03      	ldr	r3, [sp, #12]
 800c21a:	1d1a      	adds	r2, r3, #4
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	9203      	str	r2, [sp, #12]
 800c220:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c224:	3402      	adds	r4, #2
 800c226:	9305      	str	r3, [sp, #20]
 800c228:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c2ec <_svfiprintf_r+0x1f4>
 800c22c:	7821      	ldrb	r1, [r4, #0]
 800c22e:	2203      	movs	r2, #3
 800c230:	4650      	mov	r0, sl
 800c232:	f7f3 ffed 	bl	8000210 <memchr>
 800c236:	b138      	cbz	r0, 800c248 <_svfiprintf_r+0x150>
 800c238:	9b04      	ldr	r3, [sp, #16]
 800c23a:	eba0 000a 	sub.w	r0, r0, sl
 800c23e:	2240      	movs	r2, #64	@ 0x40
 800c240:	4082      	lsls	r2, r0
 800c242:	4313      	orrs	r3, r2
 800c244:	3401      	adds	r4, #1
 800c246:	9304      	str	r3, [sp, #16]
 800c248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c24c:	4824      	ldr	r0, [pc, #144]	@ (800c2e0 <_svfiprintf_r+0x1e8>)
 800c24e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c252:	2206      	movs	r2, #6
 800c254:	f7f3 ffdc 	bl	8000210 <memchr>
 800c258:	2800      	cmp	r0, #0
 800c25a:	d036      	beq.n	800c2ca <_svfiprintf_r+0x1d2>
 800c25c:	4b21      	ldr	r3, [pc, #132]	@ (800c2e4 <_svfiprintf_r+0x1ec>)
 800c25e:	bb1b      	cbnz	r3, 800c2a8 <_svfiprintf_r+0x1b0>
 800c260:	9b03      	ldr	r3, [sp, #12]
 800c262:	3307      	adds	r3, #7
 800c264:	f023 0307 	bic.w	r3, r3, #7
 800c268:	3308      	adds	r3, #8
 800c26a:	9303      	str	r3, [sp, #12]
 800c26c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c26e:	4433      	add	r3, r6
 800c270:	9309      	str	r3, [sp, #36]	@ 0x24
 800c272:	e76a      	b.n	800c14a <_svfiprintf_r+0x52>
 800c274:	fb0c 3202 	mla	r2, ip, r2, r3
 800c278:	460c      	mov	r4, r1
 800c27a:	2001      	movs	r0, #1
 800c27c:	e7a8      	b.n	800c1d0 <_svfiprintf_r+0xd8>
 800c27e:	2300      	movs	r3, #0
 800c280:	3401      	adds	r4, #1
 800c282:	9305      	str	r3, [sp, #20]
 800c284:	4619      	mov	r1, r3
 800c286:	f04f 0c0a 	mov.w	ip, #10
 800c28a:	4620      	mov	r0, r4
 800c28c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c290:	3a30      	subs	r2, #48	@ 0x30
 800c292:	2a09      	cmp	r2, #9
 800c294:	d903      	bls.n	800c29e <_svfiprintf_r+0x1a6>
 800c296:	2b00      	cmp	r3, #0
 800c298:	d0c6      	beq.n	800c228 <_svfiprintf_r+0x130>
 800c29a:	9105      	str	r1, [sp, #20]
 800c29c:	e7c4      	b.n	800c228 <_svfiprintf_r+0x130>
 800c29e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2a2:	4604      	mov	r4, r0
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	e7f0      	b.n	800c28a <_svfiprintf_r+0x192>
 800c2a8:	ab03      	add	r3, sp, #12
 800c2aa:	9300      	str	r3, [sp, #0]
 800c2ac:	462a      	mov	r2, r5
 800c2ae:	4b0e      	ldr	r3, [pc, #56]	@ (800c2e8 <_svfiprintf_r+0x1f0>)
 800c2b0:	a904      	add	r1, sp, #16
 800c2b2:	4638      	mov	r0, r7
 800c2b4:	f3af 8000 	nop.w
 800c2b8:	1c42      	adds	r2, r0, #1
 800c2ba:	4606      	mov	r6, r0
 800c2bc:	d1d6      	bne.n	800c26c <_svfiprintf_r+0x174>
 800c2be:	89ab      	ldrh	r3, [r5, #12]
 800c2c0:	065b      	lsls	r3, r3, #25
 800c2c2:	f53f af2d 	bmi.w	800c120 <_svfiprintf_r+0x28>
 800c2c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c2c8:	e72c      	b.n	800c124 <_svfiprintf_r+0x2c>
 800c2ca:	ab03      	add	r3, sp, #12
 800c2cc:	9300      	str	r3, [sp, #0]
 800c2ce:	462a      	mov	r2, r5
 800c2d0:	4b05      	ldr	r3, [pc, #20]	@ (800c2e8 <_svfiprintf_r+0x1f0>)
 800c2d2:	a904      	add	r1, sp, #16
 800c2d4:	4638      	mov	r0, r7
 800c2d6:	f000 f879 	bl	800c3cc <_printf_i>
 800c2da:	e7ed      	b.n	800c2b8 <_svfiprintf_r+0x1c0>
 800c2dc:	0800f128 	.word	0x0800f128
 800c2e0:	0800f132 	.word	0x0800f132
 800c2e4:	00000000 	.word	0x00000000
 800c2e8:	0800c041 	.word	0x0800c041
 800c2ec:	0800f12e 	.word	0x0800f12e

0800c2f0 <_printf_common>:
 800c2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2f4:	4616      	mov	r6, r2
 800c2f6:	4698      	mov	r8, r3
 800c2f8:	688a      	ldr	r2, [r1, #8]
 800c2fa:	690b      	ldr	r3, [r1, #16]
 800c2fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c300:	4293      	cmp	r3, r2
 800c302:	bfb8      	it	lt
 800c304:	4613      	movlt	r3, r2
 800c306:	6033      	str	r3, [r6, #0]
 800c308:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c30c:	4607      	mov	r7, r0
 800c30e:	460c      	mov	r4, r1
 800c310:	b10a      	cbz	r2, 800c316 <_printf_common+0x26>
 800c312:	3301      	adds	r3, #1
 800c314:	6033      	str	r3, [r6, #0]
 800c316:	6823      	ldr	r3, [r4, #0]
 800c318:	0699      	lsls	r1, r3, #26
 800c31a:	bf42      	ittt	mi
 800c31c:	6833      	ldrmi	r3, [r6, #0]
 800c31e:	3302      	addmi	r3, #2
 800c320:	6033      	strmi	r3, [r6, #0]
 800c322:	6825      	ldr	r5, [r4, #0]
 800c324:	f015 0506 	ands.w	r5, r5, #6
 800c328:	d106      	bne.n	800c338 <_printf_common+0x48>
 800c32a:	f104 0a19 	add.w	sl, r4, #25
 800c32e:	68e3      	ldr	r3, [r4, #12]
 800c330:	6832      	ldr	r2, [r6, #0]
 800c332:	1a9b      	subs	r3, r3, r2
 800c334:	42ab      	cmp	r3, r5
 800c336:	dc26      	bgt.n	800c386 <_printf_common+0x96>
 800c338:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c33c:	6822      	ldr	r2, [r4, #0]
 800c33e:	3b00      	subs	r3, #0
 800c340:	bf18      	it	ne
 800c342:	2301      	movne	r3, #1
 800c344:	0692      	lsls	r2, r2, #26
 800c346:	d42b      	bmi.n	800c3a0 <_printf_common+0xb0>
 800c348:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c34c:	4641      	mov	r1, r8
 800c34e:	4638      	mov	r0, r7
 800c350:	47c8      	blx	r9
 800c352:	3001      	adds	r0, #1
 800c354:	d01e      	beq.n	800c394 <_printf_common+0xa4>
 800c356:	6823      	ldr	r3, [r4, #0]
 800c358:	6922      	ldr	r2, [r4, #16]
 800c35a:	f003 0306 	and.w	r3, r3, #6
 800c35e:	2b04      	cmp	r3, #4
 800c360:	bf02      	ittt	eq
 800c362:	68e5      	ldreq	r5, [r4, #12]
 800c364:	6833      	ldreq	r3, [r6, #0]
 800c366:	1aed      	subeq	r5, r5, r3
 800c368:	68a3      	ldr	r3, [r4, #8]
 800c36a:	bf0c      	ite	eq
 800c36c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c370:	2500      	movne	r5, #0
 800c372:	4293      	cmp	r3, r2
 800c374:	bfc4      	itt	gt
 800c376:	1a9b      	subgt	r3, r3, r2
 800c378:	18ed      	addgt	r5, r5, r3
 800c37a:	2600      	movs	r6, #0
 800c37c:	341a      	adds	r4, #26
 800c37e:	42b5      	cmp	r5, r6
 800c380:	d11a      	bne.n	800c3b8 <_printf_common+0xc8>
 800c382:	2000      	movs	r0, #0
 800c384:	e008      	b.n	800c398 <_printf_common+0xa8>
 800c386:	2301      	movs	r3, #1
 800c388:	4652      	mov	r2, sl
 800c38a:	4641      	mov	r1, r8
 800c38c:	4638      	mov	r0, r7
 800c38e:	47c8      	blx	r9
 800c390:	3001      	adds	r0, #1
 800c392:	d103      	bne.n	800c39c <_printf_common+0xac>
 800c394:	f04f 30ff 	mov.w	r0, #4294967295
 800c398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c39c:	3501      	adds	r5, #1
 800c39e:	e7c6      	b.n	800c32e <_printf_common+0x3e>
 800c3a0:	18e1      	adds	r1, r4, r3
 800c3a2:	1c5a      	adds	r2, r3, #1
 800c3a4:	2030      	movs	r0, #48	@ 0x30
 800c3a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c3aa:	4422      	add	r2, r4
 800c3ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c3b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c3b4:	3302      	adds	r3, #2
 800c3b6:	e7c7      	b.n	800c348 <_printf_common+0x58>
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	4622      	mov	r2, r4
 800c3bc:	4641      	mov	r1, r8
 800c3be:	4638      	mov	r0, r7
 800c3c0:	47c8      	blx	r9
 800c3c2:	3001      	adds	r0, #1
 800c3c4:	d0e6      	beq.n	800c394 <_printf_common+0xa4>
 800c3c6:	3601      	adds	r6, #1
 800c3c8:	e7d9      	b.n	800c37e <_printf_common+0x8e>
	...

0800c3cc <_printf_i>:
 800c3cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3d0:	7e0f      	ldrb	r7, [r1, #24]
 800c3d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c3d4:	2f78      	cmp	r7, #120	@ 0x78
 800c3d6:	4691      	mov	r9, r2
 800c3d8:	4680      	mov	r8, r0
 800c3da:	460c      	mov	r4, r1
 800c3dc:	469a      	mov	sl, r3
 800c3de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c3e2:	d807      	bhi.n	800c3f4 <_printf_i+0x28>
 800c3e4:	2f62      	cmp	r7, #98	@ 0x62
 800c3e6:	d80a      	bhi.n	800c3fe <_printf_i+0x32>
 800c3e8:	2f00      	cmp	r7, #0
 800c3ea:	f000 80d2 	beq.w	800c592 <_printf_i+0x1c6>
 800c3ee:	2f58      	cmp	r7, #88	@ 0x58
 800c3f0:	f000 80b9 	beq.w	800c566 <_printf_i+0x19a>
 800c3f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c3f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c3fc:	e03a      	b.n	800c474 <_printf_i+0xa8>
 800c3fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c402:	2b15      	cmp	r3, #21
 800c404:	d8f6      	bhi.n	800c3f4 <_printf_i+0x28>
 800c406:	a101      	add	r1, pc, #4	@ (adr r1, 800c40c <_printf_i+0x40>)
 800c408:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c40c:	0800c465 	.word	0x0800c465
 800c410:	0800c479 	.word	0x0800c479
 800c414:	0800c3f5 	.word	0x0800c3f5
 800c418:	0800c3f5 	.word	0x0800c3f5
 800c41c:	0800c3f5 	.word	0x0800c3f5
 800c420:	0800c3f5 	.word	0x0800c3f5
 800c424:	0800c479 	.word	0x0800c479
 800c428:	0800c3f5 	.word	0x0800c3f5
 800c42c:	0800c3f5 	.word	0x0800c3f5
 800c430:	0800c3f5 	.word	0x0800c3f5
 800c434:	0800c3f5 	.word	0x0800c3f5
 800c438:	0800c579 	.word	0x0800c579
 800c43c:	0800c4a3 	.word	0x0800c4a3
 800c440:	0800c533 	.word	0x0800c533
 800c444:	0800c3f5 	.word	0x0800c3f5
 800c448:	0800c3f5 	.word	0x0800c3f5
 800c44c:	0800c59b 	.word	0x0800c59b
 800c450:	0800c3f5 	.word	0x0800c3f5
 800c454:	0800c4a3 	.word	0x0800c4a3
 800c458:	0800c3f5 	.word	0x0800c3f5
 800c45c:	0800c3f5 	.word	0x0800c3f5
 800c460:	0800c53b 	.word	0x0800c53b
 800c464:	6833      	ldr	r3, [r6, #0]
 800c466:	1d1a      	adds	r2, r3, #4
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	6032      	str	r2, [r6, #0]
 800c46c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c470:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c474:	2301      	movs	r3, #1
 800c476:	e09d      	b.n	800c5b4 <_printf_i+0x1e8>
 800c478:	6833      	ldr	r3, [r6, #0]
 800c47a:	6820      	ldr	r0, [r4, #0]
 800c47c:	1d19      	adds	r1, r3, #4
 800c47e:	6031      	str	r1, [r6, #0]
 800c480:	0606      	lsls	r6, r0, #24
 800c482:	d501      	bpl.n	800c488 <_printf_i+0xbc>
 800c484:	681d      	ldr	r5, [r3, #0]
 800c486:	e003      	b.n	800c490 <_printf_i+0xc4>
 800c488:	0645      	lsls	r5, r0, #25
 800c48a:	d5fb      	bpl.n	800c484 <_printf_i+0xb8>
 800c48c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c490:	2d00      	cmp	r5, #0
 800c492:	da03      	bge.n	800c49c <_printf_i+0xd0>
 800c494:	232d      	movs	r3, #45	@ 0x2d
 800c496:	426d      	negs	r5, r5
 800c498:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c49c:	4859      	ldr	r0, [pc, #356]	@ (800c604 <_printf_i+0x238>)
 800c49e:	230a      	movs	r3, #10
 800c4a0:	e011      	b.n	800c4c6 <_printf_i+0xfa>
 800c4a2:	6821      	ldr	r1, [r4, #0]
 800c4a4:	6833      	ldr	r3, [r6, #0]
 800c4a6:	0608      	lsls	r0, r1, #24
 800c4a8:	f853 5b04 	ldr.w	r5, [r3], #4
 800c4ac:	d402      	bmi.n	800c4b4 <_printf_i+0xe8>
 800c4ae:	0649      	lsls	r1, r1, #25
 800c4b0:	bf48      	it	mi
 800c4b2:	b2ad      	uxthmi	r5, r5
 800c4b4:	2f6f      	cmp	r7, #111	@ 0x6f
 800c4b6:	4853      	ldr	r0, [pc, #332]	@ (800c604 <_printf_i+0x238>)
 800c4b8:	6033      	str	r3, [r6, #0]
 800c4ba:	bf14      	ite	ne
 800c4bc:	230a      	movne	r3, #10
 800c4be:	2308      	moveq	r3, #8
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c4c6:	6866      	ldr	r6, [r4, #4]
 800c4c8:	60a6      	str	r6, [r4, #8]
 800c4ca:	2e00      	cmp	r6, #0
 800c4cc:	bfa2      	ittt	ge
 800c4ce:	6821      	ldrge	r1, [r4, #0]
 800c4d0:	f021 0104 	bicge.w	r1, r1, #4
 800c4d4:	6021      	strge	r1, [r4, #0]
 800c4d6:	b90d      	cbnz	r5, 800c4dc <_printf_i+0x110>
 800c4d8:	2e00      	cmp	r6, #0
 800c4da:	d04b      	beq.n	800c574 <_printf_i+0x1a8>
 800c4dc:	4616      	mov	r6, r2
 800c4de:	fbb5 f1f3 	udiv	r1, r5, r3
 800c4e2:	fb03 5711 	mls	r7, r3, r1, r5
 800c4e6:	5dc7      	ldrb	r7, [r0, r7]
 800c4e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c4ec:	462f      	mov	r7, r5
 800c4ee:	42bb      	cmp	r3, r7
 800c4f0:	460d      	mov	r5, r1
 800c4f2:	d9f4      	bls.n	800c4de <_printf_i+0x112>
 800c4f4:	2b08      	cmp	r3, #8
 800c4f6:	d10b      	bne.n	800c510 <_printf_i+0x144>
 800c4f8:	6823      	ldr	r3, [r4, #0]
 800c4fa:	07df      	lsls	r7, r3, #31
 800c4fc:	d508      	bpl.n	800c510 <_printf_i+0x144>
 800c4fe:	6923      	ldr	r3, [r4, #16]
 800c500:	6861      	ldr	r1, [r4, #4]
 800c502:	4299      	cmp	r1, r3
 800c504:	bfde      	ittt	le
 800c506:	2330      	movle	r3, #48	@ 0x30
 800c508:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c50c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c510:	1b92      	subs	r2, r2, r6
 800c512:	6122      	str	r2, [r4, #16]
 800c514:	f8cd a000 	str.w	sl, [sp]
 800c518:	464b      	mov	r3, r9
 800c51a:	aa03      	add	r2, sp, #12
 800c51c:	4621      	mov	r1, r4
 800c51e:	4640      	mov	r0, r8
 800c520:	f7ff fee6 	bl	800c2f0 <_printf_common>
 800c524:	3001      	adds	r0, #1
 800c526:	d14a      	bne.n	800c5be <_printf_i+0x1f2>
 800c528:	f04f 30ff 	mov.w	r0, #4294967295
 800c52c:	b004      	add	sp, #16
 800c52e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c532:	6823      	ldr	r3, [r4, #0]
 800c534:	f043 0320 	orr.w	r3, r3, #32
 800c538:	6023      	str	r3, [r4, #0]
 800c53a:	4833      	ldr	r0, [pc, #204]	@ (800c608 <_printf_i+0x23c>)
 800c53c:	2778      	movs	r7, #120	@ 0x78
 800c53e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c542:	6823      	ldr	r3, [r4, #0]
 800c544:	6831      	ldr	r1, [r6, #0]
 800c546:	061f      	lsls	r7, r3, #24
 800c548:	f851 5b04 	ldr.w	r5, [r1], #4
 800c54c:	d402      	bmi.n	800c554 <_printf_i+0x188>
 800c54e:	065f      	lsls	r7, r3, #25
 800c550:	bf48      	it	mi
 800c552:	b2ad      	uxthmi	r5, r5
 800c554:	6031      	str	r1, [r6, #0]
 800c556:	07d9      	lsls	r1, r3, #31
 800c558:	bf44      	itt	mi
 800c55a:	f043 0320 	orrmi.w	r3, r3, #32
 800c55e:	6023      	strmi	r3, [r4, #0]
 800c560:	b11d      	cbz	r5, 800c56a <_printf_i+0x19e>
 800c562:	2310      	movs	r3, #16
 800c564:	e7ac      	b.n	800c4c0 <_printf_i+0xf4>
 800c566:	4827      	ldr	r0, [pc, #156]	@ (800c604 <_printf_i+0x238>)
 800c568:	e7e9      	b.n	800c53e <_printf_i+0x172>
 800c56a:	6823      	ldr	r3, [r4, #0]
 800c56c:	f023 0320 	bic.w	r3, r3, #32
 800c570:	6023      	str	r3, [r4, #0]
 800c572:	e7f6      	b.n	800c562 <_printf_i+0x196>
 800c574:	4616      	mov	r6, r2
 800c576:	e7bd      	b.n	800c4f4 <_printf_i+0x128>
 800c578:	6833      	ldr	r3, [r6, #0]
 800c57a:	6825      	ldr	r5, [r4, #0]
 800c57c:	6961      	ldr	r1, [r4, #20]
 800c57e:	1d18      	adds	r0, r3, #4
 800c580:	6030      	str	r0, [r6, #0]
 800c582:	062e      	lsls	r6, r5, #24
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	d501      	bpl.n	800c58c <_printf_i+0x1c0>
 800c588:	6019      	str	r1, [r3, #0]
 800c58a:	e002      	b.n	800c592 <_printf_i+0x1c6>
 800c58c:	0668      	lsls	r0, r5, #25
 800c58e:	d5fb      	bpl.n	800c588 <_printf_i+0x1bc>
 800c590:	8019      	strh	r1, [r3, #0]
 800c592:	2300      	movs	r3, #0
 800c594:	6123      	str	r3, [r4, #16]
 800c596:	4616      	mov	r6, r2
 800c598:	e7bc      	b.n	800c514 <_printf_i+0x148>
 800c59a:	6833      	ldr	r3, [r6, #0]
 800c59c:	1d1a      	adds	r2, r3, #4
 800c59e:	6032      	str	r2, [r6, #0]
 800c5a0:	681e      	ldr	r6, [r3, #0]
 800c5a2:	6862      	ldr	r2, [r4, #4]
 800c5a4:	2100      	movs	r1, #0
 800c5a6:	4630      	mov	r0, r6
 800c5a8:	f7f3 fe32 	bl	8000210 <memchr>
 800c5ac:	b108      	cbz	r0, 800c5b2 <_printf_i+0x1e6>
 800c5ae:	1b80      	subs	r0, r0, r6
 800c5b0:	6060      	str	r0, [r4, #4]
 800c5b2:	6863      	ldr	r3, [r4, #4]
 800c5b4:	6123      	str	r3, [r4, #16]
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c5bc:	e7aa      	b.n	800c514 <_printf_i+0x148>
 800c5be:	6923      	ldr	r3, [r4, #16]
 800c5c0:	4632      	mov	r2, r6
 800c5c2:	4649      	mov	r1, r9
 800c5c4:	4640      	mov	r0, r8
 800c5c6:	47d0      	blx	sl
 800c5c8:	3001      	adds	r0, #1
 800c5ca:	d0ad      	beq.n	800c528 <_printf_i+0x15c>
 800c5cc:	6823      	ldr	r3, [r4, #0]
 800c5ce:	079b      	lsls	r3, r3, #30
 800c5d0:	d413      	bmi.n	800c5fa <_printf_i+0x22e>
 800c5d2:	68e0      	ldr	r0, [r4, #12]
 800c5d4:	9b03      	ldr	r3, [sp, #12]
 800c5d6:	4298      	cmp	r0, r3
 800c5d8:	bfb8      	it	lt
 800c5da:	4618      	movlt	r0, r3
 800c5dc:	e7a6      	b.n	800c52c <_printf_i+0x160>
 800c5de:	2301      	movs	r3, #1
 800c5e0:	4632      	mov	r2, r6
 800c5e2:	4649      	mov	r1, r9
 800c5e4:	4640      	mov	r0, r8
 800c5e6:	47d0      	blx	sl
 800c5e8:	3001      	adds	r0, #1
 800c5ea:	d09d      	beq.n	800c528 <_printf_i+0x15c>
 800c5ec:	3501      	adds	r5, #1
 800c5ee:	68e3      	ldr	r3, [r4, #12]
 800c5f0:	9903      	ldr	r1, [sp, #12]
 800c5f2:	1a5b      	subs	r3, r3, r1
 800c5f4:	42ab      	cmp	r3, r5
 800c5f6:	dcf2      	bgt.n	800c5de <_printf_i+0x212>
 800c5f8:	e7eb      	b.n	800c5d2 <_printf_i+0x206>
 800c5fa:	2500      	movs	r5, #0
 800c5fc:	f104 0619 	add.w	r6, r4, #25
 800c600:	e7f5      	b.n	800c5ee <_printf_i+0x222>
 800c602:	bf00      	nop
 800c604:	0800f139 	.word	0x0800f139
 800c608:	0800f14a 	.word	0x0800f14a

0800c60c <memmove>:
 800c60c:	4288      	cmp	r0, r1
 800c60e:	b510      	push	{r4, lr}
 800c610:	eb01 0402 	add.w	r4, r1, r2
 800c614:	d902      	bls.n	800c61c <memmove+0x10>
 800c616:	4284      	cmp	r4, r0
 800c618:	4623      	mov	r3, r4
 800c61a:	d807      	bhi.n	800c62c <memmove+0x20>
 800c61c:	1e43      	subs	r3, r0, #1
 800c61e:	42a1      	cmp	r1, r4
 800c620:	d008      	beq.n	800c634 <memmove+0x28>
 800c622:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c626:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c62a:	e7f8      	b.n	800c61e <memmove+0x12>
 800c62c:	4402      	add	r2, r0
 800c62e:	4601      	mov	r1, r0
 800c630:	428a      	cmp	r2, r1
 800c632:	d100      	bne.n	800c636 <memmove+0x2a>
 800c634:	bd10      	pop	{r4, pc}
 800c636:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c63a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c63e:	e7f7      	b.n	800c630 <memmove+0x24>

0800c640 <_realloc_r>:
 800c640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c644:	4680      	mov	r8, r0
 800c646:	4615      	mov	r5, r2
 800c648:	460c      	mov	r4, r1
 800c64a:	b921      	cbnz	r1, 800c656 <_realloc_r+0x16>
 800c64c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c650:	4611      	mov	r1, r2
 800c652:	f7ff bb3f 	b.w	800bcd4 <_malloc_r>
 800c656:	b92a      	cbnz	r2, 800c664 <_realloc_r+0x24>
 800c658:	f7ff fca8 	bl	800bfac <_free_r>
 800c65c:	2400      	movs	r4, #0
 800c65e:	4620      	mov	r0, r4
 800c660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c664:	f000 f81a 	bl	800c69c <_malloc_usable_size_r>
 800c668:	4285      	cmp	r5, r0
 800c66a:	4606      	mov	r6, r0
 800c66c:	d802      	bhi.n	800c674 <_realloc_r+0x34>
 800c66e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c672:	d8f4      	bhi.n	800c65e <_realloc_r+0x1e>
 800c674:	4629      	mov	r1, r5
 800c676:	4640      	mov	r0, r8
 800c678:	f7ff fb2c 	bl	800bcd4 <_malloc_r>
 800c67c:	4607      	mov	r7, r0
 800c67e:	2800      	cmp	r0, #0
 800c680:	d0ec      	beq.n	800c65c <_realloc_r+0x1c>
 800c682:	42b5      	cmp	r5, r6
 800c684:	462a      	mov	r2, r5
 800c686:	4621      	mov	r1, r4
 800c688:	bf28      	it	cs
 800c68a:	4632      	movcs	r2, r6
 800c68c:	f7ff fc80 	bl	800bf90 <memcpy>
 800c690:	4621      	mov	r1, r4
 800c692:	4640      	mov	r0, r8
 800c694:	f7ff fc8a 	bl	800bfac <_free_r>
 800c698:	463c      	mov	r4, r7
 800c69a:	e7e0      	b.n	800c65e <_realloc_r+0x1e>

0800c69c <_malloc_usable_size_r>:
 800c69c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6a0:	1f18      	subs	r0, r3, #4
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	bfbc      	itt	lt
 800c6a6:	580b      	ldrlt	r3, [r1, r0]
 800c6a8:	18c0      	addlt	r0, r0, r3
 800c6aa:	4770      	bx	lr

0800c6ac <sqrt>:
 800c6ac:	b538      	push	{r3, r4, r5, lr}
 800c6ae:	ed2d 8b02 	vpush	{d8}
 800c6b2:	ec55 4b10 	vmov	r4, r5, d0
 800c6b6:	f000 f825 	bl	800c704 <__ieee754_sqrt>
 800c6ba:	4622      	mov	r2, r4
 800c6bc:	462b      	mov	r3, r5
 800c6be:	4620      	mov	r0, r4
 800c6c0:	4629      	mov	r1, r5
 800c6c2:	eeb0 8a40 	vmov.f32	s16, s0
 800c6c6:	eef0 8a60 	vmov.f32	s17, s1
 800c6ca:	f7f4 fa47 	bl	8000b5c <__aeabi_dcmpun>
 800c6ce:	b990      	cbnz	r0, 800c6f6 <sqrt+0x4a>
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	4629      	mov	r1, r5
 800c6d8:	f7f4 fa18 	bl	8000b0c <__aeabi_dcmplt>
 800c6dc:	b158      	cbz	r0, 800c6f6 <sqrt+0x4a>
 800c6de:	f7ff fc23 	bl	800bf28 <__errno>
 800c6e2:	2321      	movs	r3, #33	@ 0x21
 800c6e4:	6003      	str	r3, [r0, #0]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	4610      	mov	r0, r2
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	f7f4 f8c5 	bl	800087c <__aeabi_ddiv>
 800c6f2:	ec41 0b18 	vmov	d8, r0, r1
 800c6f6:	eeb0 0a48 	vmov.f32	s0, s16
 800c6fa:	eef0 0a68 	vmov.f32	s1, s17
 800c6fe:	ecbd 8b02 	vpop	{d8}
 800c702:	bd38      	pop	{r3, r4, r5, pc}

0800c704 <__ieee754_sqrt>:
 800c704:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c708:	4a68      	ldr	r2, [pc, #416]	@ (800c8ac <__ieee754_sqrt+0x1a8>)
 800c70a:	ec55 4b10 	vmov	r4, r5, d0
 800c70e:	43aa      	bics	r2, r5
 800c710:	462b      	mov	r3, r5
 800c712:	4621      	mov	r1, r4
 800c714:	d110      	bne.n	800c738 <__ieee754_sqrt+0x34>
 800c716:	4622      	mov	r2, r4
 800c718:	4620      	mov	r0, r4
 800c71a:	4629      	mov	r1, r5
 800c71c:	f7f3 ff84 	bl	8000628 <__aeabi_dmul>
 800c720:	4602      	mov	r2, r0
 800c722:	460b      	mov	r3, r1
 800c724:	4620      	mov	r0, r4
 800c726:	4629      	mov	r1, r5
 800c728:	f7f3 fdc8 	bl	80002bc <__adddf3>
 800c72c:	4604      	mov	r4, r0
 800c72e:	460d      	mov	r5, r1
 800c730:	ec45 4b10 	vmov	d0, r4, r5
 800c734:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c738:	2d00      	cmp	r5, #0
 800c73a:	dc0e      	bgt.n	800c75a <__ieee754_sqrt+0x56>
 800c73c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c740:	4322      	orrs	r2, r4
 800c742:	d0f5      	beq.n	800c730 <__ieee754_sqrt+0x2c>
 800c744:	b19d      	cbz	r5, 800c76e <__ieee754_sqrt+0x6a>
 800c746:	4622      	mov	r2, r4
 800c748:	4620      	mov	r0, r4
 800c74a:	4629      	mov	r1, r5
 800c74c:	f7f3 fdb4 	bl	80002b8 <__aeabi_dsub>
 800c750:	4602      	mov	r2, r0
 800c752:	460b      	mov	r3, r1
 800c754:	f7f4 f892 	bl	800087c <__aeabi_ddiv>
 800c758:	e7e8      	b.n	800c72c <__ieee754_sqrt+0x28>
 800c75a:	152a      	asrs	r2, r5, #20
 800c75c:	d115      	bne.n	800c78a <__ieee754_sqrt+0x86>
 800c75e:	2000      	movs	r0, #0
 800c760:	e009      	b.n	800c776 <__ieee754_sqrt+0x72>
 800c762:	0acb      	lsrs	r3, r1, #11
 800c764:	3a15      	subs	r2, #21
 800c766:	0549      	lsls	r1, r1, #21
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d0fa      	beq.n	800c762 <__ieee754_sqrt+0x5e>
 800c76c:	e7f7      	b.n	800c75e <__ieee754_sqrt+0x5a>
 800c76e:	462a      	mov	r2, r5
 800c770:	e7fa      	b.n	800c768 <__ieee754_sqrt+0x64>
 800c772:	005b      	lsls	r3, r3, #1
 800c774:	3001      	adds	r0, #1
 800c776:	02dc      	lsls	r4, r3, #11
 800c778:	d5fb      	bpl.n	800c772 <__ieee754_sqrt+0x6e>
 800c77a:	1e44      	subs	r4, r0, #1
 800c77c:	1b12      	subs	r2, r2, r4
 800c77e:	f1c0 0420 	rsb	r4, r0, #32
 800c782:	fa21 f404 	lsr.w	r4, r1, r4
 800c786:	4323      	orrs	r3, r4
 800c788:	4081      	lsls	r1, r0
 800c78a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c78e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c792:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c796:	07d2      	lsls	r2, r2, #31
 800c798:	bf5c      	itt	pl
 800c79a:	005b      	lslpl	r3, r3, #1
 800c79c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c7a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c7a4:	bf58      	it	pl
 800c7a6:	0049      	lslpl	r1, r1, #1
 800c7a8:	2600      	movs	r6, #0
 800c7aa:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c7ae:	106d      	asrs	r5, r5, #1
 800c7b0:	0049      	lsls	r1, r1, #1
 800c7b2:	2016      	movs	r0, #22
 800c7b4:	4632      	mov	r2, r6
 800c7b6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c7ba:	1917      	adds	r7, r2, r4
 800c7bc:	429f      	cmp	r7, r3
 800c7be:	bfde      	ittt	le
 800c7c0:	193a      	addle	r2, r7, r4
 800c7c2:	1bdb      	suble	r3, r3, r7
 800c7c4:	1936      	addle	r6, r6, r4
 800c7c6:	0fcf      	lsrs	r7, r1, #31
 800c7c8:	3801      	subs	r0, #1
 800c7ca:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c7ce:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c7d2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c7d6:	d1f0      	bne.n	800c7ba <__ieee754_sqrt+0xb6>
 800c7d8:	4604      	mov	r4, r0
 800c7da:	2720      	movs	r7, #32
 800c7dc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	eb00 0e0c 	add.w	lr, r0, ip
 800c7e6:	db02      	blt.n	800c7ee <__ieee754_sqrt+0xea>
 800c7e8:	d113      	bne.n	800c812 <__ieee754_sqrt+0x10e>
 800c7ea:	458e      	cmp	lr, r1
 800c7ec:	d811      	bhi.n	800c812 <__ieee754_sqrt+0x10e>
 800c7ee:	f1be 0f00 	cmp.w	lr, #0
 800c7f2:	eb0e 000c 	add.w	r0, lr, ip
 800c7f6:	da42      	bge.n	800c87e <__ieee754_sqrt+0x17a>
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	db40      	blt.n	800c87e <__ieee754_sqrt+0x17a>
 800c7fc:	f102 0801 	add.w	r8, r2, #1
 800c800:	1a9b      	subs	r3, r3, r2
 800c802:	458e      	cmp	lr, r1
 800c804:	bf88      	it	hi
 800c806:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c80a:	eba1 010e 	sub.w	r1, r1, lr
 800c80e:	4464      	add	r4, ip
 800c810:	4642      	mov	r2, r8
 800c812:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c816:	3f01      	subs	r7, #1
 800c818:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c81c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c820:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c824:	d1dc      	bne.n	800c7e0 <__ieee754_sqrt+0xdc>
 800c826:	4319      	orrs	r1, r3
 800c828:	d01b      	beq.n	800c862 <__ieee754_sqrt+0x15e>
 800c82a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c8b0 <__ieee754_sqrt+0x1ac>
 800c82e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c8b4 <__ieee754_sqrt+0x1b0>
 800c832:	e9da 0100 	ldrd	r0, r1, [sl]
 800c836:	e9db 2300 	ldrd	r2, r3, [fp]
 800c83a:	f7f3 fd3d 	bl	80002b8 <__aeabi_dsub>
 800c83e:	e9da 8900 	ldrd	r8, r9, [sl]
 800c842:	4602      	mov	r2, r0
 800c844:	460b      	mov	r3, r1
 800c846:	4640      	mov	r0, r8
 800c848:	4649      	mov	r1, r9
 800c84a:	f7f4 f969 	bl	8000b20 <__aeabi_dcmple>
 800c84e:	b140      	cbz	r0, 800c862 <__ieee754_sqrt+0x15e>
 800c850:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c854:	e9da 0100 	ldrd	r0, r1, [sl]
 800c858:	e9db 2300 	ldrd	r2, r3, [fp]
 800c85c:	d111      	bne.n	800c882 <__ieee754_sqrt+0x17e>
 800c85e:	3601      	adds	r6, #1
 800c860:	463c      	mov	r4, r7
 800c862:	1072      	asrs	r2, r6, #1
 800c864:	0863      	lsrs	r3, r4, #1
 800c866:	07f1      	lsls	r1, r6, #31
 800c868:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c86c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c870:	bf48      	it	mi
 800c872:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c876:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c87a:	4618      	mov	r0, r3
 800c87c:	e756      	b.n	800c72c <__ieee754_sqrt+0x28>
 800c87e:	4690      	mov	r8, r2
 800c880:	e7be      	b.n	800c800 <__ieee754_sqrt+0xfc>
 800c882:	f7f3 fd1b 	bl	80002bc <__adddf3>
 800c886:	e9da 8900 	ldrd	r8, r9, [sl]
 800c88a:	4602      	mov	r2, r0
 800c88c:	460b      	mov	r3, r1
 800c88e:	4640      	mov	r0, r8
 800c890:	4649      	mov	r1, r9
 800c892:	f7f4 f93b 	bl	8000b0c <__aeabi_dcmplt>
 800c896:	b120      	cbz	r0, 800c8a2 <__ieee754_sqrt+0x19e>
 800c898:	1ca0      	adds	r0, r4, #2
 800c89a:	bf08      	it	eq
 800c89c:	3601      	addeq	r6, #1
 800c89e:	3402      	adds	r4, #2
 800c8a0:	e7df      	b.n	800c862 <__ieee754_sqrt+0x15e>
 800c8a2:	1c63      	adds	r3, r4, #1
 800c8a4:	f023 0401 	bic.w	r4, r3, #1
 800c8a8:	e7db      	b.n	800c862 <__ieee754_sqrt+0x15e>
 800c8aa:	bf00      	nop
 800c8ac:	7ff00000 	.word	0x7ff00000
 800c8b0:	20000168 	.word	0x20000168
 800c8b4:	20000160 	.word	0x20000160

0800c8b8 <_init>:
 800c8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ba:	bf00      	nop
 800c8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8be:	bc08      	pop	{r3}
 800c8c0:	469e      	mov	lr, r3
 800c8c2:	4770      	bx	lr

0800c8c4 <_fini>:
 800c8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8c6:	bf00      	nop
 800c8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ca:	bc08      	pop	{r3}
 800c8cc:	469e      	mov	lr, r3
 800c8ce:	4770      	bx	lr
