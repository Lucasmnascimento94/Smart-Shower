
Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008818  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d98  080089b8  080089b8  000099b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009750  08009750  0000b16c  2**0
                  CONTENTS
  4 .ARM          00000008  08009750  08009750  0000a750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009758  08009758  0000b16c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009758  08009758  0000a758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800975c  0800975c  0000a75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  08009760  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dac  2000016c  080098cc  0000b16c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f18  080098cc  0000bf18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b16c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164ee  00000000  00000000  0000b19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038ec  00000000  00000000  0002168a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  00024f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f60  00000000  00000000  00026350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001877d  00000000  00000000  000272b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e07  00000000  00000000  0003fa2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093709  00000000  00000000  00059834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ecf3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a64  00000000  00000000  000ecf80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000f29e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000016c 	.word	0x2000016c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080089a0 	.word	0x080089a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000170 	.word	0x20000170
 80001dc:	080089a0 	.word	0x080089a0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	@ 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__gedf2>:
 800087c:	f04f 3cff 	mov.w	ip, #4294967295
 8000880:	e006      	b.n	8000890 <__cmpdf2+0x4>
 8000882:	bf00      	nop

08000884 <__ledf2>:
 8000884:	f04f 0c01 	mov.w	ip, #1
 8000888:	e002      	b.n	8000890 <__cmpdf2+0x4>
 800088a:	bf00      	nop

0800088c <__cmpdf2>:
 800088c:	f04f 0c01 	mov.w	ip, #1
 8000890:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800089c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008a0:	bf18      	it	ne
 80008a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008a6:	d01b      	beq.n	80008e0 <__cmpdf2+0x54>
 80008a8:	b001      	add	sp, #4
 80008aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008ae:	bf0c      	ite	eq
 80008b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008b4:	ea91 0f03 	teqne	r1, r3
 80008b8:	bf02      	ittt	eq
 80008ba:	ea90 0f02 	teqeq	r0, r2
 80008be:	2000      	moveq	r0, #0
 80008c0:	4770      	bxeq	lr
 80008c2:	f110 0f00 	cmn.w	r0, #0
 80008c6:	ea91 0f03 	teq	r1, r3
 80008ca:	bf58      	it	pl
 80008cc:	4299      	cmppl	r1, r3
 80008ce:	bf08      	it	eq
 80008d0:	4290      	cmpeq	r0, r2
 80008d2:	bf2c      	ite	cs
 80008d4:	17d8      	asrcs	r0, r3, #31
 80008d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008da:	f040 0001 	orr.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008e8:	d102      	bne.n	80008f0 <__cmpdf2+0x64>
 80008ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ee:	d107      	bne.n	8000900 <__cmpdf2+0x74>
 80008f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008f8:	d1d6      	bne.n	80008a8 <__cmpdf2+0x1c>
 80008fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008fe:	d0d3      	beq.n	80008a8 <__cmpdf2+0x1c>
 8000900:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <__aeabi_cdrcmple>:
 8000908:	4684      	mov	ip, r0
 800090a:	4610      	mov	r0, r2
 800090c:	4662      	mov	r2, ip
 800090e:	468c      	mov	ip, r1
 8000910:	4619      	mov	r1, r3
 8000912:	4663      	mov	r3, ip
 8000914:	e000      	b.n	8000918 <__aeabi_cdcmpeq>
 8000916:	bf00      	nop

08000918 <__aeabi_cdcmpeq>:
 8000918:	b501      	push	{r0, lr}
 800091a:	f7ff ffb7 	bl	800088c <__cmpdf2>
 800091e:	2800      	cmp	r0, #0
 8000920:	bf48      	it	mi
 8000922:	f110 0f00 	cmnmi.w	r0, #0
 8000926:	bd01      	pop	{r0, pc}

08000928 <__aeabi_dcmpeq>:
 8000928:	f84d ed08 	str.w	lr, [sp, #-8]!
 800092c:	f7ff fff4 	bl	8000918 <__aeabi_cdcmpeq>
 8000930:	bf0c      	ite	eq
 8000932:	2001      	moveq	r0, #1
 8000934:	2000      	movne	r0, #0
 8000936:	f85d fb08 	ldr.w	pc, [sp], #8
 800093a:	bf00      	nop

0800093c <__aeabi_dcmplt>:
 800093c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000940:	f7ff ffea 	bl	8000918 <__aeabi_cdcmpeq>
 8000944:	bf34      	ite	cc
 8000946:	2001      	movcc	r0, #1
 8000948:	2000      	movcs	r0, #0
 800094a:	f85d fb08 	ldr.w	pc, [sp], #8
 800094e:	bf00      	nop

08000950 <__aeabi_dcmple>:
 8000950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000954:	f7ff ffe0 	bl	8000918 <__aeabi_cdcmpeq>
 8000958:	bf94      	ite	ls
 800095a:	2001      	movls	r0, #1
 800095c:	2000      	movhi	r0, #0
 800095e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000962:	bf00      	nop

08000964 <__aeabi_dcmpge>:
 8000964:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000968:	f7ff ffce 	bl	8000908 <__aeabi_cdrcmple>
 800096c:	bf94      	ite	ls
 800096e:	2001      	movls	r0, #1
 8000970:	2000      	movhi	r0, #0
 8000972:	f85d fb08 	ldr.w	pc, [sp], #8
 8000976:	bf00      	nop

08000978 <__aeabi_dcmpgt>:
 8000978:	f84d ed08 	str.w	lr, [sp, #-8]!
 800097c:	f7ff ffc4 	bl	8000908 <__aeabi_cdrcmple>
 8000980:	bf34      	ite	cc
 8000982:	2001      	movcc	r0, #1
 8000984:	2000      	movcs	r0, #0
 8000986:	f85d fb08 	ldr.w	pc, [sp], #8
 800098a:	bf00      	nop

0800098c <__aeabi_d2iz>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000994:	d215      	bcs.n	80009c2 <__aeabi_d2iz+0x36>
 8000996:	d511      	bpl.n	80009bc <__aeabi_d2iz+0x30>
 8000998:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d912      	bls.n	80009c8 <__aeabi_d2iz+0x3c>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009b2:	fa23 f002 	lsr.w	r0, r3, r2
 80009b6:	bf18      	it	ne
 80009b8:	4240      	negne	r0, r0
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c6:	d105      	bne.n	80009d4 <__aeabi_d2iz+0x48>
 80009c8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009cc:	bf08      	it	eq
 80009ce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_d2f>:
 80009dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009e4:	bf24      	itt	cs
 80009e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009ee:	d90d      	bls.n	8000a0c <__aeabi_d2f+0x30>
 80009f0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009fc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a04:	bf08      	it	eq
 8000a06:	f020 0001 	biceq.w	r0, r0, #1
 8000a0a:	4770      	bx	lr
 8000a0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a10:	d121      	bne.n	8000a56 <__aeabi_d2f+0x7a>
 8000a12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a16:	bfbc      	itt	lt
 8000a18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a1c:	4770      	bxlt	lr
 8000a1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a26:	f1c2 0218 	rsb	r2, r2, #24
 8000a2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a32:	fa20 f002 	lsr.w	r0, r0, r2
 8000a36:	bf18      	it	ne
 8000a38:	f040 0001 	orrne.w	r0, r0, #1
 8000a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a48:	ea40 000c 	orr.w	r0, r0, ip
 8000a4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a54:	e7cc      	b.n	80009f0 <__aeabi_d2f+0x14>
 8000a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a5a:	d107      	bne.n	8000a6c <__aeabi_d2f+0x90>
 8000a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a60:	bf1e      	ittt	ne
 8000a62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a6a:	4770      	bxne	lr
 8000a6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b96a 	b.w	8000d68 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	460c      	mov	r4, r1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d14e      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000ab8:	4694      	mov	ip, r2
 8000aba:	458c      	cmp	ip, r1
 8000abc:	4686      	mov	lr, r0
 8000abe:	fab2 f282 	clz	r2, r2
 8000ac2:	d962      	bls.n	8000b8a <__udivmoddi4+0xde>
 8000ac4:	b14a      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac6:	f1c2 0320 	rsb	r3, r2, #32
 8000aca:	4091      	lsls	r1, r2
 8000acc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad4:	4319      	orrs	r1, r3
 8000ad6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ada:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ade:	fa1f f68c 	uxth.w	r6, ip
 8000ae2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ae6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aea:	fb07 1114 	mls	r1, r7, r4, r1
 8000aee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af2:	fb04 f106 	mul.w	r1, r4, r6
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b02:	f080 8112 	bcs.w	8000d2a <__udivmoddi4+0x27e>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 810f 	bls.w	8000d2a <__udivmoddi4+0x27e>
 8000b0c:	3c02      	subs	r4, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a59      	subs	r1, r3, r1
 8000b12:	fa1f f38e 	uxth.w	r3, lr
 8000b16:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b1a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb00 f606 	mul.w	r6, r0, r6
 8000b26:	429e      	cmp	r6, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x94>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b32:	f080 80fc 	bcs.w	8000d2e <__udivmoddi4+0x282>
 8000b36:	429e      	cmp	r6, r3
 8000b38:	f240 80f9 	bls.w	8000d2e <__udivmoddi4+0x282>
 8000b3c:	4463      	add	r3, ip
 8000b3e:	3802      	subs	r0, #2
 8000b40:	1b9b      	subs	r3, r3, r6
 8000b42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b46:	2100      	movs	r1, #0
 8000b48:	b11d      	cbz	r5, 8000b52 <__udivmoddi4+0xa6>
 8000b4a:	40d3      	lsrs	r3, r2
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d905      	bls.n	8000b66 <__udivmoddi4+0xba>
 8000b5a:	b10d      	cbz	r5, 8000b60 <__udivmoddi4+0xb4>
 8000b5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b60:	2100      	movs	r1, #0
 8000b62:	4608      	mov	r0, r1
 8000b64:	e7f5      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000b66:	fab3 f183 	clz	r1, r3
 8000b6a:	2900      	cmp	r1, #0
 8000b6c:	d146      	bne.n	8000bfc <__udivmoddi4+0x150>
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	d302      	bcc.n	8000b78 <__udivmoddi4+0xcc>
 8000b72:	4290      	cmp	r0, r2
 8000b74:	f0c0 80f0 	bcc.w	8000d58 <__udivmoddi4+0x2ac>
 8000b78:	1a86      	subs	r6, r0, r2
 8000b7a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b7e:	2001      	movs	r0, #1
 8000b80:	2d00      	cmp	r5, #0
 8000b82:	d0e6      	beq.n	8000b52 <__udivmoddi4+0xa6>
 8000b84:	e9c5 6300 	strd	r6, r3, [r5]
 8000b88:	e7e3      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	f040 8090 	bne.w	8000cb0 <__udivmoddi4+0x204>
 8000b90:	eba1 040c 	sub.w	r4, r1, ip
 8000b94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b98:	fa1f f78c 	uxth.w	r7, ip
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ba2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ba6:	fb08 4416 	mls	r4, r8, r6, r4
 8000baa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bae:	fb07 f006 	mul.w	r0, r7, r6
 8000bb2:	4298      	cmp	r0, r3
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x11c>
 8000bb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bba:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x11a>
 8000bc0:	4298      	cmp	r0, r3
 8000bc2:	f200 80cd 	bhi.w	8000d60 <__udivmoddi4+0x2b4>
 8000bc6:	4626      	mov	r6, r4
 8000bc8:	1a1c      	subs	r4, r3, r0
 8000bca:	fa1f f38e 	uxth.w	r3, lr
 8000bce:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bd2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bda:	fb00 f707 	mul.w	r7, r0, r7
 8000bde:	429f      	cmp	r7, r3
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x148>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bea:	d202      	bcs.n	8000bf2 <__udivmoddi4+0x146>
 8000bec:	429f      	cmp	r7, r3
 8000bee:	f200 80b0 	bhi.w	8000d52 <__udivmoddi4+0x2a6>
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	1bdb      	subs	r3, r3, r7
 8000bf6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bfa:	e7a5      	b.n	8000b48 <__udivmoddi4+0x9c>
 8000bfc:	f1c1 0620 	rsb	r6, r1, #32
 8000c00:	408b      	lsls	r3, r1
 8000c02:	fa22 f706 	lsr.w	r7, r2, r6
 8000c06:	431f      	orrs	r7, r3
 8000c08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c10:	ea43 030c 	orr.w	r3, r3, ip
 8000c14:	40f4      	lsrs	r4, r6
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	0c38      	lsrs	r0, r7, #16
 8000c1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c20:	fbb4 fef0 	udiv	lr, r4, r0
 8000c24:	fa1f fc87 	uxth.w	ip, r7
 8000c28:	fb00 441e 	mls	r4, r0, lr, r4
 8000c2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c30:	fb0e f90c 	mul.w	r9, lr, ip
 8000c34:	45a1      	cmp	r9, r4
 8000c36:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x1a6>
 8000c3c:	193c      	adds	r4, r7, r4
 8000c3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c42:	f080 8084 	bcs.w	8000d4e <__udivmoddi4+0x2a2>
 8000c46:	45a1      	cmp	r9, r4
 8000c48:	f240 8081 	bls.w	8000d4e <__udivmoddi4+0x2a2>
 8000c4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c50:	443c      	add	r4, r7
 8000c52:	eba4 0409 	sub.w	r4, r4, r9
 8000c56:	fa1f f983 	uxth.w	r9, r3
 8000c5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x1d2>
 8000c6e:	193c      	adds	r4, r7, r4
 8000c70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c74:	d267      	bcs.n	8000d46 <__udivmoddi4+0x29a>
 8000c76:	45a4      	cmp	ip, r4
 8000c78:	d965      	bls.n	8000d46 <__udivmoddi4+0x29a>
 8000c7a:	3b02      	subs	r3, #2
 8000c7c:	443c      	add	r4, r7
 8000c7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c82:	fba0 9302 	umull	r9, r3, r0, r2
 8000c86:	eba4 040c 	sub.w	r4, r4, ip
 8000c8a:	429c      	cmp	r4, r3
 8000c8c:	46ce      	mov	lr, r9
 8000c8e:	469c      	mov	ip, r3
 8000c90:	d351      	bcc.n	8000d36 <__udivmoddi4+0x28a>
 8000c92:	d04e      	beq.n	8000d32 <__udivmoddi4+0x286>
 8000c94:	b155      	cbz	r5, 8000cac <__udivmoddi4+0x200>
 8000c96:	ebb8 030e 	subs.w	r3, r8, lr
 8000c9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000ca2:	40cb      	lsrs	r3, r1
 8000ca4:	431e      	orrs	r6, r3
 8000ca6:	40cc      	lsrs	r4, r1
 8000ca8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	e750      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000cb0:	f1c2 0320 	rsb	r3, r2, #32
 8000cb4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cbc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cc0:	4094      	lsls	r4, r2
 8000cc2:	430c      	orrs	r4, r1
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ccc:	fa1f f78c 	uxth.w	r7, ip
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cd8:	0c23      	lsrs	r3, r4, #16
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f107 	mul.w	r1, r0, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x24c>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cee:	d22c      	bcs.n	8000d4a <__udivmoddi4+0x29e>
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d92a      	bls.n	8000d4a <__udivmoddi4+0x29e>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d00:	fb08 3311 	mls	r3, r8, r1, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb01 f307 	mul.w	r3, r1, r7
 8000d0c:	42a3      	cmp	r3, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x276>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d18:	d213      	bcs.n	8000d42 <__udivmoddi4+0x296>
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	d911      	bls.n	8000d42 <__udivmoddi4+0x296>
 8000d1e:	3902      	subs	r1, #2
 8000d20:	4464      	add	r4, ip
 8000d22:	1ae4      	subs	r4, r4, r3
 8000d24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d28:	e739      	b.n	8000b9e <__udivmoddi4+0xf2>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	e6f0      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e706      	b.n	8000b40 <__udivmoddi4+0x94>
 8000d32:	45c8      	cmp	r8, r9
 8000d34:	d2ae      	bcs.n	8000c94 <__udivmoddi4+0x1e8>
 8000d36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d3e:	3801      	subs	r0, #1
 8000d40:	e7a8      	b.n	8000c94 <__udivmoddi4+0x1e8>
 8000d42:	4631      	mov	r1, r6
 8000d44:	e7ed      	b.n	8000d22 <__udivmoddi4+0x276>
 8000d46:	4603      	mov	r3, r0
 8000d48:	e799      	b.n	8000c7e <__udivmoddi4+0x1d2>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e7d4      	b.n	8000cf8 <__udivmoddi4+0x24c>
 8000d4e:	46d6      	mov	lr, sl
 8000d50:	e77f      	b.n	8000c52 <__udivmoddi4+0x1a6>
 8000d52:	4463      	add	r3, ip
 8000d54:	3802      	subs	r0, #2
 8000d56:	e74d      	b.n	8000bf4 <__udivmoddi4+0x148>
 8000d58:	4606      	mov	r6, r0
 8000d5a:	4623      	mov	r3, r4
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	e70f      	b.n	8000b80 <__udivmoddi4+0xd4>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	4463      	add	r3, ip
 8000d64:	e730      	b.n	8000bc8 <__udivmoddi4+0x11c>
 8000d66:	bf00      	nop

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <ds18b20_drive_LOW>:
	 return 1;

}

/* Drive the data bus line LOW*/
void ds18b20_drive_LOW(void){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2120      	movs	r1, #32
 8000d74:	4802      	ldr	r0, [pc, #8]	@ (8000d80 <ds18b20_drive_LOW+0x14>)
 8000d76:	f004 f86d 	bl	8004e54 <HAL_GPIO_WritePin>
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40020400 	.word	0x40020400

08000d84 <ds18b20_release_HIGH>:

/* Release the data line -> External pull-up resistor drives the line HIGH*/
void ds18b20_release_HIGH(void){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2120      	movs	r1, #32
 8000d8c:	4802      	ldr	r0, [pc, #8]	@ (8000d98 <ds18b20_release_HIGH+0x14>)
 8000d8e:	f004 f861 	bl	8004e54 <HAL_GPIO_WritePin>
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40020400 	.word	0x40020400

08000d9c <ds18b20_write_0>:

/* Write logic 0 on the data bus*/
void ds18b20_write_0(void){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	TIMER_US_DELAY(1); // recovery time
 8000da0:	2001      	movs	r0, #1
 8000da2:	f002 faeb 	bl	800337c <TIMER_US_DELAY>

	/* Drive the line down for 70 micro-seconds*/
	ds18b20_drive_LOW();
 8000da6:	f7ff ffe1 	bl	8000d6c <ds18b20_drive_LOW>
	TIMER_US_DELAY(100);
 8000daa:	2064      	movs	r0, #100	@ 0x64
 8000dac:	f002 fae6 	bl	800337c <TIMER_US_DELAY>

	/* Release the line - Pull-up resistor drives the line HIGH for 10 micro-seconds*/
	ds18b20_release_HIGH();
 8000db0:	f7ff ffe8 	bl	8000d84 <ds18b20_release_HIGH>
	TIMER_US_DELAY(10);
 8000db4:	200a      	movs	r0, #10
 8000db6:	f002 fae1 	bl	800337c <TIMER_US_DELAY>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <ds18b20_write_1>:

void ds18b20_write_1(void){
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0
	TIMER_US_DELAY(1); // recovery time
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f002 fada 	bl	800337c <TIMER_US_DELAY>

	/* Drive the line down for 10 micro-seconds*/
	ds18b20_drive_LOW();
 8000dc8:	f7ff ffd0 	bl	8000d6c <ds18b20_drive_LOW>
	TIMER_US_DELAY(15);
 8000dcc:	200f      	movs	r0, #15
 8000dce:	f002 fad5 	bl	800337c <TIMER_US_DELAY>

	/* Release the line - Pull-up resistor drives the line HIGH for 60 micro-seconds*/
	ds18b20_release_HIGH();
 8000dd2:	f7ff ffd7 	bl	8000d84 <ds18b20_release_HIGH>
	TIMER_US_DELAY(90);
 8000dd6:	205a      	movs	r0, #90	@ 0x5a
 8000dd8:	f002 fad0 	bl	800337c <TIMER_US_DELAY>
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <ds18b20_start>:

/* Start the communication with sensors*/
bool ds18b20_start(void){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
	bool response = true;
 8000de6:	2301      	movs	r3, #1
 8000de8:	71fb      	strb	r3, [r7, #7]
	/* Pull the line LOW for 500 micro-seconds*/
	ds18b20_drive_LOW();
 8000dea:	f7ff ffbf 	bl	8000d6c <ds18b20_drive_LOW>
	TIMER_US_DELAY(500);
 8000dee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000df2:	f002 fac3 	bl	800337c <TIMER_US_DELAY>
	/* Release the line*/
	ds18b20_release_HIGH();
 8000df6:	f7ff ffc5 	bl	8000d84 <ds18b20_release_HIGH>

	/* Wait for 40 micro-seconds and check response from DS18B20*/
	TIMER_US_DELAY(40);
 8000dfa:	2028      	movs	r0, #40	@ 0x28
 8000dfc:	f002 fabe 	bl	800337c <TIMER_US_DELAY>
	ds18b20_status = HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN);
 8000e00:	2120      	movs	r1, #32
 8000e02:	480b      	ldr	r0, [pc, #44]	@ (8000e30 <ds18b20_start+0x50>)
 8000e04:	f004 f80e 	bl	8004e24 <HAL_GPIO_ReadPin>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b09      	ldr	r3, [pc, #36]	@ (8000e34 <ds18b20_start+0x54>)
 8000e0e:	701a      	strb	r2, [r3, #0]
	if (ds18b20_status != GPIO_PIN_RESET){
 8000e10:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <ds18b20_start+0x54>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <ds18b20_start+0x3c>
		response = false;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	71fb      	strb	r3, [r7, #7]
	}
	TIMER_US_DELAY(450);
 8000e1c:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000e20:	f002 faac 	bl	800337c <TIMER_US_DELAY>
	return response;
 8000e24:	79fb      	ldrb	r3, [r7, #7]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40020400 	.word	0x40020400
 8000e34:	20000000 	.word	0x20000000

08000e38 <ds18b20_write_byte>:

void ds18b20_write_byte(uint8_t command){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i< 8; i++){
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	e00f      	b.n	8000e68 <ds18b20_write_byte+0x30>
		if(command & 0x01){ds18b20_write_1();}
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d002      	beq.n	8000e58 <ds18b20_write_byte+0x20>
 8000e52:	f7ff ffb4 	bl	8000dbe <ds18b20_write_1>
 8000e56:	e001      	b.n	8000e5c <ds18b20_write_byte+0x24>
		else{ds18b20_write_0();}
 8000e58:	f7ff ffa0 	bl	8000d9c <ds18b20_write_0>
		command = (command >> 1);
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	085b      	lsrs	r3, r3, #1
 8000e60:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i< 8; i++){
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	3301      	adds	r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2b07      	cmp	r3, #7
 8000e6c:	ddec      	ble.n	8000e48 <ds18b20_write_byte+0x10>
	}
}
 8000e6e:	bf00      	nop
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <ds18b20_read>:

uint8_t* ds18b20_read(bool temperature_reading, int n_i, int n_j, UART_HandleTypeDef* uart){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	4603      	mov	r3, r0
 8000e86:	73fb      	strb	r3, [r7, #15]
	static uint8_t data_array[9]; // 9 bytes of data
	static uint8_t temperature_data[3];

	int i;
	for (i = 0; i<n_i; i++){
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
 8000e8c:	e032      	b.n	8000ef4 <ds18b20_read+0x7c>
		uint8_t byte = 0x00;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	76fb      	strb	r3, [r7, #27]
		for (int j=0; j<n_j; j++){
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e021      	b.n	8000edc <ds18b20_read+0x64>
			//TIMER_US_DELAY(1); // Recovery time

			/* Hold the line low for 15 micro-seconds*/
			ds18b20_drive_LOW();
 8000e98:	f7ff ff68 	bl	8000d6c <ds18b20_drive_LOW>
			TIMER_US_DELAY(1);
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	f002 fa6d 	bl	800337c <TIMER_US_DELAY>

			/* Release the line for 10 micro-seconds*/
			ds18b20_release_HIGH();
 8000ea2:	f7ff ff6f 	bl	8000d84 <ds18b20_release_HIGH>
			TIMER_US_DELAY(5);
 8000ea6:	2005      	movs	r0, #5
 8000ea8:	f002 fa68 	bl	800337c <TIMER_US_DELAY>

			if(HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN) == GPIO_PIN_SET){
 8000eac:	2120      	movs	r1, #32
 8000eae:	4820      	ldr	r0, [pc, #128]	@ (8000f30 <ds18b20_read+0xb8>)
 8000eb0:	f003 ffb8 	bl	8004e24 <HAL_GPIO_ReadPin>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d107      	bne.n	8000eca <ds18b20_read+0x52>
				byte = (byte >> 1);
 8000eba:	7efb      	ldrb	r3, [r7, #27]
 8000ebc:	085b      	lsrs	r3, r3, #1
 8000ebe:	76fb      	strb	r3, [r7, #27]
				byte = byte | 0x80;
 8000ec0:	7efb      	ldrb	r3, [r7, #27]
 8000ec2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ec6:	76fb      	strb	r3, [r7, #27]
 8000ec8:	e002      	b.n	8000ed0 <ds18b20_read+0x58>
			}
			else{
				byte = (byte >> 1);
 8000eca:	7efb      	ldrb	r3, [r7, #27]
 8000ecc:	085b      	lsrs	r3, r3, #1
 8000ece:	76fb      	strb	r3, [r7, #27]
			}
			TIMER_US_DELAY(45);
 8000ed0:	202d      	movs	r0, #45	@ 0x2d
 8000ed2:	f002 fa53 	bl	800337c <TIMER_US_DELAY>
		for (int j=0; j<n_j; j++){
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	dbd9      	blt.n	8000e98 <ds18b20_read+0x20>
		}
		data_array[i] = byte;
 8000ee4:	4a13      	ldr	r2, [pc, #76]	@ (8000f34 <ds18b20_read+0xbc>)
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	4413      	add	r3, r2
 8000eea:	7efa      	ldrb	r2, [r7, #27]
 8000eec:	701a      	strb	r2, [r3, #0]
	for (i = 0; i<n_i; i++){
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	61fb      	str	r3, [r7, #28]
 8000ef4:	69fa      	ldr	r2, [r7, #28]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	dbc8      	blt.n	8000e8e <ds18b20_read+0x16>
		//print_hex_f_array(uart,  data_array, 5000, true, false, false, false, true);
		//print_hex_f_array(uart, data_array, 5000, true, false, false, false, true);
		//HAL_UART_Transmit(uart, data_array, 1, 1000);
	}
	data_array[i] = 0x00;
 8000efc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f34 <ds18b20_read+0xbc>)
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	4413      	add	r3, r2
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]

	if (temperature_reading){
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00c      	beq.n	8000f26 <ds18b20_read+0xae>
		temperature_data[0] = data_array[0];
 8000f0c:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <ds18b20_read+0xbc>)
 8000f0e:	781a      	ldrb	r2, [r3, #0]
 8000f10:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <ds18b20_read+0xc0>)
 8000f12:	701a      	strb	r2, [r3, #0]
		temperature_data[1] = data_array[1];
 8000f14:	4b07      	ldr	r3, [pc, #28]	@ (8000f34 <ds18b20_read+0xbc>)
 8000f16:	785a      	ldrb	r2, [r3, #1]
 8000f18:	4b07      	ldr	r3, [pc, #28]	@ (8000f38 <ds18b20_read+0xc0>)
 8000f1a:	705a      	strb	r2, [r3, #1]
		temperature_data[2] = 0x00;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <ds18b20_read+0xc0>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	709a      	strb	r2, [r3, #2]
		return temperature_data;
 8000f22:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <ds18b20_read+0xc0>)
 8000f24:	e000      	b.n	8000f28 <ds18b20_read+0xb0>
	}
	//print_hex_f_array(uart, data_array, 5000, true, false, false, true, true);
	return data_array;
 8000f26:	4b03      	ldr	r3, [pc, #12]	@ (8000f34 <ds18b20_read+0xbc>)
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40020400 	.word	0x40020400
 8000f34:	20000188 	.word	0x20000188
 8000f38:	20000194 	.word	0x20000194

08000f3c <ds18b20_get_temperature>:
	strcat(temperature_data, temp_array);

	return temperature_data;
}

float ds18b20_get_temperature(DS18B20* sensor, bool skip_rom, UART_HandleTypeDef* uart){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	460b      	mov	r3, r1
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	72fb      	strb	r3, [r7, #11]
	float result = -1;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb4 <ds18b20_get_temperature+0x78>)
 8000f4c:	61fb      	str	r3, [r7, #28]
	while(result < 0){
 8000f4e:	e022      	b.n	8000f96 <ds18b20_get_temperature+0x5a>
		uint8_t* data = ds18b20_read_scratchpad(skip_rom, sensor, uart);
 8000f50:	7afb      	ldrb	r3, [r7, #11]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	68f9      	ldr	r1, [r7, #12]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f85a 	bl	8001010 <ds18b20_read_scratchpad>
 8000f5c:	61b8      	str	r0, [r7, #24]

		int16_t raw_temp = (data[1] << 8) | data[0];
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	3301      	adds	r3, #1
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	b21a      	sxth	r2, r3
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b21b      	sxth	r3, r3
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	82fb      	strh	r3, [r7, #22]
		result = raw_temp * 0.0625;
 8000f72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fc16 	bl	80007a8 <__aeabi_i2d>
 8000f7c:	f04f 0200 	mov.w	r2, #0
 8000f80:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <ds18b20_get_temperature+0x7c>)
 8000f82:	f7ff f995 	bl	80002b0 <__aeabi_dmul>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f7ff fd25 	bl	80009dc <__aeabi_d2f>
 8000f92:	4603      	mov	r3, r0
 8000f94:	61fb      	str	r3, [r7, #28]
	while(result < 0){
 8000f96:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa2:	d4d5      	bmi.n	8000f50 <ds18b20_get_temperature+0x14>
	}
	return result;
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	ee07 3a90 	vmov	s15, r3
}
 8000faa:	eeb0 0a67 	vmov.f32	s0, s15
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	bf800000 	.word	0xbf800000
 8000fb8:	3fb00000 	.word	0x3fb00000

08000fbc <ds18b20_match_ROM>:
	ds18b20_start();
	ds18b20_write_byte(DS18B20_READ_ROM);
	return ds18b20_read(false, 8, 8, uart);
}
/* Match a 64bits serial number of a sensor */
void ds18b20_match_ROM(DS18B20* sensor){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	ds18b20_write_byte(DS18B20_MATCH_ROM);
 8000fc4:	2055      	movs	r0, #85	@ 0x55
 8000fc6:	f7ff ff37 	bl	8000e38 <ds18b20_write_byte>
	for(int i=0; i<8;i++){
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	e009      	b.n	8000fe4 <ds18b20_match_ROM+0x28>
		ds18b20_write_byte(sensor->SERIAL_NUMBER[i]);
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff2d 	bl	8000e38 <ds18b20_write_byte>
	for(int i=0; i<8;i++){
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2b07      	cmp	r3, #7
 8000fe8:	ddf2      	ble.n	8000fd0 <ds18b20_match_ROM+0x14>
	}
}
 8000fea:	bf00      	nop
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <ds18b20_skip_ROM>:
/* Skip ROM and send commands - only used if there is only one sensor in the line */
void ds18b20_skip_ROM(){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	ds18b20_write_byte(DS18B20_SKIP_ROM);
 8000ff8:	20cc      	movs	r0, #204	@ 0xcc
 8000ffa:	f7ff ff1d 	bl	8000e38 <ds18b20_write_byte>
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}

08001002 <ds18b20_convert_T>:
	ds18b20_write_byte(DS18B20_ALARM_SEARCH);
}

										/********** FUNCTION COMMANDS **********/
/* Starts the process to convert temperature at the sensor*/
void ds18b20_convert_T(){
 8001002:	b580      	push	{r7, lr}
 8001004:	af00      	add	r7, sp, #0
	ds18b20_write_byte(DS18B20_CONVERT_T);
 8001006:	2044      	movs	r0, #68	@ 0x44
 8001008:	f7ff ff16 	bl	8000e38 <ds18b20_write_byte>
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}

08001010 <ds18b20_read_scratchpad>:
void ds18b20_write_scratchpad(){
	ds18b20_write_byte(DS18B20_WRITE_SCRATCHPAD);
}

/* Read data from the sensor - (temperature is within this data) */
uint8_t* ds18b20_read_scratchpad(bool skip_rom, DS18B20* sensor, UART_HandleTypeDef* uart){
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
 800101c:	73fb      	strb	r3, [r7, #15]
	/* Start communication*/
	ds18b20_start();
 800101e:	f7ff fedf 	bl	8000de0 <ds18b20_start>

	/* Target the sensor to read from */
	if(skip_rom){ds18b20_skip_ROM();}
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <ds18b20_read_scratchpad+0x1e>
 8001028:	f7ff ffe4 	bl	8000ff4 <ds18b20_skip_ROM>
 800102c:	e002      	b.n	8001034 <ds18b20_read_scratchpad+0x24>
	else{ds18b20_match_ROM(sensor);}
 800102e:	68b8      	ldr	r0, [r7, #8]
 8001030:	f7ff ffc4 	bl	8000fbc <ds18b20_match_ROM>

	/* Start conversion procedure in the DS18B20 and wait for 200 mili-seconds for conversion */
	ds18b20_convert_T();
 8001034:	f7ff ffe5 	bl	8001002 <ds18b20_convert_T>
	HAL_Delay(200);
 8001038:	20c8      	movs	r0, #200	@ 0xc8
 800103a:	f003 f9df 	bl	80043fc <HAL_Delay>

	/* Restart communication*/
	ds18b20_start();
 800103e:	f7ff fecf 	bl	8000de0 <ds18b20_start>
	if(skip_rom){ds18b20_skip_ROM();}
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d002      	beq.n	800104e <ds18b20_read_scratchpad+0x3e>
 8001048:	f7ff ffd4 	bl	8000ff4 <ds18b20_skip_ROM>
 800104c:	e002      	b.n	8001054 <ds18b20_read_scratchpad+0x44>
	else{ds18b20_match_ROM( sensor);}
 800104e:	68b8      	ldr	r0, [r7, #8]
 8001050:	f7ff ffb4 	bl	8000fbc <ds18b20_match_ROM>
	ds18b20_write_byte(DS18B20_READ_SCRATCHPAD);
 8001054:	20be      	movs	r0, #190	@ 0xbe
 8001056:	f7ff feef 	bl	8000e38 <ds18b20_write_byte>
	/* TRUE -> specifies that it is reading temperature*/
	return ds18b20_read(skip_rom, 9, 8, uart);
 800105a:	7bf8      	ldrb	r0, [r7, #15]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2208      	movs	r2, #8
 8001060:	2109      	movs	r1, #9
 8001062:	f7ff ff09 	bl	8000e78 <ds18b20_read>
 8001066:	4603      	mov	r3, r0
}
 8001068:	4618      	mov	r0, r3
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <COMMAND_HANDLE>:
			*command = (*command & (~STALL_ACTIVE)) & (~STALL_ACTIVE);
		}
	}
}

void COMMAND_HANDLE(TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim2, uint8_t *command){
 8001070:	b580      	push	{r7, lr}
 8001072:	b0b8      	sub	sp, #224	@ 0xe0
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
	if((*command & START) == START){
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	2b00      	cmp	r3, #0
 8001086:	d00f      	beq.n	80010a8 <COMMAND_HANDLE+0x38>
		LCD_typeDebug("STARTED TIM");
 8001088:	4860      	ldr	r0, [pc, #384]	@ (800120c <COMMAND_HANDLE+0x19c>)
 800108a:	f001 fcff 	bl	8002a8c <LCD_typeDebug>
		HAL_TIM_Base_Start_IT(htim); // Enable Clock Interrupt to update the temperature.
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f005 fa1a 	bl	80064c8 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(htim2);
 8001094:	68b8      	ldr	r0, [r7, #8]
 8001096:	f005 fa17 	bl	80064c8 <HAL_TIM_Base_Start_IT>
		// Clear Command flag and set RUNNING flag
		*command = *command & (~START);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	f023 0301 	bic.w	r3, r3, #1
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	701a      	strb	r2, [r3, #0]
	}
	if((*command & IDLE) == IDLE){
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00c      	beq.n	80010ce <COMMAND_HANDLE+0x5e>
		HAL_TIM_Base_Stop_IT(htim);// Disable Clock Interrupt
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f005 fa69 	bl	800658c <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(htim2);
 80010ba:	68b8      	ldr	r0, [r7, #8]
 80010bc:	f005 fa66 	bl	800658c <HAL_TIM_Base_Stop_IT>
		// Clear Command flag and set IDLED flag
		*command = *command & (~IDLE);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	f023 0302 	bic.w	r3, r3, #2
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	701a      	strb	r2, [r3, #0]
	}

	if(!(ESP_CTS_GPIO_Port->IDR & ESP_CTS_Pin) && (cmd.status_busy)){
 80010ce:	4b50      	ldr	r3, [pc, #320]	@ (8001210 <COMMAND_HANDLE+0x1a0>)
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	f003 0320 	and.w	r3, r3, #32
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d110      	bne.n	80010fc <COMMAND_HANDLE+0x8c>
 80010da:	4b4e      	ldr	r3, [pc, #312]	@ (8001214 <COMMAND_HANDLE+0x1a4>)
 80010dc:	f893 392c 	ldrb.w	r3, [r3, #2348]	@ 0x92c
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d00b      	beq.n	80010fc <COMMAND_HANDLE+0x8c>
		PARSE_COMMAND();
 80010e4:	f000 f8e4 	bl	80012b0 <PARSE_COMMAND>
		cmd.status_busy = false;
 80010e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001214 <COMMAND_HANDLE+0x1a4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 292c 	strb.w	r2, [r3, #2348]	@ 0x92c
		memset(cmd.cmd_all, 0, sizeof(cmd.cmd_all));
 80010f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f4:	2100      	movs	r1, #0
 80010f6:	4848      	ldr	r0, [pc, #288]	@ (8001218 <COMMAND_HANDLE+0x1a8>)
 80010f8:	f006 ff10 	bl	8007f1c <memset>
	}

	if((act & CONTROLLER_COMMAND) == CONTROLLER_COMMAND){
 80010fc:	4b47      	ldr	r3, [pc, #284]	@ (800121c <COMMAND_HANDLE+0x1ac>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	f003 0320 	and.w	r3, r3, #32
 8001104:	2b00      	cmp	r3, #0
 8001106:	d07c      	beq.n	8001202 <COMMAND_HANDLE+0x192>
		act = act & (~CONTROLLER_COMMAND);
 8001108:	4b44      	ldr	r3, [pc, #272]	@ (800121c <COMMAND_HANDLE+0x1ac>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	f023 0320 	bic.w	r3, r3, #32
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b42      	ldr	r3, [pc, #264]	@ (800121c <COMMAND_HANDLE+0x1ac>)
 8001114:	701a      	strb	r2, [r3, #0]
		act = act | TEMP_GET_TEMP_SET | TEMP_GET_VALV_APROX;
 8001116:	4b41      	ldr	r3, [pc, #260]	@ (800121c <COMMAND_HANDLE+0x1ac>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	f043 030c 	orr.w	r3, r3, #12
 800111e:	b2da      	uxtb	r2, r3
 8001120:	4b3e      	ldr	r3, [pc, #248]	@ (800121c <COMMAND_HANDLE+0x1ac>)
 8001122:	701a      	strb	r2, [r3, #0]
		char msg10[200];
		sprintf(msg10, "command: %s", cmd.command);
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4a3d      	ldr	r2, [pc, #244]	@ (8001220 <COMMAND_HANDLE+0x1b0>)
 800112a:	493e      	ldr	r1, [pc, #248]	@ (8001224 <COMMAND_HANDLE+0x1b4>)
 800112c:	4618      	mov	r0, r3
 800112e:	f006 fed5 	bl	8007edc <siprintf>
		LCD_typeDebug(msg10);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4618      	mov	r0, r3
 8001138:	f001 fca8 	bl	8002a8c <LCD_typeDebug>
		HAL_Delay(5000);
 800113c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001140:	f003 f95c 	bl	80043fc <HAL_Delay>
		if(strcmp(cmd.command, "RUN") == 0){
 8001144:	4938      	ldr	r1, [pc, #224]	@ (8001228 <COMMAND_HANDLE+0x1b8>)
 8001146:	4836      	ldr	r0, [pc, #216]	@ (8001220 <COMMAND_HANDLE+0x1b0>)
 8001148:	f7ff f84a 	bl	80001e0 <strcmp>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d142      	bne.n	80011d8 <COMMAND_HANDLE+0x168>
			LCD_typeDebug("RUN COMMAND RECEIVE");
 8001152:	4836      	ldr	r0, [pc, #216]	@ (800122c <COMMAND_HANDLE+0x1bc>)
 8001154:	f001 fc9a 	bl	8002a8c <LCD_typeDebug>
			*command |= RUN;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	f043 0320 	orr.w	r3, r3, #32
 8001160:	b2da      	uxtb	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	701a      	strb	r2, [r3, #0]
			*command |= START;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	b2da      	uxtb	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	701a      	strb	r2, [r3, #0]

			if(strlen(cmd.args[1]) > 0){
 8001174:	4b2e      	ldr	r3, [pc, #184]	@ (8001230 <COMMAND_HANDLE+0x1c0>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d042      	beq.n	8001202 <COMMAND_HANDLE+0x192>
				button.temp_set = atoi(cmd.args[1]);
 800117c:	482c      	ldr	r0, [pc, #176]	@ (8001230 <COMMAND_HANDLE+0x1c0>)
 800117e:	f006 fe25 	bl	8007dcc <atoi>
 8001182:	4603      	mov	r3, r0
 8001184:	4a2b      	ldr	r2, [pc, #172]	@ (8001234 <COMMAND_HANDLE+0x1c4>)
 8001186:	6093      	str	r3, [r2, #8]
				if(button.temp_set > 0) LCD_UpdateTempSet(button.temp_set);
 8001188:	4b2a      	ldr	r3, [pc, #168]	@ (8001234 <COMMAND_HANDLE+0x1c4>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	2b00      	cmp	r3, #0
 800118e:	dd09      	ble.n	80011a4 <COMMAND_HANDLE+0x134>
 8001190:	4b28      	ldr	r3, [pc, #160]	@ (8001234 <COMMAND_HANDLE+0x1c4>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	ee07 3a90 	vmov	s15, r3
 8001198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800119c:	eeb0 0a67 	vmov.f32	s0, s15
 80011a0:	f001 faf6 	bl	8002790 <LCD_UpdateTempSet>
				int calc = 250*((button.temp_set - COLD_TEMP)/((float)50 - COLD_TEMP));
 80011a4:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <COMMAND_HANDLE+0x1c4>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	3b0f      	subs	r3, #15
 80011aa:	ee07 3a90 	vmov	s15, r3
 80011ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b2:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001238 <COMMAND_HANDLE+0x1c8>
 80011b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ba:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800123c <COMMAND_HANDLE+0x1cc>
 80011be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c6:	ee17 3a90 	vmov	r3, s15
 80011ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
				valve.aprox = (int)calc;
 80011ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80011d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001240 <COMMAND_HANDLE+0x1d0>)
 80011d4:	60d3      	str	r3, [r2, #12]
			LCD_typeDebug("STOP COMMAND RECEIVE");
			HAL_Delay(4000);
			*command |= IDLE;
		}
	}
}
 80011d6:	e014      	b.n	8001202 <COMMAND_HANDLE+0x192>
		else if(strcmp(cmd.command, "STOP") == 0){
 80011d8:	491a      	ldr	r1, [pc, #104]	@ (8001244 <COMMAND_HANDLE+0x1d4>)
 80011da:	4811      	ldr	r0, [pc, #68]	@ (8001220 <COMMAND_HANDLE+0x1b0>)
 80011dc:	f7ff f800 	bl	80001e0 <strcmp>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10d      	bne.n	8001202 <COMMAND_HANDLE+0x192>
			LCD_typeDebug("STOP COMMAND RECEIVE");
 80011e6:	4818      	ldr	r0, [pc, #96]	@ (8001248 <COMMAND_HANDLE+0x1d8>)
 80011e8:	f001 fc50 	bl	8002a8c <LCD_typeDebug>
			HAL_Delay(4000);
 80011ec:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80011f0:	f003 f904 	bl	80043fc <HAL_Delay>
			*command |= IDLE;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	701a      	strb	r2, [r3, #0]
}
 8001202:	bf00      	nop
 8001204:	37e0      	adds	r7, #224	@ 0xe0
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	080089b8 	.word	0x080089b8
 8001210:	40020000 	.word	0x40020000
 8001214:	20000474 	.word	0x20000474
 8001218:	200005a0 	.word	0x200005a0
 800121c:	20000465 	.word	0x20000465
 8001220:	200004ec 	.word	0x200004ec
 8001224:	080089c4 	.word	0x080089c4
 8001228:	080089d0 	.word	0x080089d0
 800122c:	080089d4 	.word	0x080089d4
 8001230:	20000564 	.word	0x20000564
 8001234:	200000cc 	.word	0x200000cc
 8001238:	420c0000 	.word	0x420c0000
 800123c:	437a0000 	.word	0x437a0000
 8001240:	200000b8 	.word	0x200000b8
 8001244:	080089e8 	.word	0x080089e8
 8001248:	080089f0 	.word	0x080089f0

0800124c <VALVE_CONTROL_RUN>:


void VALVE_CONTROL_RUN(Valve *valve, DS18B20 *sensor, Button *button){
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
	float delta = sensor->temperature - button->temp_set;
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	ed93 7a03 	vldr	s14, [r3, #12]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	ee07 3a90 	vmov	s15, r3
 8001266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800126a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800126e:	edc7 7a05 	vstr	s15, [r7, #20]
	if(abs(delta) > 0.5){
 8001272:	edd7 7a05 	vldr	s15, [r7, #20]
 8001276:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800127a:	ee17 3a90 	vmov	r3, s15
 800127e:	2b00      	cmp	r3, #0
 8001280:	bfb8      	it	lt
 8001282:	425b      	neglt	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	dd0f      	ble.n	80012a8 <VALVE_CONTROL_RUN+0x5c>
		if(delta > 0){
 8001288:	edd7 7a05 	vldr	s15, [r7, #20]
 800128c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001294:	dd04      	ble.n	80012a0 <VALVE_CONTROL_RUN+0x54>
			VALVE_CONTROL_CW_STEP(1, valve);
 8001296:	68f9      	ldr	r1, [r7, #12]
 8001298:	2001      	movs	r0, #1
 800129a:	f000 f91b 	bl	80014d4 <VALVE_CONTROL_CW_STEP>
		}
		else{
			VALVE_CONTROL_CCW_STEP(1, valve);
		}
	}
}
 800129e:	e003      	b.n	80012a8 <VALVE_CONTROL_RUN+0x5c>
			VALVE_CONTROL_CCW_STEP(1, valve);
 80012a0:	68f9      	ldr	r1, [r7, #12]
 80012a2:	2001      	movs	r0, #1
 80012a4:	f000 f968 	bl	8001578 <VALVE_CONTROL_CCW_STEP>
}
 80012a8:	bf00      	nop
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <PARSE_COMMAND>:

void PARSE_COMMAND(){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
	char *token;
	char *ptr;
	sprintf(cmd.cmd_all_tmp, cmd.cmd_all);
 80012b6:	4969      	ldr	r1, [pc, #420]	@ (800145c <PARSE_COMMAND+0x1ac>)
 80012b8:	4869      	ldr	r0, [pc, #420]	@ (8001460 <PARSE_COMMAND+0x1b0>)
 80012ba:	f006 fe0f 	bl	8007edc <siprintf>
	ptr = cmd.cmd_all_tmp;
 80012be:	4b68      	ldr	r3, [pc, #416]	@ (8001460 <PARSE_COMMAND+0x1b0>)
 80012c0:	603b      	str	r3, [r7, #0]
	while((token  = strsep(&ptr, " ")) != NULL){
 80012c2:	e0bb      	b.n	800143c <PARSE_COMMAND+0x18c>
		if(strcmp(token, "Origin:") == 0){memset(cmd.origin, 0, sizeof(cmd.origin));
 80012c4:	4967      	ldr	r1, [pc, #412]	@ (8001464 <PARSE_COMMAND+0x1b4>)
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7fe ff8a 	bl	80001e0 <strcmp>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d114      	bne.n	80012fc <PARSE_COMMAND+0x4c>
 80012d2:	2264      	movs	r2, #100	@ 0x64
 80012d4:	2100      	movs	r1, #0
 80012d6:	4864      	ldr	r0, [pc, #400]	@ (8001468 <PARSE_COMMAND+0x1b8>)
 80012d8:	f006 fe20 	bl	8007f1c <memset>
			if((token = strsep(&ptr, " ")) != NULL){sprintf(cmd.origin, "%s", token); }}
 80012dc:	463b      	mov	r3, r7
 80012de:	4963      	ldr	r1, [pc, #396]	@ (800146c <PARSE_COMMAND+0x1bc>)
 80012e0:	4618      	mov	r0, r3
 80012e2:	f006 fe32 	bl	8007f4a <strsep>
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 80a6 	beq.w	800143c <PARSE_COMMAND+0x18c>
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	495f      	ldr	r1, [pc, #380]	@ (8001470 <PARSE_COMMAND+0x1c0>)
 80012f4:	485c      	ldr	r0, [pc, #368]	@ (8001468 <PARSE_COMMAND+0x1b8>)
 80012f6:	f006 fdf1 	bl	8007edc <siprintf>
 80012fa:	e09f      	b.n	800143c <PARSE_COMMAND+0x18c>
		else if(strcmp(token, "Protocol:") == 0){
 80012fc:	495d      	ldr	r1, [pc, #372]	@ (8001474 <PARSE_COMMAND+0x1c4>)
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7fe ff6e 	bl	80001e0 <strcmp>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10f      	bne.n	800132a <PARSE_COMMAND+0x7a>
			if((token = strsep(&ptr, " ")) != NULL){sprintf(cmd.protocol, "%s", token); }}
 800130a:	463b      	mov	r3, r7
 800130c:	4957      	ldr	r1, [pc, #348]	@ (800146c <PARSE_COMMAND+0x1bc>)
 800130e:	4618      	mov	r0, r3
 8001310:	f006 fe1b 	bl	8007f4a <strsep>
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 808f 	beq.w	800143c <PARSE_COMMAND+0x18c>
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	4953      	ldr	r1, [pc, #332]	@ (8001470 <PARSE_COMMAND+0x1c0>)
 8001322:	4855      	ldr	r0, [pc, #340]	@ (8001478 <PARSE_COMMAND+0x1c8>)
 8001324:	f006 fdda 	bl	8007edc <siprintf>
 8001328:	e088      	b.n	800143c <PARSE_COMMAND+0x18c>
		else if (strcmp(token, "Command:") == 0){memset(cmd.command, 0, sizeof(cmd.command));
 800132a:	4954      	ldr	r1, [pc, #336]	@ (800147c <PARSE_COMMAND+0x1cc>)
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7fe ff57 	bl	80001e0 <strcmp>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d11a      	bne.n	800136e <PARSE_COMMAND+0xbe>
 8001338:	2264      	movs	r2, #100	@ 0x64
 800133a:	2100      	movs	r1, #0
 800133c:	4850      	ldr	r0, [pc, #320]	@ (8001480 <PARSE_COMMAND+0x1d0>)
 800133e:	f006 fded 	bl	8007f1c <memset>
			if((token = strsep(&ptr, " ")) != NULL){sprintf(cmd.command, "%s", token); act |= CONTROLLER_COMMAND;}}
 8001342:	463b      	mov	r3, r7
 8001344:	4949      	ldr	r1, [pc, #292]	@ (800146c <PARSE_COMMAND+0x1bc>)
 8001346:	4618      	mov	r0, r3
 8001348:	f006 fdff 	bl	8007f4a <strsep>
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d073      	beq.n	800143c <PARSE_COMMAND+0x18c>
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	4946      	ldr	r1, [pc, #280]	@ (8001470 <PARSE_COMMAND+0x1c0>)
 8001358:	4849      	ldr	r0, [pc, #292]	@ (8001480 <PARSE_COMMAND+0x1d0>)
 800135a:	f006 fdbf 	bl	8007edc <siprintf>
 800135e:	4b49      	ldr	r3, [pc, #292]	@ (8001484 <PARSE_COMMAND+0x1d4>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	f043 0320 	orr.w	r3, r3, #32
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b46      	ldr	r3, [pc, #280]	@ (8001484 <PARSE_COMMAND+0x1d4>)
 800136a:	701a      	strb	r2, [r3, #0]
 800136c:	e066      	b.n	800143c <PARSE_COMMAND+0x18c>
		else if(strcmp(token, "Arg_0:") == 0){memset(cmd.args[0], 0, sizeof(cmd.args[0]));
 800136e:	4946      	ldr	r1, [pc, #280]	@ (8001488 <PARSE_COMMAND+0x1d8>)
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7fe ff35 	bl	80001e0 <strcmp>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d112      	bne.n	80013a2 <PARSE_COMMAND+0xf2>
 800137c:	2214      	movs	r2, #20
 800137e:	2100      	movs	r1, #0
 8001380:	4842      	ldr	r0, [pc, #264]	@ (800148c <PARSE_COMMAND+0x1dc>)
 8001382:	f006 fdcb 	bl	8007f1c <memset>
			if((token = strsep(&ptr, " ")) != NULL){strcpy(cmd.args[0], token);}}
 8001386:	463b      	mov	r3, r7
 8001388:	4938      	ldr	r1, [pc, #224]	@ (800146c <PARSE_COMMAND+0x1bc>)
 800138a:	4618      	mov	r0, r3
 800138c:	f006 fddd 	bl	8007f4a <strsep>
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d051      	beq.n	800143c <PARSE_COMMAND+0x18c>
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	483c      	ldr	r0, [pc, #240]	@ (800148c <PARSE_COMMAND+0x1dc>)
 800139c:	f006 fe2e 	bl	8007ffc <strcpy>
 80013a0:	e04c      	b.n	800143c <PARSE_COMMAND+0x18c>
		else if(strcmp(token, "Arg_1:") == 0){memset(cmd.args[1], 0, sizeof(cmd.args[1]));
 80013a2:	493b      	ldr	r1, [pc, #236]	@ (8001490 <PARSE_COMMAND+0x1e0>)
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7fe ff1b 	bl	80001e0 <strcmp>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d112      	bne.n	80013d6 <PARSE_COMMAND+0x126>
 80013b0:	2214      	movs	r2, #20
 80013b2:	2100      	movs	r1, #0
 80013b4:	4837      	ldr	r0, [pc, #220]	@ (8001494 <PARSE_COMMAND+0x1e4>)
 80013b6:	f006 fdb1 	bl	8007f1c <memset>
			if((token = strsep(&ptr, " ")) != NULL){strcpy(cmd.args[1], token); }}
 80013ba:	463b      	mov	r3, r7
 80013bc:	492b      	ldr	r1, [pc, #172]	@ (800146c <PARSE_COMMAND+0x1bc>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f006 fdc3 	bl	8007f4a <strsep>
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d037      	beq.n	800143c <PARSE_COMMAND+0x18c>
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	4831      	ldr	r0, [pc, #196]	@ (8001494 <PARSE_COMMAND+0x1e4>)
 80013d0:	f006 fe14 	bl	8007ffc <strcpy>
 80013d4:	e032      	b.n	800143c <PARSE_COMMAND+0x18c>
		else if(strcmp(token, "Arg_2:") == 0){memset(cmd.args[2], 0, sizeof(cmd.args[2]));
 80013d6:	4930      	ldr	r1, [pc, #192]	@ (8001498 <PARSE_COMMAND+0x1e8>)
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7fe ff01 	bl	80001e0 <strcmp>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d112      	bne.n	800140a <PARSE_COMMAND+0x15a>
 80013e4:	2214      	movs	r2, #20
 80013e6:	2100      	movs	r1, #0
 80013e8:	482c      	ldr	r0, [pc, #176]	@ (800149c <PARSE_COMMAND+0x1ec>)
 80013ea:	f006 fd97 	bl	8007f1c <memset>
			if((token = strsep(&ptr, " ")) != NULL){strcpy(cmd.args[2], token);}}
 80013ee:	463b      	mov	r3, r7
 80013f0:	491e      	ldr	r1, [pc, #120]	@ (800146c <PARSE_COMMAND+0x1bc>)
 80013f2:	4618      	mov	r0, r3
 80013f4:	f006 fda9 	bl	8007f4a <strsep>
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d01d      	beq.n	800143c <PARSE_COMMAND+0x18c>
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	4826      	ldr	r0, [pc, #152]	@ (800149c <PARSE_COMMAND+0x1ec>)
 8001404:	f006 fdfa 	bl	8007ffc <strcpy>
 8001408:	e018      	b.n	800143c <PARSE_COMMAND+0x18c>
		else if(strcmp(token, "Arg_3:") == 0){memset(cmd.args[3], 0, sizeof(cmd.args[3]));
 800140a:	4925      	ldr	r1, [pc, #148]	@ (80014a0 <PARSE_COMMAND+0x1f0>)
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7fe fee7 	bl	80001e0 <strcmp>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d111      	bne.n	800143c <PARSE_COMMAND+0x18c>
 8001418:	2214      	movs	r2, #20
 800141a:	2100      	movs	r1, #0
 800141c:	4821      	ldr	r0, [pc, #132]	@ (80014a4 <PARSE_COMMAND+0x1f4>)
 800141e:	f006 fd7d 	bl	8007f1c <memset>
			if((token = strsep(&ptr, " ")) != NULL){strcpy(cmd.args[3], token);}}
 8001422:	463b      	mov	r3, r7
 8001424:	4911      	ldr	r1, [pc, #68]	@ (800146c <PARSE_COMMAND+0x1bc>)
 8001426:	4618      	mov	r0, r3
 8001428:	f006 fd8f 	bl	8007f4a <strsep>
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <PARSE_COMMAND+0x18c>
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	481b      	ldr	r0, [pc, #108]	@ (80014a4 <PARSE_COMMAND+0x1f4>)
 8001438:	f006 fde0 	bl	8007ffc <strcpy>
	while((token  = strsep(&ptr, " ")) != NULL){
 800143c:	463b      	mov	r3, r7
 800143e:	490b      	ldr	r1, [pc, #44]	@ (800146c <PARSE_COMMAND+0x1bc>)
 8001440:	4618      	mov	r0, r3
 8001442:	f006 fd82 	bl	8007f4a <strsep>
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	f47f af3a 	bne.w	80012c4 <PARSE_COMMAND+0x14>
	}
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200005a0 	.word	0x200005a0
 8001460:	200009a0 	.word	0x200009a0
 8001464:	08008a08 	.word	0x08008a08
 8001468:	20000474 	.word	0x20000474
 800146c:	08008a10 	.word	0x08008a10
 8001470:	08008a14 	.word	0x08008a14
 8001474:	08008a18 	.word	0x08008a18
 8001478:	200004d8 	.word	0x200004d8
 800147c:	08008a24 	.word	0x08008a24
 8001480:	200004ec 	.word	0x200004ec
 8001484:	20000465 	.word	0x20000465
 8001488:	08008a30 	.word	0x08008a30
 800148c:	20000550 	.word	0x20000550
 8001490:	08008a38 	.word	0x08008a38
 8001494:	20000564 	.word	0x20000564
 8001498:	08008a40 	.word	0x08008a40
 800149c:	20000578 	.word	0x20000578
 80014a0:	08008a48 	.word	0x08008a48
 80014a4:	2000058c 	.word	0x2000058c

080014a8 <VALVE_MODE_FULL_CW>:
	VALVE_M2_RST;
	VALVE_M3_RST;
	return 0;
}

int VALVE_MODE_FULL_CW(void){
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
	VALVE_M1_RST;
 80014ac:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <VALVE_MODE_FULL_CW+0x28>)
 80014ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014b2:	619a      	str	r2, [r3, #24]
	VALVE_M2_RST;
 80014b4:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <VALVE_MODE_FULL_CW+0x28>)
 80014b6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014ba:	619a      	str	r2, [r3, #24]
	VALVE_M3_SET;
 80014bc:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <VALVE_MODE_FULL_CW+0x28>)
 80014be:	2204      	movs	r2, #4
 80014c0:	619a      	str	r2, [r3, #24]
	return 0;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40020800 	.word	0x40020800

080014d4 <VALVE_CONTROL_CW_STEP>:
	VALVE_M2_SET;
	VALVE_M3_RST;
	return 0;
}

int VALVE_CONTROL_CW_STEP(int step, Valve *valve){ // FEEDS COLD WATER
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
	HAL_Delay(1);
 80014de:	2001      	movs	r0, #1
 80014e0:	f002 ff8c 	bl	80043fc <HAL_Delay>
	VALVE_CCW_SET;
 80014e4:	4b23      	ldr	r3, [pc, #140]	@ (8001574 <VALVE_CONTROL_CW_STEP+0xa0>)
 80014e6:	2240      	movs	r2, #64	@ 0x40
 80014e8:	619a      	str	r2, [r3, #24]
	TIMER_US_DELAY(1);
 80014ea:	2001      	movs	r0, #1
 80014ec:	f001 ff46 	bl	800337c <TIMER_US_DELAY>
	VALVE_RST_SET;
 80014f0:	4b20      	ldr	r3, [pc, #128]	@ (8001574 <VALVE_CONTROL_CW_STEP+0xa0>)
 80014f2:	2210      	movs	r2, #16
 80014f4:	619a      	str	r2, [r3, #24]
	TIMER_US_DELAY(1);
 80014f6:	2001      	movs	r0, #1
 80014f8:	f001 ff40 	bl	800337c <TIMER_US_DELAY>
	VALVE_EN_SET;
 80014fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001574 <VALVE_CONTROL_CW_STEP+0xa0>)
 80014fe:	2208      	movs	r2, #8
 8001500:	619a      	str	r2, [r3, #24]
	TIMER_US_DELAY(1);
 8001502:	2001      	movs	r0, #1
 8001504:	f001 ff3a 	bl	800337c <TIMER_US_DELAY>
	VALVE_TQ_SET;
 8001508:	4b1a      	ldr	r3, [pc, #104]	@ (8001574 <VALVE_CONTROL_CW_STEP+0xa0>)
 800150a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800150e:	619a      	str	r2, [r3, #24]
	TIMER_US_DELAY(1);
 8001510:	2001      	movs	r0, #1
 8001512:	f001 ff33 	bl	800337c <TIMER_US_DELAY>

	VALVE_CLK_RST;
 8001516:	4b17      	ldr	r3, [pc, #92]	@ (8001574 <VALVE_CONTROL_CW_STEP+0xa0>)
 8001518:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800151c:	619a      	str	r2, [r3, #24]
	for(uint32_t i=0; i<step; i++){//&& (valve->steps < MAX_STEPS)
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	e014      	b.n	800154e <VALVE_CONTROL_CW_STEP+0x7a>
		VALVE_CLK_SET;
 8001524:	4b13      	ldr	r3, [pc, #76]	@ (8001574 <VALVE_CONTROL_CW_STEP+0xa0>)
 8001526:	2220      	movs	r2, #32
 8001528:	619a      	str	r2, [r3, #24]
		HAL_Delay(10);
 800152a:	200a      	movs	r0, #10
 800152c:	f002 ff66 	bl	80043fc <HAL_Delay>
		VALVE_CLK_RST;
 8001530:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <VALVE_CONTROL_CW_STEP+0xa0>)
 8001532:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001536:	619a      	str	r2, [r3, #24]
		HAL_Delay(10);
 8001538:	200a      	movs	r0, #10
 800153a:	f002 ff5f 	bl	80043fc <HAL_Delay>
		valve->steps--;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	1e5a      	subs	r2, r3, #1
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	601a      	str	r2, [r3, #0]
	for(uint32_t i=0; i<step; i++){//&& (valve->steps < MAX_STEPS)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	3301      	adds	r3, #1
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	429a      	cmp	r2, r3
 8001554:	d3e6      	bcc.n	8001524 <VALVE_CONTROL_CW_STEP+0x50>
	}
	VALVE_TQ_RST;
 8001556:	4b07      	ldr	r3, [pc, #28]	@ (8001574 <VALVE_CONTROL_CW_STEP+0xa0>)
 8001558:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800155c:	619a      	str	r2, [r3, #24]

	FLASH_HANDLE(valve->steps);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f000 f888 	bl	8001678 <FLASH_HANDLE>
	return 0;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40020800 	.word	0x40020800

08001578 <VALVE_CONTROL_CCW_STEP>:

int VALVE_CONTROL_CCW_STEP(int step, Valve *valve){ // FEEDS HOT WATER
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
	HAL_Delay(1);
 8001582:	2001      	movs	r0, #1
 8001584:	f002 ff3a 	bl	80043fc <HAL_Delay>
	VALVE_CCW_RST;
 8001588:	4b23      	ldr	r3, [pc, #140]	@ (8001618 <VALVE_CONTROL_CCW_STEP+0xa0>)
 800158a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800158e:	619a      	str	r2, [r3, #24]
	TIMER_US_DELAY(1);
 8001590:	2001      	movs	r0, #1
 8001592:	f001 fef3 	bl	800337c <TIMER_US_DELAY>
	VALVE_RST_SET;
 8001596:	4b20      	ldr	r3, [pc, #128]	@ (8001618 <VALVE_CONTROL_CCW_STEP+0xa0>)
 8001598:	2210      	movs	r2, #16
 800159a:	619a      	str	r2, [r3, #24]
	TIMER_US_DELAY(1);
 800159c:	2001      	movs	r0, #1
 800159e:	f001 feed 	bl	800337c <TIMER_US_DELAY>
	VALVE_EN_SET;
 80015a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001618 <VALVE_CONTROL_CCW_STEP+0xa0>)
 80015a4:	2208      	movs	r2, #8
 80015a6:	619a      	str	r2, [r3, #24]
	TIMER_US_DELAY(1);
 80015a8:	2001      	movs	r0, #1
 80015aa:	f001 fee7 	bl	800337c <TIMER_US_DELAY>
	VALVE_TQ_SET;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <VALVE_CONTROL_CCW_STEP+0xa0>)
 80015b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015b4:	619a      	str	r2, [r3, #24]
	TIMER_US_DELAY(1);
 80015b6:	2001      	movs	r0, #1
 80015b8:	f001 fee0 	bl	800337c <TIMER_US_DELAY>

	VALVE_CLK_RST;
 80015bc:	4b16      	ldr	r3, [pc, #88]	@ (8001618 <VALVE_CONTROL_CCW_STEP+0xa0>)
 80015be:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80015c2:	619a      	str	r2, [r3, #24]
	for(uint32_t i=0; i<step; i++){//&& (valve->steps > 0)
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	e014      	b.n	80015f4 <VALVE_CONTROL_CCW_STEP+0x7c>
		VALVE_CLK_SET;
 80015ca:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <VALVE_CONTROL_CCW_STEP+0xa0>)
 80015cc:	2220      	movs	r2, #32
 80015ce:	619a      	str	r2, [r3, #24]
		HAL_Delay(10);
 80015d0:	200a      	movs	r0, #10
 80015d2:	f002 ff13 	bl	80043fc <HAL_Delay>
		VALVE_CLK_RST;
 80015d6:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <VALVE_CONTROL_CCW_STEP+0xa0>)
 80015d8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80015dc:	619a      	str	r2, [r3, #24]
		HAL_Delay(10);
 80015de:	200a      	movs	r0, #10
 80015e0:	f002 ff0c 	bl	80043fc <HAL_Delay>
		valve->steps++;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	601a      	str	r2, [r3, #0]
	for(uint32_t i=0; i<step; i++){//&& (valve->steps > 0)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	3301      	adds	r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d3e6      	bcc.n	80015ca <VALVE_CONTROL_CCW_STEP+0x52>
	}

	FLASH_HANDLE(valve->steps);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f000 f839 	bl	8001678 <FLASH_HANDLE>
	VALVE_TQ_RST;
 8001606:	4b04      	ldr	r3, [pc, #16]	@ (8001618 <VALVE_CONTROL_CCW_STEP+0xa0>)
 8001608:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800160c:	619a      	str	r2, [r3, #24]
	return 0;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40020800 	.word	0x40020800

0800161c <VALVE_CONTROL_APROX>:

int VALVE_CONTROL_APROX(Valve *valve){
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	if(valve->aprox > valve->steps){
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6812      	ldr	r2, [r2, #0]
 800162c:	4293      	cmp	r3, r2
 800162e:	d909      	bls.n	8001644 <VALVE_CONTROL_APROX+0x28>
		VALVE_CONTROL_CCW_STEP((valve->aprox) - valve->steps, valve);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	1a9b      	subs	r3, r3, r2
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff9b 	bl	8001578 <VALVE_CONTROL_CCW_STEP>
 8001642:	e00f      	b.n	8001664 <VALVE_CONTROL_APROX+0x48>
	}
	else if(valve->aprox < valve->steps){
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6812      	ldr	r2, [r2, #0]
 800164c:	4293      	cmp	r3, r2
 800164e:	d209      	bcs.n	8001664 <VALVE_CONTROL_APROX+0x48>
    	VALVE_CONTROL_CW_STEP((valve->steps - valve->aprox), valve);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff ff38 	bl	80014d4 <VALVE_CONTROL_CW_STEP>
	}
	FLASH_HANDLE(valve->steps);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f000 f805 	bl	8001678 <FLASH_HANDLE>
	return 0;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <FLASH_HANDLE>:
	h = (int)*p;
	valve->steps = h;
}


void FLASH_HANDLE(int data){
 8001678:	b5b0      	push	{r4, r5, r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	static FLASH_EraseInitTypeDef EraseInitStruct;

	HAL_FLASH_Unlock();
 8001680:	f003 f8c8 	bl	8004814 <HAL_FLASH_Unlock>
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS; // Specifies that we are erasing sectors
 8001684:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <FLASH_HANDLE+0x4c>)
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3; // Set this according to your voltage range
 800168a:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <FLASH_HANDLE+0x4c>)
 800168c:	2202      	movs	r2, #2
 800168e:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector = FLASH_SECTOR_7; // Specify the sector number
 8001690:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <FLASH_HANDLE+0x4c>)
 8001692:	2207      	movs	r2, #7
 8001694:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors = 1;
 8001696:	4b0b      	ldr	r3, [pc, #44]	@ (80016c4 <FLASH_HANDLE+0x4c>)
 8001698:	2201      	movs	r2, #1
 800169a:	60da      	str	r2, [r3, #12]
	HAL_FLASHEx_Erase_IT(&EraseInitStruct);
 800169c:	4809      	ldr	r0, [pc, #36]	@ (80016c4 <FLASH_HANDLE+0x4c>)
 800169e:	f003 f985 	bl	80049ac <HAL_FLASHEx_Erase_IT>
	HAL_FLASH_Program_IT(FLASH_TYPEPROGRAM_WORD, (uint32_t)FLASH_ADDRESS, data);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	17da      	asrs	r2, r3, #31
 80016a6:	461c      	mov	r4, r3
 80016a8:	4615      	mov	r5, r2
 80016aa:	4622      	mov	r2, r4
 80016ac:	462b      	mov	r3, r5
 80016ae:	4906      	ldr	r1, [pc, #24]	@ (80016c8 <FLASH_HANDLE+0x50>)
 80016b0:	2002      	movs	r0, #2
 80016b2:	f003 f86b 	bl	800478c <HAL_FLASH_Program_IT>
	HAL_FLASH_Lock();
 80016b6:	f003 f8cf 	bl	8004858 <HAL_FLASH_Lock>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bdb0      	pop	{r4, r5, r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000198 	.word	0x20000198
 80016c8:	08060000 	.word	0x08060000

080016cc <LCD_WR_REG>:
 * @function   :Write an 8-bit command to the LCD screen
 * @parameters :data:Command value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_REG(u8 data)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
	 LCD_CS_RST;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <LCD_WR_REG+0x38>)
 80016d8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016dc:	619a      	str	r2, [r3, #24]
	 LCD_DC_RST;
 80016de:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <LCD_WR_REG+0x3c>)
 80016e0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80016e4:	619a      	str	r2, [r3, #24]
	 HAL_SPI_Transmit(&hspi2, &data, 1, 1000);
 80016e6:	1df9      	adds	r1, r7, #7
 80016e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ec:	2201      	movs	r2, #1
 80016ee:	4807      	ldr	r0, [pc, #28]	@ (800170c <LCD_WR_REG+0x40>)
 80016f0:	f004 f8cf 	bl	8005892 <HAL_SPI_Transmit>
	 LCD_CS_SET;
 80016f4:	4b03      	ldr	r3, [pc, #12]	@ (8001704 <LCD_WR_REG+0x38>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	619a      	str	r2, [r3, #24]
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40021c00 	.word	0x40021c00
 8001708:	40020400 	.word	0x40020400
 800170c:	20000204 	.word	0x20000204

08001710 <LCD_WR_DATA>:
 * @function   :Write an 8-bit data to the LCD screen
 * @parameters :data:data value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_DATA(u8 data)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
	//uint8_t msg[] = {'L', 'U', 'C', 'A', 'S'};
	//print_hex_f_array(&huart2, msg, 1000, false, false, false, false, false);
	LCD_CS_RST;
 800171a:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <LCD_WR_DATA+0x34>)
 800171c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001720:	619a      	str	r2, [r3, #24]
	LCD_DC_SET;
 8001722:	4b09      	ldr	r3, [pc, #36]	@ (8001748 <LCD_WR_DATA+0x38>)
 8001724:	2204      	movs	r2, #4
 8001726:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi2, &data, 1, 1000);
 8001728:	1df9      	adds	r1, r7, #7
 800172a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800172e:	2201      	movs	r2, #1
 8001730:	4806      	ldr	r0, [pc, #24]	@ (800174c <LCD_WR_DATA+0x3c>)
 8001732:	f004 f8ae 	bl	8005892 <HAL_SPI_Transmit>
	LCD_CS_SET;
 8001736:	4b03      	ldr	r3, [pc, #12]	@ (8001744 <LCD_WR_DATA+0x34>)
 8001738:	2201      	movs	r2, #1
 800173a:	619a      	str	r2, [r3, #24]
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40021c00 	.word	0x40021c00
 8001748:	40020400 	.word	0x40020400
 800174c:	20000204 	.word	0x20000204

08001750 <LCD_WriteReg>:
 * @parameters :LCD_Reg:Register address
                LCD_RegValue:Data to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WriteReg(u8 LCD_Reg, u16 LCD_RegValue)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	460a      	mov	r2, r1
 800175a:	71fb      	strb	r3, [r7, #7]
 800175c:	4613      	mov	r3, r2
 800175e:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff ffb2 	bl	80016cc <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8001768:	88bb      	ldrh	r3, [r7, #4]
 800176a:	b2db      	uxtb	r3, r3
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ffcf 	bl	8001710 <LCD_WR_DATA>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <LCD_WriteRAM_Prepare>:
 * @function   :Write GRAM
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void LCD_WriteRAM_Prepare(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8001780:	4b03      	ldr	r3, [pc, #12]	@ (8001790 <LCD_WriteRAM_Prepare+0x14>)
 8001782:	891b      	ldrh	r3, [r3, #8]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff ffa0 	bl	80016cc <LCD_WR_REG>
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	200001ac 	.word	0x200001ac

08001794 <Lcd_WriteData_16Bit>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :Data:Data to be written
 * @retvalue   :None
******************************************************************************/
void Lcd_WriteData_16Bit(u16 Data)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	80fb      	strh	r3, [r7, #6]
	u8 upper = Data >> 8;
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	73fb      	strb	r3, [r7, #15]
	u8 lower = Data & 0x0F;
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	f003 030f 	and.w	r3, r3, #15
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	73bb      	strb	r3, [r7, #14]
	LCD_CS_RST;
 80017b4:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <Lcd_WriteData_16Bit+0x5c>)
 80017b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017ba:	619a      	str	r2, [r3, #24]
	LCD_DC_SET;
 80017bc:	4b0d      	ldr	r3, [pc, #52]	@ (80017f4 <Lcd_WriteData_16Bit+0x60>)
 80017be:	2204      	movs	r2, #4
 80017c0:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi2, &upper, 1, 1000);
 80017c2:	f107 010f 	add.w	r1, r7, #15
 80017c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ca:	2201      	movs	r2, #1
 80017cc:	480a      	ldr	r0, [pc, #40]	@ (80017f8 <Lcd_WriteData_16Bit+0x64>)
 80017ce:	f004 f860 	bl	8005892 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &lower, 1, 1000);
 80017d2:	f107 010e 	add.w	r1, r7, #14
 80017d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017da:	2201      	movs	r2, #1
 80017dc:	4806      	ldr	r0, [pc, #24]	@ (80017f8 <Lcd_WriteData_16Bit+0x64>)
 80017de:	f004 f858 	bl	8005892 <HAL_SPI_Transmit>
	LCD_CS_SET;
 80017e2:	4b03      	ldr	r3, [pc, #12]	@ (80017f0 <Lcd_WriteData_16Bit+0x5c>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	619a      	str	r2, [r3, #24]
}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40021c00 	.word	0x40021c00
 80017f4:	40020400 	.word	0x40020400
 80017f8:	20000204 	.word	0x20000204

080017fc <LCD_DrawPoint>:
 * @parameters :x:the x coordinate of the pixel
                y:the y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/
void LCD_DrawPoint(u16 x,u16 y)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	460a      	mov	r2, r1
 8001806:	80fb      	strh	r3, [r7, #6]
 8001808:	4613      	mov	r3, r2
 800180a:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x,y);//���ù��λ��
 800180c:	88ba      	ldrh	r2, [r7, #4]
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f000 f9d8 	bl	8001bc8 <LCD_SetCursor>
	Lcd_WriteData_16Bit(POINT_COLOR);
 8001818:	4b04      	ldr	r3, [pc, #16]	@ (800182c <LCD_DrawPoint+0x30>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ffb9 	bl	8001794 <Lcd_WriteData_16Bit>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200001ba 	.word	0x200001ba

08001830 <LCD_Clear>:
 * @function   :Full screen filled LCD screen
 * @parameters :color:Filled color
 * @retvalue   :None
******************************************************************************/
void LCD_Clear(u16 Color)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	80fb      	strh	r3, [r7, #6]
  unsigned int i,m;
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
 800183a:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <LCD_Clear+0x78>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	3b01      	subs	r3, #1
 8001840:	b29a      	uxth	r2, r3
 8001842:	4b19      	ldr	r3, [pc, #100]	@ (80018a8 <LCD_Clear+0x78>)
 8001844:	885b      	ldrh	r3, [r3, #2]
 8001846:	3b01      	subs	r3, #1
 8001848:	b29b      	uxth	r3, r3
 800184a:	2100      	movs	r1, #0
 800184c:	2000      	movs	r0, #0
 800184e:	f000 f967 	bl	8001b20 <LCD_SetWindows>
	LCD_CS_RST;
 8001852:	4b16      	ldr	r3, [pc, #88]	@ (80018ac <LCD_Clear+0x7c>)
 8001854:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001858:	619a      	str	r2, [r3, #24]
	LCD_DC_SET;
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <LCD_Clear+0x80>)
 800185c:	2204      	movs	r2, #4
 800185e:	619a      	str	r2, [r3, #24]
	for(i=0;i<lcddev.height;i++)
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	e012      	b.n	800188c <LCD_Clear+0x5c>
	{
    for(m=0;m<lcddev.width;m++)
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	e006      	b.n	800187a <LCD_Clear+0x4a>
    {
			Lcd_WriteData_16Bit(Color);
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ff90 	bl	8001794 <Lcd_WriteData_16Bit>
    for(m=0;m<lcddev.width;m++)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	3301      	adds	r3, #1
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <LCD_Clear+0x78>)
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4293      	cmp	r3, r2
 8001884:	d3f2      	bcc.n	800186c <LCD_Clear+0x3c>
	for(i=0;i<lcddev.height;i++)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3301      	adds	r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <LCD_Clear+0x78>)
 800188e:	885b      	ldrh	r3, [r3, #2]
 8001890:	461a      	mov	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4293      	cmp	r3, r2
 8001896:	d3e6      	bcc.n	8001866 <LCD_Clear+0x36>
		}
	}
	 LCD_CS_SET;
 8001898:	4b04      	ldr	r3, [pc, #16]	@ (80018ac <LCD_Clear+0x7c>)
 800189a:	2201      	movs	r2, #1
 800189c:	619a      	str	r2, [r3, #24]
}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200001ac 	.word	0x200001ac
 80018ac:	40021c00 	.word	0x40021c00
 80018b0:	40020400 	.word	0x40020400

080018b4 <LCD_RESET>:
 * @function   :Reset LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void LCD_RESET(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	LCD_RST_RST;
 80018b8:	4b07      	ldr	r3, [pc, #28]	@ (80018d8 <LCD_RESET+0x24>)
 80018ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018be:	619a      	str	r2, [r3, #24]
	HAL_Delay(100);
 80018c0:	2064      	movs	r0, #100	@ 0x64
 80018c2:	f002 fd9b 	bl	80043fc <HAL_Delay>
	LCD_RST_SET;
 80018c6:	4b04      	ldr	r3, [pc, #16]	@ (80018d8 <LCD_RESET+0x24>)
 80018c8:	2202      	movs	r2, #2
 80018ca:	619a      	str	r2, [r3, #24]
	HAL_Delay(50);
 80018cc:	2032      	movs	r0, #50	@ 0x32
 80018ce:	f002 fd95 	bl	80043fc <HAL_Delay>
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40020400 	.word	0x40020400

080018dc <LCD_Init>:
 * @function   :Initialization LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void LCD_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
	//SPI2_Init(); //Ӳ��SPI2��ʼ��
	//LCD_GPIOInit();//LCD GPIO��ʼ��
 	LCD_RESET(); //LCD ��λ
 80018e0:	f7ff ffe8 	bl	80018b4 <LCD_RESET>
//*************2.4inch ILI9341��ʼ��**********//
	LCD_WR_REG(0xCF);
 80018e4:	20cf      	movs	r0, #207	@ 0xcf
 80018e6:	f7ff fef1 	bl	80016cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80018ea:	2000      	movs	r0, #0
 80018ec:	f7ff ff10 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0xD9); //0xC1
 80018f0:	20d9      	movs	r0, #217	@ 0xd9
 80018f2:	f7ff ff0d 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80018f6:	2030      	movs	r0, #48	@ 0x30
 80018f8:	f7ff ff0a 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80018fc:	20ed      	movs	r0, #237	@ 0xed
 80018fe:	f7ff fee5 	bl	80016cc <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001902:	2064      	movs	r0, #100	@ 0x64
 8001904:	f7ff ff04 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001908:	2003      	movs	r0, #3
 800190a:	f7ff ff01 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800190e:	2012      	movs	r0, #18
 8001910:	f7ff fefe 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001914:	2081      	movs	r0, #129	@ 0x81
 8001916:	f7ff fefb 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800191a:	20e8      	movs	r0, #232	@ 0xe8
 800191c:	f7ff fed6 	bl	80016cc <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001920:	2085      	movs	r0, #133	@ 0x85
 8001922:	f7ff fef5 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001926:	2010      	movs	r0, #16
 8001928:	f7ff fef2 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 800192c:	207a      	movs	r0, #122	@ 0x7a
 800192e:	f7ff feef 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001932:	20cb      	movs	r0, #203	@ 0xcb
 8001934:	f7ff feca 	bl	80016cc <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001938:	2039      	movs	r0, #57	@ 0x39
 800193a:	f7ff fee9 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800193e:	202c      	movs	r0, #44	@ 0x2c
 8001940:	f7ff fee6 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001944:	2000      	movs	r0, #0
 8001946:	f7ff fee3 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800194a:	2034      	movs	r0, #52	@ 0x34
 800194c:	f7ff fee0 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001950:	2002      	movs	r0, #2
 8001952:	f7ff fedd 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001956:	20f7      	movs	r0, #247	@ 0xf7
 8001958:	f7ff feb8 	bl	80016cc <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 800195c:	2020      	movs	r0, #32
 800195e:	f7ff fed7 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001962:	20ea      	movs	r0, #234	@ 0xea
 8001964:	f7ff feb2 	bl	80016cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001968:	2000      	movs	r0, #0
 800196a:	f7ff fed1 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800196e:	2000      	movs	r0, #0
 8001970:	f7ff fece 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001974:	20c0      	movs	r0, #192	@ 0xc0
 8001976:	f7ff fea9 	bl	80016cc <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800197a:	201b      	movs	r0, #27
 800197c:	f7ff fec8 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001980:	20c1      	movs	r0, #193	@ 0xc1
 8001982:	f7ff fea3 	bl	80016cc <LCD_WR_REG>
	LCD_WR_DATA(0x12);   //SAP[2:0];BT[3:0] 0x01
 8001986:	2012      	movs	r0, #18
 8001988:	f7ff fec2 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 800198c:	20c5      	movs	r0, #197	@ 0xc5
 800198e:	f7ff fe9d 	bl	80016cc <LCD_WR_REG>
	LCD_WR_DATA(0x08); 	 //30
 8001992:	2008      	movs	r0, #8
 8001994:	f7ff febc 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x26); 	 //30
 8001998:	2026      	movs	r0, #38	@ 0x26
 800199a:	f7ff feb9 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800199e:	20c7      	movs	r0, #199	@ 0xc7
 80019a0:	f7ff fe94 	bl	80016cc <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80019a4:	20b7      	movs	r0, #183	@ 0xb7
 80019a6:	f7ff feb3 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80019aa:	2036      	movs	r0, #54	@ 0x36
 80019ac:	f7ff fe8e 	bl	80016cc <LCD_WR_REG>
	LCD_WR_DATA(0x08);
 80019b0:	2008      	movs	r0, #8
 80019b2:	f7ff fead 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80019b6:	203a      	movs	r0, #58	@ 0x3a
 80019b8:	f7ff fe88 	bl	80016cc <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80019bc:	2055      	movs	r0, #85	@ 0x55
 80019be:	f7ff fea7 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80019c2:	20b1      	movs	r0, #177	@ 0xb1
 80019c4:	f7ff fe82 	bl	80016cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80019c8:	2000      	movs	r0, #0
 80019ca:	f7ff fea1 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80019ce:	201a      	movs	r0, #26
 80019d0:	f7ff fe9e 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80019d4:	20b6      	movs	r0, #182	@ 0xb6
 80019d6:	f7ff fe79 	bl	80016cc <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80019da:	200a      	movs	r0, #10
 80019dc:	f7ff fe98 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80019e0:	20a2      	movs	r0, #162	@ 0xa2
 80019e2:	f7ff fe95 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80019e6:	20f2      	movs	r0, #242	@ 0xf2
 80019e8:	f7ff fe70 	bl	80016cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80019ec:	2000      	movs	r0, #0
 80019ee:	f7ff fe8f 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80019f2:	2026      	movs	r0, #38	@ 0x26
 80019f4:	f7ff fe6a 	bl	80016cc <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80019f8:	2001      	movs	r0, #1
 80019fa:	f7ff fe89 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80019fe:	20e0      	movs	r0, #224	@ 0xe0
 8001a00:	f7ff fe64 	bl	80016cc <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001a04:	200f      	movs	r0, #15
 8001a06:	f7ff fe83 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x1D);
 8001a0a:	201d      	movs	r0, #29
 8001a0c:	f7ff fe80 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001a10:	201a      	movs	r0, #26
 8001a12:	f7ff fe7d 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001a16:	200a      	movs	r0, #10
 8001a18:	f7ff fe7a 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x0D);
 8001a1c:	200d      	movs	r0, #13
 8001a1e:	f7ff fe77 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001a22:	2007      	movs	r0, #7
 8001a24:	f7ff fe74 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x49);
 8001a28:	2049      	movs	r0, #73	@ 0x49
 8001a2a:	f7ff fe71 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0X66);
 8001a2e:	2066      	movs	r0, #102	@ 0x66
 8001a30:	f7ff fe6e 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x3B);
 8001a34:	203b      	movs	r0, #59	@ 0x3b
 8001a36:	f7ff fe6b 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001a3a:	2007      	movs	r0, #7
 8001a3c:	f7ff fe68 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001a40:	2011      	movs	r0, #17
 8001a42:	f7ff fe65 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f7ff fe62 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x09);
 8001a4c:	2009      	movs	r0, #9
 8001a4e:	f7ff fe5f 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001a52:	2005      	movs	r0, #5
 8001a54:	f7ff fe5c 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x04);
 8001a58:	2004      	movs	r0, #4
 8001a5a:	f7ff fe59 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001a5e:	20e1      	movs	r0, #225	@ 0xe1
 8001a60:	f7ff fe34 	bl	80016cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001a64:	2000      	movs	r0, #0
 8001a66:	f7ff fe53 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x18);
 8001a6a:	2018      	movs	r0, #24
 8001a6c:	f7ff fe50 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x1D);
 8001a70:	201d      	movs	r0, #29
 8001a72:	f7ff fe4d 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001a76:	2002      	movs	r0, #2
 8001a78:	f7ff fe4a 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001a7c:	200f      	movs	r0, #15
 8001a7e:	f7ff fe47 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x04);
 8001a82:	2004      	movs	r0, #4
 8001a84:	f7ff fe44 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x36);
 8001a88:	2036      	movs	r0, #54	@ 0x36
 8001a8a:	f7ff fe41 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x13);
 8001a8e:	2013      	movs	r0, #19
 8001a90:	f7ff fe3e 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x4C);
 8001a94:	204c      	movs	r0, #76	@ 0x4c
 8001a96:	f7ff fe3b 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001a9a:	2007      	movs	r0, #7
 8001a9c:	f7ff fe38 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x13);
 8001aa0:	2013      	movs	r0, #19
 8001aa2:	f7ff fe35 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001aa6:	200f      	movs	r0, #15
 8001aa8:	f7ff fe32 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x2E);
 8001aac:	202e      	movs	r0, #46	@ 0x2e
 8001aae:	f7ff fe2f 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x2F);
 8001ab2:	202f      	movs	r0, #47	@ 0x2f
 8001ab4:	f7ff fe2c 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001ab8:	2005      	movs	r0, #5
 8001aba:	f7ff fe29 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001abe:	202b      	movs	r0, #43	@ 0x2b
 8001ac0:	f7ff fe04 	bl	80016cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f7ff fe23 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001aca:	2000      	movs	r0, #0
 8001acc:	f7ff fe20 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f7ff fe1d 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001ad6:	203f      	movs	r0, #63	@ 0x3f
 8001ad8:	f7ff fe1a 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001adc:	202a      	movs	r0, #42	@ 0x2a
 8001ade:	f7ff fdf5 	bl	80016cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f7ff fe14 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f7ff fe11 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001aee:	2000      	movs	r0, #0
 8001af0:	f7ff fe0e 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001af4:	20ef      	movs	r0, #239	@ 0xef
 8001af6:	f7ff fe0b 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001afa:	2011      	movs	r0, #17
 8001afc:	f7ff fde6 	bl	80016cc <LCD_WR_REG>
	HAL_Delay(120);
 8001b00:	2078      	movs	r0, #120	@ 0x78
 8001b02:	f002 fc7b 	bl	80043fc <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001b06:	2029      	movs	r0, #41	@ 0x29
 8001b08:	f7ff fde0 	bl	80016cc <LCD_WR_REG>

  LCD_direction(USE_HORIZONTAL);//����LCD��ʾ����
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f000 f86d 	bl	8001bec <LCD_direction>
	//LCD_LED=1;//��������
	LCD_Clear(WHITE);//��ȫ����ɫ
 8001b12:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001b16:	f7ff fe8b 	bl	8001830 <LCD_Clear>
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <LCD_SetWindows>:
								xEnd:the endning x coordinate of the LCD display window
								yEnd:the endning y coordinate of the LCD display window
 * @retvalue   :None
******************************************************************************/
void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
{
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4604      	mov	r4, r0
 8001b28:	4608      	mov	r0, r1
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4623      	mov	r3, r4
 8001b30:	80fb      	strh	r3, [r7, #6]
 8001b32:	4603      	mov	r3, r0
 8001b34:	80bb      	strh	r3, [r7, #4]
 8001b36:	460b      	mov	r3, r1
 8001b38:	807b      	strh	r3, [r7, #2]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(lcddev.setxcmd);
 8001b3e:	4b21      	ldr	r3, [pc, #132]	@ (8001bc4 <LCD_SetWindows+0xa4>)
 8001b40:	895b      	ldrh	r3, [r3, #10]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fdc1 	bl	80016cc <LCD_WR_REG>
	LCD_WR_DATA(xStar>>8);
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fddc 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xStar);
 8001b58:	88fb      	ldrh	r3, [r7, #6]
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fdd7 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(xEnd>>8);
 8001b62:	887b      	ldrh	r3, [r7, #2]
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fdd0 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xEnd);
 8001b70:	887b      	ldrh	r3, [r7, #2]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fdcb 	bl	8001710 <LCD_WR_DATA>

	LCD_WR_REG(lcddev.setycmd);
 8001b7a:	4b12      	ldr	r3, [pc, #72]	@ (8001bc4 <LCD_SetWindows+0xa4>)
 8001b7c:	899b      	ldrh	r3, [r3, #12]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fda3 	bl	80016cc <LCD_WR_REG>
	LCD_WR_DATA(yStar>>8);
 8001b86:	88bb      	ldrh	r3, [r7, #4]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fdbe 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yStar);
 8001b94:	88bb      	ldrh	r3, [r7, #4]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fdb9 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(yEnd>>8);
 8001b9e:	883b      	ldrh	r3, [r7, #0]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fdb2 	bl	8001710 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yEnd);
 8001bac:	883b      	ldrh	r3, [r7, #0]
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fdad 	bl	8001710 <LCD_WR_DATA>

	LCD_WriteRAM_Prepare();	//��ʼд��GRAM
 8001bb6:	f7ff fde1 	bl	800177c <LCD_WriteRAM_Prepare>
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd90      	pop	{r4, r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200001ac 	.word	0x200001ac

08001bc8 <LCD_SetCursor>:
 * @parameters :Xpos:the  x coordinate of the pixel
								Ypos:the  y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	460a      	mov	r2, r1
 8001bd2:	80fb      	strh	r3, [r7, #6]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);
 8001bd8:	88bb      	ldrh	r3, [r7, #4]
 8001bda:	88fa      	ldrh	r2, [r7, #6]
 8001bdc:	88b9      	ldrh	r1, [r7, #4]
 8001bde:	88f8      	ldrh	r0, [r7, #6]
 8001be0:	f7ff ff9e 	bl	8001b20 <LCD_SetWindows>
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <LCD_direction>:
													2-180 degree
													3-270 degree
 * @retvalue   :None
******************************************************************************/
void LCD_direction(u8 direction)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
			lcddev.setxcmd=0x2A;
 8001bf6:	4b26      	ldr	r3, [pc, #152]	@ (8001c90 <LCD_direction+0xa4>)
 8001bf8:	222a      	movs	r2, #42	@ 0x2a
 8001bfa:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0x2B;
 8001bfc:	4b24      	ldr	r3, [pc, #144]	@ (8001c90 <LCD_direction+0xa4>)
 8001bfe:	222b      	movs	r2, #43	@ 0x2b
 8001c00:	819a      	strh	r2, [r3, #12]
			lcddev.wramcmd=0x2C;
 8001c02:	4b23      	ldr	r3, [pc, #140]	@ (8001c90 <LCD_direction+0xa4>)
 8001c04:	222c      	movs	r2, #44	@ 0x2c
 8001c06:	811a      	strh	r2, [r3, #8]
	switch(direction){
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d83a      	bhi.n	8001c84 <LCD_direction+0x98>
 8001c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c14 <LCD_direction+0x28>)
 8001c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c14:	08001c25 	.word	0x08001c25
 8001c18:	08001c3d 	.word	0x08001c3d
 8001c1c:	08001c55 	.word	0x08001c55
 8001c20:	08001c6d 	.word	0x08001c6d
		case 0:
			lcddev.width=LCD_W;
 8001c24:	4b1a      	ldr	r3, [pc, #104]	@ (8001c90 <LCD_direction+0xa4>)
 8001c26:	22f0      	movs	r2, #240	@ 0xf0
 8001c28:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;
 8001c2a:	4b19      	ldr	r3, [pc, #100]	@ (8001c90 <LCD_direction+0xa4>)
 8001c2c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001c30:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 8001c32:	2108      	movs	r1, #8
 8001c34:	2036      	movs	r0, #54	@ 0x36
 8001c36:	f7ff fd8b 	bl	8001750 <LCD_WriteReg>
		break;
 8001c3a:	e024      	b.n	8001c86 <LCD_direction+0x9a>
		case 1:
			lcddev.width=LCD_H;
 8001c3c:	4b14      	ldr	r3, [pc, #80]	@ (8001c90 <LCD_direction+0xa4>)
 8001c3e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001c42:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8001c44:	4b12      	ldr	r3, [pc, #72]	@ (8001c90 <LCD_direction+0xa4>)
 8001c46:	22f0      	movs	r2, #240	@ 0xf0
 8001c48:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8001c4a:	2168      	movs	r1, #104	@ 0x68
 8001c4c:	2036      	movs	r0, #54	@ 0x36
 8001c4e:	f7ff fd7f 	bl	8001750 <LCD_WriteReg>
		break;
 8001c52:	e018      	b.n	8001c86 <LCD_direction+0x9a>
		case 2:
			lcddev.width=LCD_W;
 8001c54:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <LCD_direction+0xa4>)
 8001c56:	22f0      	movs	r2, #240	@ 0xf0
 8001c58:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c90 <LCD_direction+0xa4>)
 8001c5c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001c60:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 8001c62:	21c8      	movs	r1, #200	@ 0xc8
 8001c64:	2036      	movs	r0, #54	@ 0x36
 8001c66:	f7ff fd73 	bl	8001750 <LCD_WriteReg>
		break;
 8001c6a:	e00c      	b.n	8001c86 <LCD_direction+0x9a>
		case 3:
			lcddev.width=LCD_H;
 8001c6c:	4b08      	ldr	r3, [pc, #32]	@ (8001c90 <LCD_direction+0xa4>)
 8001c6e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001c72:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8001c74:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <LCD_direction+0xa4>)
 8001c76:	22f0      	movs	r2, #240	@ 0xf0
 8001c78:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8001c7a:	21a8      	movs	r1, #168	@ 0xa8
 8001c7c:	2036      	movs	r0, #54	@ 0x36
 8001c7e:	f7ff fd67 	bl	8001750 <LCD_WriteReg>
		break;
 8001c82:	e000      	b.n	8001c86 <LCD_direction+0x9a>
		default:break;
 8001c84:	bf00      	nop
	}
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200001ac 	.word	0x200001ac

08001c94 <LCD_Fill>:
								ey:the ending y coordinate of the specified area
								color:the filled color value
 * @retvalue   :None
********************************************************************/
void LCD_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 color)
{
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	4608      	mov	r0, r1
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4623      	mov	r3, r4
 8001ca4:	80fb      	strh	r3, [r7, #6]
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	80bb      	strh	r3, [r7, #4]
 8001caa:	460b      	mov	r3, r1
 8001cac:	807b      	strh	r3, [r7, #2]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	803b      	strh	r3, [r7, #0]
	u16 i,j;
	u16 width=ex-sx+1; 		//�õ����Ŀ���
 8001cb2:	887a      	ldrh	r2, [r7, #2]
 8001cb4:	88fb      	ldrh	r3, [r7, #6]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	3301      	adds	r3, #1
 8001cbc:	817b      	strh	r3, [r7, #10]
	u16 height=ey-sy+1;		//�߶�
 8001cbe:	883a      	ldrh	r2, [r7, #0]
 8001cc0:	88bb      	ldrh	r3, [r7, #4]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	813b      	strh	r3, [r7, #8]
	LCD_SetWindows(sx,sy,ex,ey);//������ʾ����
 8001cca:	883b      	ldrh	r3, [r7, #0]
 8001ccc:	887a      	ldrh	r2, [r7, #2]
 8001cce:	88b9      	ldrh	r1, [r7, #4]
 8001cd0:	88f8      	ldrh	r0, [r7, #6]
 8001cd2:	f7ff ff25 	bl	8001b20 <LCD_SetWindows>
	for(i=0;i<height;i++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	81fb      	strh	r3, [r7, #14]
 8001cda:	e010      	b.n	8001cfe <LCD_Fill+0x6a>
	{
		for(j=0;j<width;j++)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	81bb      	strh	r3, [r7, #12]
 8001ce0:	e006      	b.n	8001cf0 <LCD_Fill+0x5c>
		Lcd_WriteData_16Bit(color);	//д������
 8001ce2:	8c3b      	ldrh	r3, [r7, #32]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff fd55 	bl	8001794 <Lcd_WriteData_16Bit>
		for(j=0;j<width;j++)
 8001cea:	89bb      	ldrh	r3, [r7, #12]
 8001cec:	3301      	adds	r3, #1
 8001cee:	81bb      	strh	r3, [r7, #12]
 8001cf0:	89ba      	ldrh	r2, [r7, #12]
 8001cf2:	897b      	ldrh	r3, [r7, #10]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d3f4      	bcc.n	8001ce2 <LCD_Fill+0x4e>
	for(i=0;i<height;i++)
 8001cf8:	89fb      	ldrh	r3, [r7, #14]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	81fb      	strh	r3, [r7, #14]
 8001cfe:	89fa      	ldrh	r2, [r7, #14]
 8001d00:	893b      	ldrh	r3, [r7, #8]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d3ea      	bcc.n	8001cdc <LCD_Fill+0x48>
	}
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ���������Ϊȫ��
 8001d06:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <LCD_Fill+0x94>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <LCD_Fill+0x94>)
 8001d10:	885b      	ldrh	r3, [r3, #2]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	2100      	movs	r1, #0
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f7ff ff01 	bl	8001b20 <LCD_SetWindows>
}
 8001d1e:	bf00      	nop
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd90      	pop	{r4, r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200001ac 	.word	0x200001ac

08001d2c <LCD_ShowChar>:
								size:the size of display character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void LCD_ShowChar(u16 x,u16 y,u16 fc, u16 bc, u8 num,u8 size,u8 mode)
{
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4604      	mov	r4, r0
 8001d34:	4608      	mov	r0, r1
 8001d36:	4611      	mov	r1, r2
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4623      	mov	r3, r4
 8001d3c:	80fb      	strh	r3, [r7, #6]
 8001d3e:	4603      	mov	r3, r0
 8001d40:	80bb      	strh	r3, [r7, #4]
 8001d42:	460b      	mov	r3, r1
 8001d44:	807b      	strh	r3, [r7, #2]
 8001d46:	4613      	mov	r3, r2
 8001d48:	803b      	strh	r3, [r7, #0]
    u8 temp;
    u8 pos,t;
	u16 colortemp=POINT_COLOR;
 8001d4a:	4b62      	ldr	r3, [pc, #392]	@ (8001ed4 <LCD_ShowChar+0x1a8>)
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	817b      	strh	r3, [r7, #10]

	num=num-' ';//�õ�ƫ�ƺ��ֵ
 8001d50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d54:	3b20      	subs	r3, #32
 8001d56:	f887 3020 	strb.w	r3, [r7, #32]
	LCD_SetWindows(x,y,x+size/2-1,y+size-1);//���õ���������ʾ����
 8001d5a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d5e:	085b      	lsrs	r3, r3, #1
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	4413      	add	r3, r2
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29c      	uxth	r4, r3
 8001d6e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	88bb      	ldrh	r3, [r7, #4]
 8001d76:	4413      	add	r3, r2
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	88b9      	ldrh	r1, [r7, #4]
 8001d80:	88f8      	ldrh	r0, [r7, #6]
 8001d82:	4622      	mov	r2, r4
 8001d84:	f7ff fecc 	bl	8001b20 <LCD_SetWindows>
	if(!mode) //�ǵ��ӷ�ʽ
 8001d88:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d143      	bne.n	8001e18 <LCD_ShowChar+0xec>
	{
		for(pos=0;pos<size;pos++)
 8001d90:	2300      	movs	r3, #0
 8001d92:	73bb      	strb	r3, [r7, #14]
 8001d94:	e03a      	b.n	8001e0c <LCD_ShowChar+0xe0>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 8001d96:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d9a:	2b0c      	cmp	r3, #12
 8001d9c:	d10c      	bne.n	8001db8 <LCD_ShowChar+0x8c>
 8001d9e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001da2:	7bb9      	ldrb	r1, [r7, #14]
 8001da4:	484c      	ldr	r0, [pc, #304]	@ (8001ed8 <LCD_ShowChar+0x1ac>)
 8001da6:	4613      	mov	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4403      	add	r3, r0
 8001db0:	440b      	add	r3, r1
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	73fb      	strb	r3, [r7, #15]
 8001db6:	e008      	b.n	8001dca <LCD_ShowChar+0x9e>
			else temp=asc2_1608[num][pos];		 //����1608����
 8001db8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001dbc:	7bbb      	ldrb	r3, [r7, #14]
 8001dbe:	4947      	ldr	r1, [pc, #284]	@ (8001edc <LCD_ShowChar+0x1b0>)
 8001dc0:	0112      	lsls	r2, r2, #4
 8001dc2:	440a      	add	r2, r1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	737b      	strb	r3, [r7, #13]
 8001dce:	e013      	b.n	8001df8 <LCD_ShowChar+0xcc>
		    {
		        if(temp&0x01)Lcd_WriteData_16Bit(fc);
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d004      	beq.n	8001de4 <LCD_ShowChar+0xb8>
 8001dda:	887b      	ldrh	r3, [r7, #2]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fcd9 	bl	8001794 <Lcd_WriteData_16Bit>
 8001de2:	e003      	b.n	8001dec <LCD_ShowChar+0xc0>
				else Lcd_WriteData_16Bit(bc);
 8001de4:	883b      	ldrh	r3, [r7, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fcd4 	bl	8001794 <Lcd_WriteData_16Bit>
				temp>>=1;
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	085b      	lsrs	r3, r3, #1
 8001df0:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8001df2:	7b7b      	ldrb	r3, [r7, #13]
 8001df4:	3301      	adds	r3, #1
 8001df6:	737b      	strb	r3, [r7, #13]
 8001df8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001dfc:	085b      	lsrs	r3, r3, #1
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	7b7a      	ldrb	r2, [r7, #13]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d3e4      	bcc.n	8001dd0 <LCD_ShowChar+0xa4>
		for(pos=0;pos<size;pos++)
 8001e06:	7bbb      	ldrb	r3, [r7, #14]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	73bb      	strb	r3, [r7, #14]
 8001e0c:	7bba      	ldrb	r2, [r7, #14]
 8001e0e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d3bf      	bcc.n	8001d96 <LCD_ShowChar+0x6a>
 8001e16:	e049      	b.n	8001eac <LCD_ShowChar+0x180>
		    }

		}
	}else//���ӷ�ʽ
	{
		for(pos=0;pos<size;pos++)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	73bb      	strb	r3, [r7, #14]
 8001e1c:	e041      	b.n	8001ea2 <LCD_ShowChar+0x176>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 8001e1e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e22:	2b0c      	cmp	r3, #12
 8001e24:	d10c      	bne.n	8001e40 <LCD_ShowChar+0x114>
 8001e26:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e2a:	7bb9      	ldrb	r1, [r7, #14]
 8001e2c:	482a      	ldr	r0, [pc, #168]	@ (8001ed8 <LCD_ShowChar+0x1ac>)
 8001e2e:	4613      	mov	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4413      	add	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4403      	add	r3, r0
 8001e38:	440b      	add	r3, r1
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	73fb      	strb	r3, [r7, #15]
 8001e3e:	e008      	b.n	8001e52 <LCD_ShowChar+0x126>
			else temp=asc2_1608[num][pos];		 //����1608����
 8001e40:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e44:	7bbb      	ldrb	r3, [r7, #14]
 8001e46:	4925      	ldr	r1, [pc, #148]	@ (8001edc <LCD_ShowChar+0x1b0>)
 8001e48:	0112      	lsls	r2, r2, #4
 8001e4a:	440a      	add	r2, r1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	737b      	strb	r3, [r7, #13]
 8001e56:	e01a      	b.n	8001e8e <LCD_ShowChar+0x162>
		    {
				POINT_COLOR=fc;
 8001e58:	4a1e      	ldr	r2, [pc, #120]	@ (8001ed4 <LCD_ShowChar+0x1a8>)
 8001e5a:	887b      	ldrh	r3, [r7, #2]
 8001e5c:	8013      	strh	r3, [r2, #0]
		        if(temp&0x01)LCD_DrawPoint(x+t,y+pos);//��һ����
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00c      	beq.n	8001e82 <LCD_ShowChar+0x156>
 8001e68:	7b7b      	ldrb	r3, [r7, #13]
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	4413      	add	r3, r2
 8001e70:	b298      	uxth	r0, r3
 8001e72:	7bbb      	ldrb	r3, [r7, #14]
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	88bb      	ldrh	r3, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7ff fcbd 	bl	80017fc <LCD_DrawPoint>
		        temp>>=1;
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	085b      	lsrs	r3, r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8001e88:	7b7b      	ldrb	r3, [r7, #13]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	737b      	strb	r3, [r7, #13]
 8001e8e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e92:	085b      	lsrs	r3, r3, #1
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	7b7a      	ldrb	r2, [r7, #13]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d3dd      	bcc.n	8001e58 <LCD_ShowChar+0x12c>
		for(pos=0;pos<size;pos++)
 8001e9c:	7bbb      	ldrb	r3, [r7, #14]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	73bb      	strb	r3, [r7, #14]
 8001ea2:	7bba      	ldrb	r2, [r7, #14]
 8001ea4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d3b8      	bcc.n	8001e1e <LCD_ShowChar+0xf2>
		    }
		}
	}
	POINT_COLOR=colortemp;
 8001eac:	4a09      	ldr	r2, [pc, #36]	@ (8001ed4 <LCD_ShowChar+0x1a8>)
 8001eae:	897b      	ldrh	r3, [r7, #10]
 8001eb0:	8013      	strh	r3, [r2, #0]
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <LCD_ShowChar+0x1b4>)
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <LCD_ShowChar+0x1b4>)
 8001ebc:	885b      	ldrh	r3, [r3, #2]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f7ff fe2b 	bl	8001b20 <LCD_SetWindows>
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd90      	pop	{r4, r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200001ba 	.word	0x200001ba
 8001ed8:	08008ba0 	.word	0x08008ba0
 8001edc:	08009014 	.word	0x08009014
 8001ee0:	200001ac 	.word	0x200001ac

08001ee4 <Show_Str>:
								size:the size of Chinese and English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void Show_Str(u16 x, u16 y, u16 fc, u16 bc, char *str,u8 size,u8 mode)
{
 8001ee4:	b5b0      	push	{r4, r5, r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af04      	add	r7, sp, #16
 8001eea:	4604      	mov	r4, r0
 8001eec:	4608      	mov	r0, r1
 8001eee:	4611      	mov	r1, r2
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4623      	mov	r3, r4
 8001ef4:	80fb      	strh	r3, [r7, #6]
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	80bb      	strh	r3, [r7, #4]
 8001efa:	460b      	mov	r3, r1
 8001efc:	807b      	strh	r3, [r7, #2]
 8001efe:	4613      	mov	r3, r2
 8001f00:	803b      	strh	r3, [r7, #0]
	u16 x0=x;
 8001f02:	88fb      	ldrh	r3, [r7, #6]
 8001f04:	81bb      	strh	r3, [r7, #12]
  	u8 bHz=0;     //�ַ���������
 8001f06:	2300      	movs	r3, #0
 8001f08:	73fb      	strb	r3, [r7, #15]
    while(*str!=0)//����δ����
 8001f0a:	e07f      	b.n	800200c <Show_Str+0x128>
    {
        if(!bHz)
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d15f      	bne.n	8001fd2 <Show_Str+0xee>
        {
			if(x>(lcddev.width-size/2)||y>(lcddev.height-size))
 8001f12:	88fa      	ldrh	r2, [r7, #6]
 8001f14:	4b43      	ldr	r3, [pc, #268]	@ (8002024 <Show_Str+0x140>)
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f1e:	085b      	lsrs	r3, r3, #1
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	1acb      	subs	r3, r1, r3
 8001f24:	429a      	cmp	r2, r3
 8001f26:	dc77      	bgt.n	8002018 <Show_Str+0x134>
 8001f28:	88ba      	ldrh	r2, [r7, #4]
 8001f2a:	4b3e      	ldr	r3, [pc, #248]	@ (8002024 <Show_Str+0x140>)
 8001f2c:	885b      	ldrh	r3, [r3, #2]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f34:	1acb      	subs	r3, r1, r3
 8001f36:	429a      	cmp	r2, r3
 8001f38:	dc6e      	bgt.n	8002018 <Show_Str+0x134>
			return;
	        if(*str>0x80)bHz=1;//����
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b80      	cmp	r3, #128	@ 0x80
 8001f40:	d902      	bls.n	8001f48 <Show_Str+0x64>
 8001f42:	2301      	movs	r3, #1
 8001f44:	73fb      	strb	r3, [r7, #15]
 8001f46:	e061      	b.n	800200c <Show_Str+0x128>
	        else              //�ַ�
	        {
		        if(*str==0x0D)//���з���
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b0d      	cmp	r3, #13
 8001f4e:	d10b      	bne.n	8001f68 <Show_Str+0x84>
		        {
		            y+=size;
 8001f50:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	88bb      	ldrh	r3, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	80bb      	strh	r3, [r7, #4]
					x=x0;
 8001f5c:	89bb      	ldrh	r3, [r7, #12]
 8001f5e:	80fb      	strh	r3, [r7, #6]
		            str++;
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	3301      	adds	r3, #1
 8001f64:	623b      	str	r3, [r7, #32]
 8001f66:	e030      	b.n	8001fca <Show_Str+0xe6>
		        }
		        else
				{
					if(size>16)//�ֿ���û�м���12X24 16X32��Ӣ������,��8X16����
 8001f68:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f6c:	2b10      	cmp	r3, #16
 8001f6e:	d913      	bls.n	8001f98 <Show_Str+0xb4>
					{
					LCD_ShowChar(x,y,fc,bc,*str,16,mode);
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	883d      	ldrh	r5, [r7, #0]
 8001f76:	887c      	ldrh	r4, [r7, #2]
 8001f78:	88b9      	ldrh	r1, [r7, #4]
 8001f7a:	88f8      	ldrh	r0, [r7, #6]
 8001f7c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001f80:	9202      	str	r2, [sp, #8]
 8001f82:	2210      	movs	r2, #16
 8001f84:	9201      	str	r2, [sp, #4]
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	462b      	mov	r3, r5
 8001f8a:	4622      	mov	r2, r4
 8001f8c:	f7ff fece 	bl	8001d2c <LCD_ShowChar>
					x+=8; //�ַ�,Ϊȫ�ֵ�һ��
 8001f90:	88fb      	ldrh	r3, [r7, #6]
 8001f92:	3308      	adds	r3, #8
 8001f94:	80fb      	strh	r3, [r7, #6]
 8001f96:	e018      	b.n	8001fca <Show_Str+0xe6>
					}
					else
					{
					LCD_ShowChar(x,y,fc,bc,*str,size,mode);
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	883d      	ldrh	r5, [r7, #0]
 8001f9e:	887c      	ldrh	r4, [r7, #2]
 8001fa0:	88b9      	ldrh	r1, [r7, #4]
 8001fa2:	88f8      	ldrh	r0, [r7, #6]
 8001fa4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001fa8:	9202      	str	r2, [sp, #8]
 8001faa:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001fae:	9201      	str	r2, [sp, #4]
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	462b      	mov	r3, r5
 8001fb4:	4622      	mov	r2, r4
 8001fb6:	f7ff feb9 	bl	8001d2c <LCD_ShowChar>
					x+=size/2; //�ַ�,Ϊȫ�ֵ�һ��
 8001fba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001fbe:	085b      	lsrs	r3, r3, #1
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	80fb      	strh	r3, [r7, #6]
					}
				}
				str++;
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	623b      	str	r3, [r7, #32]
 8001fd0:	e01c      	b.n	800200c <Show_Str+0x128>

	        }
        }else//����
        {
			if(x>(lcddev.width-size)||y>(lcddev.height-size))
 8001fd2:	88fa      	ldrh	r2, [r7, #6]
 8001fd4:	4b13      	ldr	r3, [pc, #76]	@ (8002024 <Show_Str+0x140>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001fde:	1acb      	subs	r3, r1, r3
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	dc1b      	bgt.n	800201c <Show_Str+0x138>
 8001fe4:	88ba      	ldrh	r2, [r7, #4]
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8002024 <Show_Str+0x140>)
 8001fe8:	885b      	ldrh	r3, [r3, #2]
 8001fea:	4619      	mov	r1, r3
 8001fec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ff0:	1acb      	subs	r3, r1, r3
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	dc12      	bgt.n	800201c <Show_Str+0x138>
			return;
            bHz=0;//�к��ֿ�
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	73fb      	strb	r3, [r7, #15]


	        str+=2;
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	623b      	str	r3, [r7, #32]
	        x+=size;//��һ������ƫ��
 8002000:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002004:	b29a      	uxth	r2, r3
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	4413      	add	r3, r2
 800200a:	80fb      	strh	r3, [r7, #6]
    while(*str!=0)//����δ����
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	f47f af7b 	bne.w	8001f0c <Show_Str+0x28>
 8002016:	e002      	b.n	800201e <Show_Str+0x13a>
			return;
 8002018:	bf00      	nop
 800201a:	e000      	b.n	800201e <Show_Str+0x13a>
			return;
 800201c:	bf00      	nop
        }
    }
}
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bdb0      	pop	{r4, r5, r7, pc}
 8002024:	200001ac 	.word	0x200001ac

08002028 <LCD_DrawPage1>:
	}
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ���ʾ����Ϊȫ��
}


void LCD_DrawPage1(void){
 8002028:	b580      	push	{r7, lr}
 800202a:	b08c      	sub	sp, #48	@ 0x30
 800202c:	af04      	add	r7, sp, #16
	char *top = "StartTech Incorporation";
 800202e:	4b37      	ldr	r3, [pc, #220]	@ (800210c <LCD_DrawPage1+0xe4>)
 8002030:	61fb      	str	r3, [r7, #28]
	char *b1 = "Temp. Set: ";
 8002032:	4b37      	ldr	r3, [pc, #220]	@ (8002110 <LCD_DrawPage1+0xe8>)
 8002034:	61bb      	str	r3, [r7, #24]
	char *b2 = "Hot Water: ";
 8002036:	4b37      	ldr	r3, [pc, #220]	@ (8002114 <LCD_DrawPage1+0xec>)
 8002038:	617b      	str	r3, [r7, #20]
	char *b3 = "Term. Water: ";
 800203a:	4b37      	ldr	r3, [pc, #220]	@ (8002118 <LCD_DrawPage1+0xf0>)
 800203c:	613b      	str	r3, [r7, #16]
	char *b4 = "Valve Opening: ";
 800203e:	4b37      	ldr	r3, [pc, #220]	@ (800211c <LCD_DrawPage1+0xf4>)
 8002040:	60fb      	str	r3, [r7, #12]
	char *b6 = "New Temp: ";
 8002042:	4b37      	ldr	r3, [pc, #220]	@ (8002120 <LCD_DrawPage1+0xf8>)
 8002044:	60bb      	str	r3, [r7, #8]
	char *b7 = "Flash: ";
 8002046:	4b37      	ldr	r3, [pc, #220]	@ (8002124 <LCD_DrawPage1+0xfc>)
 8002048:	607b      	str	r3, [r7, #4]

	Show_Str(40, 10, BLACK, WHITE, top, 16, 1);
 800204a:	2301      	movs	r3, #1
 800204c:	9302      	str	r3, [sp, #8]
 800204e:	2310      	movs	r3, #16
 8002050:	9301      	str	r3, [sp, #4]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800205a:	2200      	movs	r2, #0
 800205c:	210a      	movs	r1, #10
 800205e:	2028      	movs	r0, #40	@ 0x28
 8002060:	f7ff ff40 	bl	8001ee4 <Show_Str>
	Show_Str(5, 50, BLACK, WHITE, b1, 12, 1);
 8002064:	2301      	movs	r3, #1
 8002066:	9302      	str	r3, [sp, #8]
 8002068:	230c      	movs	r3, #12
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002074:	2200      	movs	r2, #0
 8002076:	2132      	movs	r1, #50	@ 0x32
 8002078:	2005      	movs	r0, #5
 800207a:	f7ff ff33 	bl	8001ee4 <Show_Str>
	Show_Str(5, 70, BLACK, WHITE, b2, 12, 1);
 800207e:	2301      	movs	r3, #1
 8002080:	9302      	str	r3, [sp, #8]
 8002082:	230c      	movs	r3, #12
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800208e:	2200      	movs	r2, #0
 8002090:	2146      	movs	r1, #70	@ 0x46
 8002092:	2005      	movs	r0, #5
 8002094:	f7ff ff26 	bl	8001ee4 <Show_Str>
	Show_Str(5, 90, BLACK, WHITE, b3, 12, 1);
 8002098:	2301      	movs	r3, #1
 800209a:	9302      	str	r3, [sp, #8]
 800209c:	230c      	movs	r3, #12
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020a8:	2200      	movs	r2, #0
 80020aa:	215a      	movs	r1, #90	@ 0x5a
 80020ac:	2005      	movs	r0, #5
 80020ae:	f7ff ff19 	bl	8001ee4 <Show_Str>
	Show_Str(5, 110, BLACK, WHITE, b4, 12, 1);
 80020b2:	2301      	movs	r3, #1
 80020b4:	9302      	str	r3, [sp, #8]
 80020b6:	230c      	movs	r3, #12
 80020b8:	9301      	str	r3, [sp, #4]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020c2:	2200      	movs	r2, #0
 80020c4:	216e      	movs	r1, #110	@ 0x6e
 80020c6:	2005      	movs	r0, #5
 80020c8:	f7ff ff0c 	bl	8001ee4 <Show_Str>
	Show_Str(110, 130, BLACK, WHITE, b6, 12, 1);
 80020cc:	2301      	movs	r3, #1
 80020ce:	9302      	str	r3, [sp, #8]
 80020d0:	230c      	movs	r3, #12
 80020d2:	9301      	str	r3, [sp, #4]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020dc:	2200      	movs	r2, #0
 80020de:	2182      	movs	r1, #130	@ 0x82
 80020e0:	206e      	movs	r0, #110	@ 0x6e
 80020e2:	f7ff feff 	bl	8001ee4 <Show_Str>
	Show_Str(5, 130, BLACK, WHITE, b7, 12, 1);
 80020e6:	2301      	movs	r3, #1
 80020e8:	9302      	str	r3, [sp, #8]
 80020ea:	230c      	movs	r3, #12
 80020ec:	9301      	str	r3, [sp, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020f6:	2200      	movs	r2, #0
 80020f8:	2182      	movs	r1, #130	@ 0x82
 80020fa:	2005      	movs	r0, #5
 80020fc:	f7ff fef2 	bl	8001ee4 <Show_Str>
	LCD_DrawKeyPad();
 8002100:	f000 f812 	bl	8002128 <LCD_DrawKeyPad>
}
 8002104:	bf00      	nop
 8002106:	3720      	adds	r7, #32
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	08008a50 	.word	0x08008a50
 8002110:	08008a68 	.word	0x08008a68
 8002114:	08008a74 	.word	0x08008a74
 8002118:	08008a80 	.word	0x08008a80
 800211c:	08008a90 	.word	0x08008a90
 8002120:	08008aa0 	.word	0x08008aa0
 8002124:	08008aac 	.word	0x08008aac

08002128 <LCD_DrawKeyPad>:

void LCD_DrawKeyPad(void){
 8002128:	b5b0      	push	{r4, r5, r7, lr}
 800212a:	b092      	sub	sp, #72	@ 0x48
 800212c:	af04      	add	r7, sp, #16
	char *name = "Temperature Control";
 800212e:	4ba0      	ldr	r3, [pc, #640]	@ (80023b0 <LCD_DrawKeyPad+0x288>)
 8002130:	637b      	str	r3, [r7, #52]	@ 0x34
	char *b1 = "1", *b2 = "2", *b3 = "3", *b4 = "4", *b5 = "5", *b6 = "6", *b7 = "7", *b8 = "8", *b9 = "9", *b0 = "0", *clr = "CLR", *set = "SET";
 8002132:	4ba0      	ldr	r3, [pc, #640]	@ (80023b4 <LCD_DrawKeyPad+0x28c>)
 8002134:	633b      	str	r3, [r7, #48]	@ 0x30
 8002136:	4ba0      	ldr	r3, [pc, #640]	@ (80023b8 <LCD_DrawKeyPad+0x290>)
 8002138:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800213a:	4ba0      	ldr	r3, [pc, #640]	@ (80023bc <LCD_DrawKeyPad+0x294>)
 800213c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800213e:	4ba0      	ldr	r3, [pc, #640]	@ (80023c0 <LCD_DrawKeyPad+0x298>)
 8002140:	627b      	str	r3, [r7, #36]	@ 0x24
 8002142:	4ba0      	ldr	r3, [pc, #640]	@ (80023c4 <LCD_DrawKeyPad+0x29c>)
 8002144:	623b      	str	r3, [r7, #32]
 8002146:	4ba0      	ldr	r3, [pc, #640]	@ (80023c8 <LCD_DrawKeyPad+0x2a0>)
 8002148:	61fb      	str	r3, [r7, #28]
 800214a:	4ba0      	ldr	r3, [pc, #640]	@ (80023cc <LCD_DrawKeyPad+0x2a4>)
 800214c:	61bb      	str	r3, [r7, #24]
 800214e:	4ba0      	ldr	r3, [pc, #640]	@ (80023d0 <LCD_DrawKeyPad+0x2a8>)
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	4ba0      	ldr	r3, [pc, #640]	@ (80023d4 <LCD_DrawKeyPad+0x2ac>)
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	4ba0      	ldr	r3, [pc, #640]	@ (80023d8 <LCD_DrawKeyPad+0x2b0>)
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4ba0      	ldr	r3, [pc, #640]	@ (80023dc <LCD_DrawKeyPad+0x2b4>)
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	4ba0      	ldr	r3, [pc, #640]	@ (80023e0 <LCD_DrawKeyPad+0x2b8>)
 8002160:	607b      	str	r3, [r7, #4]
	//char *start = "START", *stop = "STOP";
	LCD_Fill(keypad.name[0], keypad.name[2], keypad.name[1], keypad.name[3], keypad.name[4]);
 8002162:	4ba0      	ldr	r3, [pc, #640]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 8002164:	8818      	ldrh	r0, [r3, #0]
 8002166:	4b9f      	ldr	r3, [pc, #636]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 8002168:	8899      	ldrh	r1, [r3, #4]
 800216a:	4b9e      	ldr	r3, [pc, #632]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 800216c:	885a      	ldrh	r2, [r3, #2]
 800216e:	4b9d      	ldr	r3, [pc, #628]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 8002170:	88dc      	ldrh	r4, [r3, #6]
 8002172:	4b9c      	ldr	r3, [pc, #624]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 8002174:	891b      	ldrh	r3, [r3, #8]
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	4623      	mov	r3, r4
 800217a:	f7ff fd8b 	bl	8001c94 <LCD_Fill>
	Show_Str((keypad.name[0] + ((keypad.name[1] - keypad.name[0]) - strlen(name)*5)/4), (keypad.name[2]+ 3), BLACK, WHITE, name, 16, 1);
 800217e:	4b99      	ldr	r3, [pc, #612]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 8002180:	881c      	ldrh	r4, [r3, #0]
 8002182:	4b98      	ldr	r3, [pc, #608]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 8002184:	885b      	ldrh	r3, [r3, #2]
 8002186:	461a      	mov	r2, r3
 8002188:	4b96      	ldr	r3, [pc, #600]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	461d      	mov	r5, r3
 8002190:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002192:	f7fe f82f 	bl	80001f4 <strlen>
 8002196:	4602      	mov	r2, r0
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	1aeb      	subs	r3, r5, r3
 80021a0:	089b      	lsrs	r3, r3, #2
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	4423      	add	r3, r4
 80021a6:	b298      	uxth	r0, r3
 80021a8:	4b8e      	ldr	r3, [pc, #568]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 80021aa:	889b      	ldrh	r3, [r3, #4]
 80021ac:	3303      	adds	r3, #3
 80021ae:	b299      	uxth	r1, r3
 80021b0:	2301      	movs	r3, #1
 80021b2:	9302      	str	r3, [sp, #8]
 80021b4:	2310      	movs	r3, #16
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021c0:	2200      	movs	r2, #0
 80021c2:	f7ff fe8f 	bl	8001ee4 <Show_Str>

	LCD_Fill(keypad.b1[0], keypad.b1[2], keypad.b1[1], keypad.b1[3], keypad.b1[4]);
 80021c6:	4b87      	ldr	r3, [pc, #540]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 80021c8:	8958      	ldrh	r0, [r3, #10]
 80021ca:	4b86      	ldr	r3, [pc, #536]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 80021cc:	89d9      	ldrh	r1, [r3, #14]
 80021ce:	4b85      	ldr	r3, [pc, #532]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 80021d0:	899a      	ldrh	r2, [r3, #12]
 80021d2:	4b84      	ldr	r3, [pc, #528]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 80021d4:	8a1c      	ldrh	r4, [r3, #16]
 80021d6:	4b83      	ldr	r3, [pc, #524]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 80021d8:	8a5b      	ldrh	r3, [r3, #18]
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	4623      	mov	r3, r4
 80021de:	f7ff fd59 	bl	8001c94 <LCD_Fill>
	Show_Str((keypad.b1[0] + ((keypad.b1[1] - keypad.b1[0]) - strlen(b1)*5)/2), (keypad.b1[2]+ 5), BLACK, WHITE, b1, 16, 1);
 80021e2:	4b80      	ldr	r3, [pc, #512]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 80021e4:	895c      	ldrh	r4, [r3, #10]
 80021e6:	4b7f      	ldr	r3, [pc, #508]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 80021e8:	899b      	ldrh	r3, [r3, #12]
 80021ea:	461a      	mov	r2, r3
 80021ec:	4b7d      	ldr	r3, [pc, #500]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 80021ee:	895b      	ldrh	r3, [r3, #10]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	461d      	mov	r5, r3
 80021f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80021f6:	f7fd fffd 	bl	80001f4 <strlen>
 80021fa:	4602      	mov	r2, r0
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	1aeb      	subs	r3, r5, r3
 8002204:	085b      	lsrs	r3, r3, #1
 8002206:	b29b      	uxth	r3, r3
 8002208:	4423      	add	r3, r4
 800220a:	b298      	uxth	r0, r3
 800220c:	4b75      	ldr	r3, [pc, #468]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 800220e:	89db      	ldrh	r3, [r3, #14]
 8002210:	3305      	adds	r3, #5
 8002212:	b299      	uxth	r1, r3
 8002214:	2301      	movs	r3, #1
 8002216:	9302      	str	r3, [sp, #8]
 8002218:	2310      	movs	r3, #16
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002224:	2200      	movs	r2, #0
 8002226:	f7ff fe5d 	bl	8001ee4 <Show_Str>

	LCD_Fill(keypad.b2[0], keypad.b2[2], keypad.b2[1], keypad.b2[3], keypad.b2[4]);
 800222a:	4b6e      	ldr	r3, [pc, #440]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 800222c:	8a98      	ldrh	r0, [r3, #20]
 800222e:	4b6d      	ldr	r3, [pc, #436]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 8002230:	8b19      	ldrh	r1, [r3, #24]
 8002232:	4b6c      	ldr	r3, [pc, #432]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 8002234:	8ada      	ldrh	r2, [r3, #22]
 8002236:	4b6b      	ldr	r3, [pc, #428]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 8002238:	8b5c      	ldrh	r4, [r3, #26]
 800223a:	4b6a      	ldr	r3, [pc, #424]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 800223c:	8b9b      	ldrh	r3, [r3, #28]
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	4623      	mov	r3, r4
 8002242:	f7ff fd27 	bl	8001c94 <LCD_Fill>
	Show_Str((keypad.b2[0] + ((keypad.b2[1] - keypad.b2[0]) - strlen(b2)*5)/2), (keypad.b2[2]+ 5), BLACK, WHITE, b2, 16, 1);
 8002246:	4b67      	ldr	r3, [pc, #412]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 8002248:	8a9c      	ldrh	r4, [r3, #20]
 800224a:	4b66      	ldr	r3, [pc, #408]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 800224c:	8adb      	ldrh	r3, [r3, #22]
 800224e:	461a      	mov	r2, r3
 8002250:	4b64      	ldr	r3, [pc, #400]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 8002252:	8a9b      	ldrh	r3, [r3, #20]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	461d      	mov	r5, r3
 8002258:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800225a:	f7fd ffcb 	bl	80001f4 <strlen>
 800225e:	4602      	mov	r2, r0
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	1aeb      	subs	r3, r5, r3
 8002268:	085b      	lsrs	r3, r3, #1
 800226a:	b29b      	uxth	r3, r3
 800226c:	4423      	add	r3, r4
 800226e:	b298      	uxth	r0, r3
 8002270:	4b5c      	ldr	r3, [pc, #368]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 8002272:	8b1b      	ldrh	r3, [r3, #24]
 8002274:	3305      	adds	r3, #5
 8002276:	b299      	uxth	r1, r3
 8002278:	2301      	movs	r3, #1
 800227a:	9302      	str	r3, [sp, #8]
 800227c:	2310      	movs	r3, #16
 800227e:	9301      	str	r3, [sp, #4]
 8002280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002288:	2200      	movs	r2, #0
 800228a:	f7ff fe2b 	bl	8001ee4 <Show_Str>

	LCD_Fill(keypad.b3[0], keypad.b3[2], keypad.b3[1], keypad.b3[3], keypad.b3[4]);
 800228e:	4b55      	ldr	r3, [pc, #340]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 8002290:	8bd8      	ldrh	r0, [r3, #30]
 8002292:	4b54      	ldr	r3, [pc, #336]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 8002294:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8002296:	4b53      	ldr	r3, [pc, #332]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 8002298:	8c1a      	ldrh	r2, [r3, #32]
 800229a:	4b52      	ldr	r3, [pc, #328]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 800229c:	8c9c      	ldrh	r4, [r3, #36]	@ 0x24
 800229e:	4b51      	ldr	r3, [pc, #324]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 80022a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	4623      	mov	r3, r4
 80022a6:	f7ff fcf5 	bl	8001c94 <LCD_Fill>
	Show_Str((keypad.b3[0] + ((keypad.b3[1] - keypad.b3[0]) - strlen(b3)*5)/2), (keypad.b3[2]+ 5), BLACK, WHITE, b3, 16, 1);
 80022aa:	4b4e      	ldr	r3, [pc, #312]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 80022ac:	8bdc      	ldrh	r4, [r3, #30]
 80022ae:	4b4d      	ldr	r3, [pc, #308]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 80022b0:	8c1b      	ldrh	r3, [r3, #32]
 80022b2:	461a      	mov	r2, r3
 80022b4:	4b4b      	ldr	r3, [pc, #300]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 80022b6:	8bdb      	ldrh	r3, [r3, #30]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	461d      	mov	r5, r3
 80022bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022be:	f7fd ff99 	bl	80001f4 <strlen>
 80022c2:	4602      	mov	r2, r0
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	1aeb      	subs	r3, r5, r3
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	4423      	add	r3, r4
 80022d2:	b298      	uxth	r0, r3
 80022d4:	4b43      	ldr	r3, [pc, #268]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 80022d6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80022d8:	3305      	adds	r3, #5
 80022da:	b299      	uxth	r1, r3
 80022dc:	2301      	movs	r3, #1
 80022de:	9302      	str	r3, [sp, #8]
 80022e0:	2310      	movs	r3, #16
 80022e2:	9301      	str	r3, [sp, #4]
 80022e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022ec:	2200      	movs	r2, #0
 80022ee:	f7ff fdf9 	bl	8001ee4 <Show_Str>

	LCD_Fill(keypad.b4[0], keypad.b4[2], keypad.b4[1], keypad.b4[3], keypad.b4[4]);
 80022f2:	4b3c      	ldr	r3, [pc, #240]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 80022f4:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
 80022f6:	4b3b      	ldr	r3, [pc, #236]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 80022f8:	8d99      	ldrh	r1, [r3, #44]	@ 0x2c
 80022fa:	4b3a      	ldr	r3, [pc, #232]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 80022fc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80022fe:	4b39      	ldr	r3, [pc, #228]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 8002300:	8ddc      	ldrh	r4, [r3, #46]	@ 0x2e
 8002302:	4b38      	ldr	r3, [pc, #224]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 8002304:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	4623      	mov	r3, r4
 800230a:	f7ff fcc3 	bl	8001c94 <LCD_Fill>
	Show_Str((keypad.b4[0] + ((keypad.b4[1] - keypad.b4[0]) - strlen(b4)*5)/2), (keypad.b4[2]+ 5), BLACK, WHITE, b4, 16, 1);
 800230e:	4b35      	ldr	r3, [pc, #212]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 8002310:	8d1c      	ldrh	r4, [r3, #40]	@ 0x28
 8002312:	4b34      	ldr	r3, [pc, #208]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 8002314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002316:	461a      	mov	r2, r3
 8002318:	4b32      	ldr	r3, [pc, #200]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 800231a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	461d      	mov	r5, r3
 8002320:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002322:	f7fd ff67 	bl	80001f4 <strlen>
 8002326:	4602      	mov	r2, r0
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	1aeb      	subs	r3, r5, r3
 8002330:	085b      	lsrs	r3, r3, #1
 8002332:	b29b      	uxth	r3, r3
 8002334:	4423      	add	r3, r4
 8002336:	b298      	uxth	r0, r3
 8002338:	4b2a      	ldr	r3, [pc, #168]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 800233a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800233c:	3305      	adds	r3, #5
 800233e:	b299      	uxth	r1, r3
 8002340:	2301      	movs	r3, #1
 8002342:	9302      	str	r3, [sp, #8]
 8002344:	2310      	movs	r3, #16
 8002346:	9301      	str	r3, [sp, #4]
 8002348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002350:	2200      	movs	r2, #0
 8002352:	f7ff fdc7 	bl	8001ee4 <Show_Str>

	LCD_Fill(keypad.b5[0], keypad.b5[2], keypad.b5[1], keypad.b5[3], keypad.b5[4]);
 8002356:	4b23      	ldr	r3, [pc, #140]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 8002358:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 800235a:	4b22      	ldr	r3, [pc, #136]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 800235c:	8ed9      	ldrh	r1, [r3, #54]	@ 0x36
 800235e:	4b21      	ldr	r3, [pc, #132]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 8002360:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8002362:	4b20      	ldr	r3, [pc, #128]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 8002364:	8f1c      	ldrh	r4, [r3, #56]	@ 0x38
 8002366:	4b1f      	ldr	r3, [pc, #124]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 8002368:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	4623      	mov	r3, r4
 800236e:	f7ff fc91 	bl	8001c94 <LCD_Fill>
	Show_Str((keypad.b5[0] + ((keypad.b5[1] - keypad.b5[0]) - strlen(b5)*5)/2), (keypad.b5[2]+ 5), BLACK, WHITE, b5, 16, 1);
 8002372:	4b1c      	ldr	r3, [pc, #112]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 8002374:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8002376:	4b1b      	ldr	r3, [pc, #108]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 8002378:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800237a:	461a      	mov	r2, r3
 800237c:	4b19      	ldr	r3, [pc, #100]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 800237e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	461d      	mov	r5, r3
 8002384:	6a38      	ldr	r0, [r7, #32]
 8002386:	f7fd ff35 	bl	80001f4 <strlen>
 800238a:	4602      	mov	r2, r0
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	1aeb      	subs	r3, r5, r3
 8002394:	085b      	lsrs	r3, r3, #1
 8002396:	b29b      	uxth	r3, r3
 8002398:	4423      	add	r3, r4
 800239a:	b298      	uxth	r0, r3
 800239c:	4b11      	ldr	r3, [pc, #68]	@ (80023e4 <LCD_DrawKeyPad+0x2bc>)
 800239e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023a0:	3305      	adds	r3, #5
 80023a2:	b299      	uxth	r1, r3
 80023a4:	2301      	movs	r3, #1
 80023a6:	9302      	str	r3, [sp, #8]
 80023a8:	2310      	movs	r3, #16
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	e01b      	b.n	80023e8 <LCD_DrawKeyPad+0x2c0>
 80023b0:	08008ab4 	.word	0x08008ab4
 80023b4:	08008ac8 	.word	0x08008ac8
 80023b8:	08008acc 	.word	0x08008acc
 80023bc:	08008ad0 	.word	0x08008ad0
 80023c0:	08008ad4 	.word	0x08008ad4
 80023c4:	08008ad8 	.word	0x08008ad8
 80023c8:	08008adc 	.word	0x08008adc
 80023cc:	08008ae0 	.word	0x08008ae0
 80023d0:	08008ae4 	.word	0x08008ae4
 80023d4:	08008ae8 	.word	0x08008ae8
 80023d8:	08008aec 	.word	0x08008aec
 80023dc:	08008af0 	.word	0x08008af0
 80023e0:	08008af4 	.word	0x08008af4
 80023e4:	20000004 	.word	0x20000004
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023ee:	2200      	movs	r2, #0
 80023f0:	f7ff fd78 	bl	8001ee4 <Show_Str>

	LCD_Fill(keypad.b6[0], keypad.b6[2], keypad.b6[1], keypad.b6[3], keypad.b6[4]);
 80023f4:	4bc0      	ldr	r3, [pc, #768]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80023f6:	8f98      	ldrh	r0, [r3, #60]	@ 0x3c
 80023f8:	4bbf      	ldr	r3, [pc, #764]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80023fa:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 80023fe:	4bbe      	ldr	r3, [pc, #760]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 8002400:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8002402:	4bbd      	ldr	r3, [pc, #756]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 8002404:	f8b3 4042 	ldrh.w	r4, [r3, #66]	@ 0x42
 8002408:	4bbb      	ldr	r3, [pc, #748]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 800240a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	4623      	mov	r3, r4
 8002412:	f7ff fc3f 	bl	8001c94 <LCD_Fill>
	Show_Str((keypad.b6[0] + ((keypad.b6[1] - keypad.b6[0]) - strlen(b6)*5)/2), (keypad.b6[2]+ 5), BLACK, WHITE, b6, 16, 1);
 8002416:	4bb8      	ldr	r3, [pc, #736]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 8002418:	8f9c      	ldrh	r4, [r3, #60]	@ 0x3c
 800241a:	4bb7      	ldr	r3, [pc, #732]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 800241c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800241e:	461a      	mov	r2, r3
 8002420:	4bb5      	ldr	r3, [pc, #724]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 8002422:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	461d      	mov	r5, r3
 8002428:	69f8      	ldr	r0, [r7, #28]
 800242a:	f7fd fee3 	bl	80001f4 <strlen>
 800242e:	4602      	mov	r2, r0
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	1aeb      	subs	r3, r5, r3
 8002438:	085b      	lsrs	r3, r3, #1
 800243a:	b29b      	uxth	r3, r3
 800243c:	4423      	add	r3, r4
 800243e:	b298      	uxth	r0, r3
 8002440:	4bad      	ldr	r3, [pc, #692]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 8002442:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002446:	3305      	adds	r3, #5
 8002448:	b299      	uxth	r1, r3
 800244a:	2301      	movs	r3, #1
 800244c:	9302      	str	r3, [sp, #8]
 800244e:	2310      	movs	r3, #16
 8002450:	9301      	str	r3, [sp, #4]
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800245a:	2200      	movs	r2, #0
 800245c:	f7ff fd42 	bl	8001ee4 <Show_Str>

	LCD_Fill(keypad.b7[0], keypad.b7[2], keypad.b7[1], keypad.b7[3], keypad.b7[4]);
 8002460:	4ba5      	ldr	r3, [pc, #660]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 8002462:	f8b3 0046 	ldrh.w	r0, [r3, #70]	@ 0x46
 8002466:	4ba4      	ldr	r3, [pc, #656]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 8002468:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 800246c:	4ba2      	ldr	r3, [pc, #648]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 800246e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002472:	4ba1      	ldr	r3, [pc, #644]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 8002474:	f8b3 404c 	ldrh.w	r4, [r3, #76]	@ 0x4c
 8002478:	4b9f      	ldr	r3, [pc, #636]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 800247a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	4623      	mov	r3, r4
 8002482:	f7ff fc07 	bl	8001c94 <LCD_Fill>
	Show_Str((keypad.b7[0] + ((keypad.b7[1] - keypad.b7[0]) - strlen(b7)*5)/2), (keypad.b7[2]+ 5), BLACK, WHITE, b7, 16, 1);
 8002486:	4b9c      	ldr	r3, [pc, #624]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 8002488:	f8b3 4046 	ldrh.w	r4, [r3, #70]	@ 0x46
 800248c:	4b9a      	ldr	r3, [pc, #616]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 800248e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002492:	461a      	mov	r2, r3
 8002494:	4b98      	ldr	r3, [pc, #608]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 8002496:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	461d      	mov	r5, r3
 800249e:	69b8      	ldr	r0, [r7, #24]
 80024a0:	f7fd fea8 	bl	80001f4 <strlen>
 80024a4:	4602      	mov	r2, r0
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	1aeb      	subs	r3, r5, r3
 80024ae:	085b      	lsrs	r3, r3, #1
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	4423      	add	r3, r4
 80024b4:	b298      	uxth	r0, r3
 80024b6:	4b90      	ldr	r3, [pc, #576]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80024b8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80024bc:	3305      	adds	r3, #5
 80024be:	b299      	uxth	r1, r3
 80024c0:	2301      	movs	r3, #1
 80024c2:	9302      	str	r3, [sp, #8]
 80024c4:	2310      	movs	r3, #16
 80024c6:	9301      	str	r3, [sp, #4]
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024d0:	2200      	movs	r2, #0
 80024d2:	f7ff fd07 	bl	8001ee4 <Show_Str>

	LCD_Fill(keypad.b8[0], keypad.b8[2], keypad.b8[1], keypad.b8[3], keypad.b8[4]);
 80024d6:	4b88      	ldr	r3, [pc, #544]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80024d8:	f8b3 0050 	ldrh.w	r0, [r3, #80]	@ 0x50
 80024dc:	4b86      	ldr	r3, [pc, #536]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80024de:	f8b3 1054 	ldrh.w	r1, [r3, #84]	@ 0x54
 80024e2:	4b85      	ldr	r3, [pc, #532]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80024e4:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 80024e8:	4b83      	ldr	r3, [pc, #524]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80024ea:	f8b3 4056 	ldrh.w	r4, [r3, #86]	@ 0x56
 80024ee:	4b82      	ldr	r3, [pc, #520]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80024f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	4623      	mov	r3, r4
 80024f8:	f7ff fbcc 	bl	8001c94 <LCD_Fill>
	Show_Str((keypad.b8[0] + ((keypad.b8[1] - keypad.b8[0]) - strlen(b8)*5)/2), (keypad.b8[2]+ 5), BLACK, WHITE, b8, 16, 1);
 80024fc:	4b7e      	ldr	r3, [pc, #504]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80024fe:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8002502:	4b7d      	ldr	r3, [pc, #500]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 8002504:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002508:	461a      	mov	r2, r3
 800250a:	4b7b      	ldr	r3, [pc, #492]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 800250c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	461d      	mov	r5, r3
 8002514:	6978      	ldr	r0, [r7, #20]
 8002516:	f7fd fe6d 	bl	80001f4 <strlen>
 800251a:	4602      	mov	r2, r0
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	1aeb      	subs	r3, r5, r3
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	b29b      	uxth	r3, r3
 8002528:	4423      	add	r3, r4
 800252a:	b298      	uxth	r0, r3
 800252c:	4b72      	ldr	r3, [pc, #456]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 800252e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002532:	3305      	adds	r3, #5
 8002534:	b299      	uxth	r1, r3
 8002536:	2301      	movs	r3, #1
 8002538:	9302      	str	r3, [sp, #8]
 800253a:	2310      	movs	r3, #16
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002546:	2200      	movs	r2, #0
 8002548:	f7ff fccc 	bl	8001ee4 <Show_Str>

	LCD_Fill(keypad.b9[0], keypad.b9[2], keypad.b9[1], keypad.b9[3], keypad.b9[4]);
 800254c:	4b6a      	ldr	r3, [pc, #424]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 800254e:	f8b3 005a 	ldrh.w	r0, [r3, #90]	@ 0x5a
 8002552:	4b69      	ldr	r3, [pc, #420]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 8002554:	f8b3 105e 	ldrh.w	r1, [r3, #94]	@ 0x5e
 8002558:	4b67      	ldr	r3, [pc, #412]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 800255a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800255e:	4b66      	ldr	r3, [pc, #408]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 8002560:	f8b3 4060 	ldrh.w	r4, [r3, #96]	@ 0x60
 8002564:	4b64      	ldr	r3, [pc, #400]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 8002566:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	4623      	mov	r3, r4
 800256e:	f7ff fb91 	bl	8001c94 <LCD_Fill>
	Show_Str((keypad.b9[0] + ((keypad.b9[1] - keypad.b9[0]) - strlen(b9)*5)/2), (keypad.b9[2]+ 5), BLACK, WHITE, b9, 16, 1);
 8002572:	4b61      	ldr	r3, [pc, #388]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 8002574:	f8b3 405a 	ldrh.w	r4, [r3, #90]	@ 0x5a
 8002578:	4b5f      	ldr	r3, [pc, #380]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 800257a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800257e:	461a      	mov	r2, r3
 8002580:	4b5d      	ldr	r3, [pc, #372]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 8002582:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	461d      	mov	r5, r3
 800258a:	6938      	ldr	r0, [r7, #16]
 800258c:	f7fd fe32 	bl	80001f4 <strlen>
 8002590:	4602      	mov	r2, r0
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	1aeb      	subs	r3, r5, r3
 800259a:	085b      	lsrs	r3, r3, #1
 800259c:	b29b      	uxth	r3, r3
 800259e:	4423      	add	r3, r4
 80025a0:	b298      	uxth	r0, r3
 80025a2:	4b55      	ldr	r3, [pc, #340]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80025a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80025a8:	3305      	adds	r3, #5
 80025aa:	b299      	uxth	r1, r3
 80025ac:	2301      	movs	r3, #1
 80025ae:	9302      	str	r3, [sp, #8]
 80025b0:	2310      	movs	r3, #16
 80025b2:	9301      	str	r3, [sp, #4]
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80025bc:	2200      	movs	r2, #0
 80025be:	f7ff fc91 	bl	8001ee4 <Show_Str>

	LCD_Fill(keypad.clr[0], keypad.clr[2], keypad.clr[1], keypad.clr[3], keypad.clr[4]);
 80025c2:	4b4d      	ldr	r3, [pc, #308]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80025c4:	f8b3 006e 	ldrh.w	r0, [r3, #110]	@ 0x6e
 80025c8:	4b4b      	ldr	r3, [pc, #300]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80025ca:	f8b3 1072 	ldrh.w	r1, [r3, #114]	@ 0x72
 80025ce:	4b4a      	ldr	r3, [pc, #296]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80025d0:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 80025d4:	4b48      	ldr	r3, [pc, #288]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80025d6:	f8b3 4074 	ldrh.w	r4, [r3, #116]	@ 0x74
 80025da:	4b47      	ldr	r3, [pc, #284]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80025dc:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	4623      	mov	r3, r4
 80025e4:	f7ff fb56 	bl	8001c94 <LCD_Fill>
	Show_Str((keypad.clr[0] + ((keypad.clr[1] - keypad.clr[0]) - strlen(clr)*5)/3), (keypad.clr[2]+ 5), BLACK, WHITE, clr, 16, 1);
 80025e8:	4b43      	ldr	r3, [pc, #268]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80025ea:	f8b3 406e 	ldrh.w	r4, [r3, #110]	@ 0x6e
 80025ee:	4b42      	ldr	r3, [pc, #264]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80025f0:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80025f4:	461a      	mov	r2, r3
 80025f6:	4b40      	ldr	r3, [pc, #256]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80025f8:	f8b3 306e 	ldrh.w	r3, [r3, #110]	@ 0x6e
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	461d      	mov	r5, r3
 8002600:	68b8      	ldr	r0, [r7, #8]
 8002602:	f7fd fdf7 	bl	80001f4 <strlen>
 8002606:	4602      	mov	r2, r0
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	1aeb      	subs	r3, r5, r3
 8002610:	4a3a      	ldr	r2, [pc, #232]	@ (80026fc <LCD_DrawKeyPad+0x5d4>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	085b      	lsrs	r3, r3, #1
 8002618:	b29b      	uxth	r3, r3
 800261a:	4423      	add	r3, r4
 800261c:	b298      	uxth	r0, r3
 800261e:	4b36      	ldr	r3, [pc, #216]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 8002620:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8002624:	3305      	adds	r3, #5
 8002626:	b299      	uxth	r1, r3
 8002628:	2301      	movs	r3, #1
 800262a:	9302      	str	r3, [sp, #8]
 800262c:	2310      	movs	r3, #16
 800262e:	9301      	str	r3, [sp, #4]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002638:	2200      	movs	r2, #0
 800263a:	f7ff fc53 	bl	8001ee4 <Show_Str>

	LCD_Fill(keypad.b0[0], keypad.b0[2], keypad.b0[1], keypad.b0[3], keypad.b0[4]);
 800263e:	4b2e      	ldr	r3, [pc, #184]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 8002640:	f8b3 0064 	ldrh.w	r0, [r3, #100]	@ 0x64
 8002644:	4b2c      	ldr	r3, [pc, #176]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 8002646:	f8b3 1068 	ldrh.w	r1, [r3, #104]	@ 0x68
 800264a:	4b2b      	ldr	r3, [pc, #172]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 800264c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8002650:	4b29      	ldr	r3, [pc, #164]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 8002652:	f8b3 406a 	ldrh.w	r4, [r3, #106]	@ 0x6a
 8002656:	4b28      	ldr	r3, [pc, #160]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 8002658:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	4623      	mov	r3, r4
 8002660:	f7ff fb18 	bl	8001c94 <LCD_Fill>
	Show_Str((keypad.b0[0] + ((keypad.b0[1] - keypad.b0[0]) - strlen(b0)*5)/2), (keypad.b0[2]+ 5), BLACK, WHITE, b0, 16, 1);
 8002664:	4b24      	ldr	r3, [pc, #144]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 8002666:	f8b3 4064 	ldrh.w	r4, [r3, #100]	@ 0x64
 800266a:	4b23      	ldr	r3, [pc, #140]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 800266c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8002670:	461a      	mov	r2, r3
 8002672:	4b21      	ldr	r3, [pc, #132]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 8002674:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	461d      	mov	r5, r3
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f7fd fdb9 	bl	80001f4 <strlen>
 8002682:	4602      	mov	r2, r0
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	1aeb      	subs	r3, r5, r3
 800268c:	085b      	lsrs	r3, r3, #1
 800268e:	b29b      	uxth	r3, r3
 8002690:	4423      	add	r3, r4
 8002692:	b298      	uxth	r0, r3
 8002694:	4b18      	ldr	r3, [pc, #96]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 8002696:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800269a:	3305      	adds	r3, #5
 800269c:	b299      	uxth	r1, r3
 800269e:	2301      	movs	r3, #1
 80026a0:	9302      	str	r3, [sp, #8]
 80026a2:	2310      	movs	r3, #16
 80026a4:	9301      	str	r3, [sp, #4]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026ae:	2200      	movs	r2, #0
 80026b0:	f7ff fc18 	bl	8001ee4 <Show_Str>

	LCD_Fill(keypad.set[0], keypad.set[2], keypad.set[1], keypad.set[3], keypad.set[4]);
 80026b4:	4b10      	ldr	r3, [pc, #64]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80026b6:	f8b3 0078 	ldrh.w	r0, [r3, #120]	@ 0x78
 80026ba:	4b0f      	ldr	r3, [pc, #60]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80026bc:	f8b3 107c 	ldrh.w	r1, [r3, #124]	@ 0x7c
 80026c0:	4b0d      	ldr	r3, [pc, #52]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80026c2:	f8b3 207a 	ldrh.w	r2, [r3, #122]	@ 0x7a
 80026c6:	4b0c      	ldr	r3, [pc, #48]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80026c8:	f8b3 407e 	ldrh.w	r4, [r3, #126]	@ 0x7e
 80026cc:	4b0a      	ldr	r3, [pc, #40]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80026ce:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	4623      	mov	r3, r4
 80026d6:	f7ff fadd 	bl	8001c94 <LCD_Fill>
	Show_Str((keypad.set[0] + ((keypad.set[1] - keypad.set[0]) - strlen(set)*5)/3), (keypad.set[2]+ 5), BLACK, WHITE, set, 16, 1);
 80026da:	4b07      	ldr	r3, [pc, #28]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80026dc:	f8b3 4078 	ldrh.w	r4, [r3, #120]	@ 0x78
 80026e0:	4b05      	ldr	r3, [pc, #20]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80026e2:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 80026e6:	461a      	mov	r2, r3
 80026e8:	4b03      	ldr	r3, [pc, #12]	@ (80026f8 <LCD_DrawKeyPad+0x5d0>)
 80026ea:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	461d      	mov	r5, r3
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	e004      	b.n	8002700 <LCD_DrawKeyPad+0x5d8>
 80026f6:	bf00      	nop
 80026f8:	20000004 	.word	0x20000004
 80026fc:	aaaaaaab 	.word	0xaaaaaaab
 8002700:	f7fd fd78 	bl	80001f4 <strlen>
 8002704:	4602      	mov	r2, r0
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	1aeb      	subs	r3, r5, r3
 800270e:	4a0d      	ldr	r2, [pc, #52]	@ (8002744 <LCD_DrawKeyPad+0x61c>)
 8002710:	fba2 2303 	umull	r2, r3, r2, r3
 8002714:	085b      	lsrs	r3, r3, #1
 8002716:	b29b      	uxth	r3, r3
 8002718:	4423      	add	r3, r4
 800271a:	b298      	uxth	r0, r3
 800271c:	4b0a      	ldr	r3, [pc, #40]	@ (8002748 <LCD_DrawKeyPad+0x620>)
 800271e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8002722:	3305      	adds	r3, #5
 8002724:	b299      	uxth	r1, r3
 8002726:	2301      	movs	r3, #1
 8002728:	9302      	str	r3, [sp, #8]
 800272a:	2310      	movs	r3, #16
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002736:	2200      	movs	r2, #0
 8002738:	f7ff fbd4 	bl	8001ee4 <Show_Str>

}
 800273c:	bf00      	nop
 800273e:	3738      	adds	r7, #56	@ 0x38
 8002740:	46bd      	mov	sp, r7
 8002742:	bdb0      	pop	{r4, r5, r7, pc}
 8002744:	aaaaaaab 	.word	0xaaaaaaab
 8002748:	20000004 	.word	0x20000004

0800274c <LCD_UpdateTemperature>:



void LCD_UpdateTemperature(DS18B20 *sensor, float temperature){
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	ed87 0a00 	vstr	s0, [r7]
	//if(sensor->delta !=0){
		switch (sensor->pos){
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	2b07      	cmp	r3, #7
 800275e:	d00b      	beq.n	8002778 <LCD_UpdateTemperature+0x2c>
 8002760:	2b07      	cmp	r3, #7
 8002762:	dc10      	bgt.n	8002786 <LCD_UpdateTemperature+0x3a>
 8002764:	2b05      	cmp	r3, #5
 8002766:	d00c      	beq.n	8002782 <LCD_UpdateTemperature+0x36>
 8002768:	2b06      	cmp	r3, #6
 800276a:	d000      	beq.n	800276e <LCD_UpdateTemperature+0x22>
			case 7:
				LCD_UpdateTerminalWater(temperature);
				break;
		}
	//}
	return;
 800276c:	e00b      	b.n	8002786 <LCD_UpdateTemperature+0x3a>
				LCD_UpdateHotWater(temperature);
 800276e:	ed97 0a00 	vldr	s0, [r7]
 8002772:	f000 f851 	bl	8002818 <LCD_UpdateHotWater>
				break;
 8002776:	e005      	b.n	8002784 <LCD_UpdateTemperature+0x38>
				LCD_UpdateTerminalWater(temperature);
 8002778:	ed97 0a00 	vldr	s0, [r7]
 800277c:	f000 f8d4 	bl	8002928 <LCD_UpdateTerminalWater>
				break;
 8002780:	e000      	b.n	8002784 <LCD_UpdateTemperature+0x38>
				break;
 8002782:	bf00      	nop
	return;
 8002784:	bf00      	nop
 8002786:	bf00      	nop
}
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <LCD_UpdateTempSet>:

void LCD_UpdateTempSet(float temp){
 8002790:	b580      	push	{r7, lr}
 8002792:	b090      	sub	sp, #64	@ 0x40
 8002794:	af04      	add	r7, sp, #16
 8002796:	ed87 0a01 	vstr	s0, [r7, #4]
	char num[30];
	int integer = (int)temp;
 800279a:	edd7 7a01 	vldr	s15, [r7, #4]
 800279e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027a2:	ee17 3a90 	vmov	r3, s15
 80027a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int decimal = (int)((temp - integer)*10000);
 80027a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027aa:	ee07 3a90 	vmov	s15, r3
 80027ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80027b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ba:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002810 <LCD_UpdateTempSet+0x80>
 80027be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027c6:	ee17 3a90 	vmov	r3, s15
 80027ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	sprintf(num, "%d.%d *C", integer, decimal);
 80027cc:	f107 0008 	add.w	r0, r7, #8
 80027d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027d4:	490f      	ldr	r1, [pc, #60]	@ (8002814 <LCD_UpdateTempSet+0x84>)
 80027d6:	f005 fb81 	bl	8007edc <siprintf>
	LCD_Fill(90, 50, 12*12+90, 69, WHITE);
 80027da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	2345      	movs	r3, #69	@ 0x45
 80027e2:	22ea      	movs	r2, #234	@ 0xea
 80027e4:	2132      	movs	r1, #50	@ 0x32
 80027e6:	205a      	movs	r0, #90	@ 0x5a
 80027e8:	f7ff fa54 	bl	8001c94 <LCD_Fill>
	Show_Str(90, 50, BLACK, WHITE, num, 12, 1);
 80027ec:	2301      	movs	r3, #1
 80027ee:	9302      	str	r3, [sp, #8]
 80027f0:	230c      	movs	r3, #12
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	f107 0308 	add.w	r3, r7, #8
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027fe:	2200      	movs	r2, #0
 8002800:	2132      	movs	r1, #50	@ 0x32
 8002802:	205a      	movs	r0, #90	@ 0x5a
 8002804:	f7ff fb6e 	bl	8001ee4 <Show_Str>
}
 8002808:	bf00      	nop
 800280a:	3730      	adds	r7, #48	@ 0x30
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	461c4000 	.word	0x461c4000
 8002814:	08008af8 	.word	0x08008af8

08002818 <LCD_UpdateHotWater>:

void LCD_UpdateHotWater(float temp){
 8002818:	b580      	push	{r7, lr}
 800281a:	b090      	sub	sp, #64	@ 0x40
 800281c:	af04      	add	r7, sp, #16
 800281e:	ed87 0a01 	vstr	s0, [r7, #4]
	char num[30];
	int integer = (int)temp;
 8002822:	edd7 7a01 	vldr	s15, [r7, #4]
 8002826:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800282a:	ee17 3a90 	vmov	r3, s15
 800282e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int decimal = (int)((temp - integer)*10000);
 8002830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002832:	ee07 3a90 	vmov	s15, r3
 8002836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800283a:	ed97 7a01 	vldr	s14, [r7, #4]
 800283e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002842:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002898 <LCD_UpdateHotWater+0x80>
 8002846:	ee67 7a87 	vmul.f32	s15, s15, s14
 800284a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800284e:	ee17 3a90 	vmov	r3, s15
 8002852:	62bb      	str	r3, [r7, #40]	@ 0x28
	LCD_Fill(80, 70, 12*12+60, 89, WHITE);
 8002854:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	2359      	movs	r3, #89	@ 0x59
 800285c:	22cc      	movs	r2, #204	@ 0xcc
 800285e:	2146      	movs	r1, #70	@ 0x46
 8002860:	2050      	movs	r0, #80	@ 0x50
 8002862:	f7ff fa17 	bl	8001c94 <LCD_Fill>
	sprintf(num, "%d.%d *C", integer, decimal);
 8002866:	f107 0008 	add.w	r0, r7, #8
 800286a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800286c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800286e:	490b      	ldr	r1, [pc, #44]	@ (800289c <LCD_UpdateHotWater+0x84>)
 8002870:	f005 fb34 	bl	8007edc <siprintf>
	Show_Str(90, 73, BLACK, WHITE, num, 12, 1);
 8002874:	2301      	movs	r3, #1
 8002876:	9302      	str	r3, [sp, #8]
 8002878:	230c      	movs	r3, #12
 800287a:	9301      	str	r3, [sp, #4]
 800287c:	f107 0308 	add.w	r3, r7, #8
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002886:	2200      	movs	r2, #0
 8002888:	2149      	movs	r1, #73	@ 0x49
 800288a:	205a      	movs	r0, #90	@ 0x5a
 800288c:	f7ff fb2a 	bl	8001ee4 <Show_Str>
}
 8002890:	bf00      	nop
 8002892:	3730      	adds	r7, #48	@ 0x30
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	461c4000 	.word	0x461c4000
 800289c:	08008af8 	.word	0x08008af8

080028a0 <LCD_STALL_FLAG>:

void LCD_STALL_FLAG(float temp){
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b090      	sub	sp, #64	@ 0x40
 80028a4:	af04      	add	r7, sp, #16
 80028a6:	ed87 0a01 	vstr	s0, [r7, #4]
	char num[30];
	int integer = (int)temp;
 80028aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80028ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028b2:	ee17 3a90 	vmov	r3, s15
 80028b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int decimal = (int)((temp - integer)*10000);
 80028b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ba:	ee07 3a90 	vmov	s15, r3
 80028be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028c2:	ed97 7a01 	vldr	s14, [r7, #4]
 80028c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ca:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002920 <LCD_STALL_FLAG+0x80>
 80028ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028d6:	ee17 3a90 	vmov	r3, s15
 80028da:	62bb      	str	r3, [r7, #40]	@ 0x28
	LCD_Fill(80, 70, 12*12+60, 89, RED);
 80028dc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	2359      	movs	r3, #89	@ 0x59
 80028e4:	22cc      	movs	r2, #204	@ 0xcc
 80028e6:	2146      	movs	r1, #70	@ 0x46
 80028e8:	2050      	movs	r0, #80	@ 0x50
 80028ea:	f7ff f9d3 	bl	8001c94 <LCD_Fill>
	sprintf(num, "%d.%d *C | STALL", integer, decimal);
 80028ee:	f107 0008 	add.w	r0, r7, #8
 80028f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028f6:	490b      	ldr	r1, [pc, #44]	@ (8002924 <LCD_STALL_FLAG+0x84>)
 80028f8:	f005 faf0 	bl	8007edc <siprintf>
	Show_Str(90, 73, BLACK, WHITE, num, 12, 1);
 80028fc:	2301      	movs	r3, #1
 80028fe:	9302      	str	r3, [sp, #8]
 8002900:	230c      	movs	r3, #12
 8002902:	9301      	str	r3, [sp, #4]
 8002904:	f107 0308 	add.w	r3, r7, #8
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800290e:	2200      	movs	r2, #0
 8002910:	2149      	movs	r1, #73	@ 0x49
 8002912:	205a      	movs	r0, #90	@ 0x5a
 8002914:	f7ff fae6 	bl	8001ee4 <Show_Str>
}
 8002918:	bf00      	nop
 800291a:	3730      	adds	r7, #48	@ 0x30
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	461c4000 	.word	0x461c4000
 8002924:	08008b04 	.word	0x08008b04

08002928 <LCD_UpdateTerminalWater>:

void LCD_UpdateTerminalWater(float temp){
 8002928:	b580      	push	{r7, lr}
 800292a:	b090      	sub	sp, #64	@ 0x40
 800292c:	af04      	add	r7, sp, #16
 800292e:	ed87 0a01 	vstr	s0, [r7, #4]
	char num[30];
	int integer = (int)temp;
 8002932:	edd7 7a01 	vldr	s15, [r7, #4]
 8002936:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800293a:	ee17 3a90 	vmov	r3, s15
 800293e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int decimal = (int)((temp - integer)*10000);
 8002940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002942:	ee07 3a90 	vmov	s15, r3
 8002946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800294a:	ed97 7a01 	vldr	s14, [r7, #4]
 800294e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002952:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80029a8 <LCD_UpdateTerminalWater+0x80>
 8002956:	ee67 7a87 	vmul.f32	s15, s15, s14
 800295a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800295e:	ee17 3a90 	vmov	r3, s15
 8002962:	62bb      	str	r3, [r7, #40]	@ 0x28
	LCD_Fill(90, 90, 12*12+90, 109, WHITE);
 8002964:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	236d      	movs	r3, #109	@ 0x6d
 800296c:	22ea      	movs	r2, #234	@ 0xea
 800296e:	215a      	movs	r1, #90	@ 0x5a
 8002970:	205a      	movs	r0, #90	@ 0x5a
 8002972:	f7ff f98f 	bl	8001c94 <LCD_Fill>
	sprintf(num, "%d.%d *C", integer, decimal);
 8002976:	f107 0008 	add.w	r0, r7, #8
 800297a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800297c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800297e:	490b      	ldr	r1, [pc, #44]	@ (80029ac <LCD_UpdateTerminalWater+0x84>)
 8002980:	f005 faac 	bl	8007edc <siprintf>
	Show_Str(90, 90, BLACK, WHITE, num, 12, 1);
 8002984:	2301      	movs	r3, #1
 8002986:	9302      	str	r3, [sp, #8]
 8002988:	230c      	movs	r3, #12
 800298a:	9301      	str	r3, [sp, #4]
 800298c:	f107 0308 	add.w	r3, r7, #8
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002996:	2200      	movs	r2, #0
 8002998:	215a      	movs	r1, #90	@ 0x5a
 800299a:	205a      	movs	r0, #90	@ 0x5a
 800299c:	f7ff faa2 	bl	8001ee4 <Show_Str>
}
 80029a0:	bf00      	nop
 80029a2:	3730      	adds	r7, #48	@ 0x30
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	461c4000 	.word	0x461c4000
 80029ac:	08008af8 	.word	0x08008af8

080029b0 <LCD_UpdateOpening>:

void LCD_UpdateOpening(int steps){
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08e      	sub	sp, #56	@ 0x38
 80029b4:	af04      	add	r7, sp, #16
 80029b6:	6078      	str	r0, [r7, #4]
	char num[30];
	LCD_Fill(90, 110, 130, 119, WHITE);
 80029b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	2377      	movs	r3, #119	@ 0x77
 80029c0:	2282      	movs	r2, #130	@ 0x82
 80029c2:	216e      	movs	r1, #110	@ 0x6e
 80029c4:	205a      	movs	r0, #90	@ 0x5a
 80029c6:	f7ff f965 	bl	8001c94 <LCD_Fill>
	//LCD_Fill(50, 130, 100, 139, WHITE);
	sprintf(num, "%d", steps);
 80029ca:	f107 0308 	add.w	r3, r7, #8
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	490a      	ldr	r1, [pc, #40]	@ (80029fc <LCD_UpdateOpening+0x4c>)
 80029d2:	4618      	mov	r0, r3
 80029d4:	f005 fa82 	bl	8007edc <siprintf>
	Show_Str(94, 110, BLACK, WHITE, num, 12, 1);
 80029d8:	2301      	movs	r3, #1
 80029da:	9302      	str	r3, [sp, #8]
 80029dc:	230c      	movs	r3, #12
 80029de:	9301      	str	r3, [sp, #4]
 80029e0:	f107 0308 	add.w	r3, r7, #8
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029ea:	2200      	movs	r2, #0
 80029ec:	216e      	movs	r1, #110	@ 0x6e
 80029ee:	205e      	movs	r0, #94	@ 0x5e
 80029f0:	f7ff fa78 	bl	8001ee4 <Show_Str>
}
 80029f4:	bf00      	nop
 80029f6:	3728      	adds	r7, #40	@ 0x28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	08008b18 	.word	0x08008b18

08002a00 <LCD_UpdateFlash>:

void LCD_UpdateFlash(int steps){
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08e      	sub	sp, #56	@ 0x38
 8002a04:	af04      	add	r7, sp, #16
 8002a06:	6078      	str	r0, [r7, #4]
	char num[30];
	LCD_Fill(50, 130, 100, 139, WHITE);
 8002a08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	238b      	movs	r3, #139	@ 0x8b
 8002a10:	2264      	movs	r2, #100	@ 0x64
 8002a12:	2182      	movs	r1, #130	@ 0x82
 8002a14:	2032      	movs	r0, #50	@ 0x32
 8002a16:	f7ff f93d 	bl	8001c94 <LCD_Fill>
	sprintf(num, "%d", steps);
 8002a1a:	f107 0308 	add.w	r3, r7, #8
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	490a      	ldr	r1, [pc, #40]	@ (8002a4c <LCD_UpdateFlash+0x4c>)
 8002a22:	4618      	mov	r0, r3
 8002a24:	f005 fa5a 	bl	8007edc <siprintf>
	Show_Str(54, 130, BLACK, WHITE, num, 12, 1);
 8002a28:	2301      	movs	r3, #1
 8002a2a:	9302      	str	r3, [sp, #8]
 8002a2c:	230c      	movs	r3, #12
 8002a2e:	9301      	str	r3, [sp, #4]
 8002a30:	f107 0308 	add.w	r3, r7, #8
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2182      	movs	r1, #130	@ 0x82
 8002a3e:	2036      	movs	r0, #54	@ 0x36
 8002a40:	f7ff fa50 	bl	8001ee4 <Show_Str>
}
 8002a44:	bf00      	nop
 8002a46:	3728      	adds	r7, #40	@ 0x28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	08008b18 	.word	0x08008b18

08002a50 <LCD_UpdateTypedTemp>:

void LCD_UpdateTypedTemp(char *c){
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af04      	add	r7, sp, #16
 8002a56:	6078      	str	r0, [r7, #4]
	LCD_Fill(190, 130, 240, 145, WHITE);
 8002a58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	2391      	movs	r3, #145	@ 0x91
 8002a60:	22f0      	movs	r2, #240	@ 0xf0
 8002a62:	2182      	movs	r1, #130	@ 0x82
 8002a64:	20be      	movs	r0, #190	@ 0xbe
 8002a66:	f7ff f915 	bl	8001c94 <LCD_Fill>
	Show_Str(190, 130, BLACK, WHITE, c, 12, 1);
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	9302      	str	r3, [sp, #8]
 8002a6e:	230c      	movs	r3, #12
 8002a70:	9301      	str	r3, [sp, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2182      	movs	r1, #130	@ 0x82
 8002a7e:	20be      	movs	r0, #190	@ 0xbe
 8002a80:	f7ff fa30 	bl	8001ee4 <Show_Str>
}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <LCD_typeDebug>:

void LCD_typeDebug(char *c){
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af04      	add	r7, sp, #16
 8002a92:	6078      	str	r0, [r7, #4]
	LCD_Fill(20, 30, 240, 50, WHITE);
 8002a94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	2332      	movs	r3, #50	@ 0x32
 8002a9c:	22f0      	movs	r2, #240	@ 0xf0
 8002a9e:	211e      	movs	r1, #30
 8002aa0:	2014      	movs	r0, #20
 8002aa2:	f7ff f8f7 	bl	8001c94 <LCD_Fill>
	Show_Str(20, 30, BLACK, WHITE, c, 12, 1);
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	9302      	str	r3, [sp, #8]
 8002aaa:	230c      	movs	r3, #12
 8002aac:	9301      	str	r3, [sp, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	211e      	movs	r1, #30
 8002aba:	2014      	movs	r0, #20
 8002abc:	f7ff fa12 	bl	8001ee4 <Show_Str>
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <SCAN_HANDLE>:

void SCAN_HANDLE(DS18B20 *hot, Valve *valve, SPI_HandleTypeDef *spi, UART_HandleTypeDef *uart, Button *button,
					Pressed *pressed, uint8_t *act, uint8_t *flag, Page *page){
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	603b      	str	r3, [r7, #0]

	scan(spi, uart, button, pressed, true);
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002adc:	6a3a      	ldr	r2, [r7, #32]
 8002ade:	6839      	ldr	r1, [r7, #0]
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f8e9 	bl	8002cb8 <scan>
    if(button->value != -1 && button->valid == true){
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aee:	d077      	beq.n	8002be0 <SCAN_HANDLE+0x118>
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d072      	beq.n	8002be0 <SCAN_HANDLE+0x118>
    	memset(button->c, 0, sizeof(button->c));
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	330c      	adds	r3, #12
 8002afe:	221e      	movs	r2, #30
 8002b00:	2100      	movs	r1, #0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f005 fa0a 	bl	8007f1c <memset>
    	button->temp_set = button->data;
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	609a      	str	r2, [r3, #8]
    	button->data = (!button->rst)?button->data*10 + button->value: 0;
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8002b16:	f083 0301 	eor.w	r3, r3, #1
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <SCAN_HANDLE+0x6e>
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4413      	add	r3, r2
 8002b34:	e000      	b.n	8002b38 <SCAN_HANDLE+0x70>
 8002b36:	2300      	movs	r3, #0
 8002b38:	6a3a      	ldr	r2, [r7, #32]
 8002b3a:	6053      	str	r3, [r2, #4]

    	/* Update typed value on the screen and reset flags*/
    	sprintf(button->c, "%d", button->data);
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	f103 000c 	add.w	r0, r3, #12
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	461a      	mov	r2, r3
 8002b48:	4927      	ldr	r1, [pc, #156]	@ (8002be8 <SCAN_HANDLE+0x120>)
 8002b4a:	f005 f9c7 	bl	8007edc <siprintf>

    	LCD_UpdateTypedTemp(button->c);
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	330c      	adds	r3, #12
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff ff7c 	bl	8002a50 <LCD_UpdateTypedTemp>
    	if(button->set){
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d02e      	beq.n	8002bc0 <SCAN_HANDLE+0xf8>
    		LCD_UpdateTempSet(button->temp_set);
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	ee07 3a90 	vmov	s15, r3
 8002b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b72:	f7ff fe0d 	bl	8002790 <LCD_UpdateTempSet>
    		*act = *act | TEMP_GET_TEMP_SET | TEMP_GET_VALV_APROX;
 8002b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	f043 030c 	orr.w	r3, r3, #12
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b82:	701a      	strb	r2, [r3, #0]
    		int calc = 250*((button->temp_set - COLD_TEMP)/((float)50 - COLD_TEMP));
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	3b0f      	subs	r3, #15
 8002b8a:	ee07 3a90 	vmov	s15, r3
 8002b8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b92:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8002bec <SCAN_HANDLE+0x124>
 8002b96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b9a:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002bf0 <SCAN_HANDLE+0x128>
 8002b9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ba2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ba6:	ee17 3a90 	vmov	r3, s15
 8002baa:	617b      	str	r3, [r7, #20]
    		valve->aprox = (int)calc;
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
    		command |= RUN;
 8002bb2:	4b10      	ldr	r3, [pc, #64]	@ (8002bf4 <SCAN_HANDLE+0x12c>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	f043 0320 	orr.w	r3, r3, #32
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf4 <SCAN_HANDLE+0x12c>)
 8002bbe:	701a      	strb	r2, [r3, #0]
    	}
    	button->valid = false;
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    	button->rst = false;
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    	button->value = -1;
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd6:	601a      	str	r2, [r3, #0]
    	button->set = false;
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    }
}
 8002be0:	bf00      	nop
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	08008b18 	.word	0x08008b18
 8002bec:	420c0000 	.word	0x420c0000
 8002bf0:	437a0000 	.word	0x437a0000
 8002bf4:	20000466 	.word	0x20000466

08002bf8 <LCD_HANDLE_PAGE_1>:

void LCD_HANDLE_PAGE_1(Page *page, uint8_t *act, uint8_t *command){
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]

	if((*act & TEMP_UPDATE) == TEMP_UPDATE){
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d027      	beq.n	8002c60 <LCD_HANDLE_PAGE_1+0x68>
		LCD_typeDebug("UPDATING TEMPERATURE");
 8002c10:	4827      	ldr	r0, [pc, #156]	@ (8002cb0 <LCD_HANDLE_PAGE_1+0xb8>)
 8002c12:	f7ff ff3b 	bl	8002a8c <LCD_typeDebug>
		LCD_UpdateTemperature(page->terminal_temp, page->terminal_temp->temperature);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c22:	eeb0 0a67 	vmov.f32	s0, s15
 8002c26:	4610      	mov	r0, r2
 8002c28:	f7ff fd90 	bl	800274c <LCD_UpdateTemperature>
		if((*command & STALL_START) == STALL_START){
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d008      	beq.n	8002c4a <LCD_HANDLE_PAGE_1+0x52>
		LCD_STALL_FLAG(page->hot_temp->temperature);}
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c40:	eeb0 0a67 	vmov.f32	s0, s15
 8002c44:	f7ff fe2c 	bl	80028a0 <LCD_STALL_FLAG>
 8002c48:	e00a      	b.n	8002c60 <LCD_HANDLE_PAGE_1+0x68>
		else{
			LCD_UpdateTemperature(page->hot_temp, page->hot_temp->temperature);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c56:	eeb0 0a67 	vmov.f32	s0, s15
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	f7ff fd76 	bl	800274c <LCD_UpdateTemperature>
	    }
	}

	if(page->valve->steps != page->valve->current_steps){
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d013      	beq.n	8002c98 <LCD_HANDLE_PAGE_1+0xa0>
		LCD_UpdateOpening(page->valve->steps);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fe9a 	bl	80029b0 <LCD_UpdateOpening>

		page->valve->current_steps = page->valve->steps;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	605a      	str	r2, [r3, #4]
		uint32_t *p = (uint32_t*)FLASH_ADDRESS;
 8002c88:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb4 <LCD_HANDLE_PAGE_1+0xbc>)
 8002c8a:	617b      	str	r3, [r7, #20]
		int val = *p;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	613b      	str	r3, [r7, #16]
		LCD_UpdateFlash(val);
 8002c92:	6938      	ldr	r0, [r7, #16]
 8002c94:	f7ff feb4 	bl	8002a00 <LCD_UpdateFlash>
	}

	*act = *act & (~TEMP_UPDATE);
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	f023 0301 	bic.w	r3, r3, #1
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	701a      	strb	r2, [r3, #0]

}
 8002ca6:	bf00      	nop
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	08008b1c 	.word	0x08008b1c
 8002cb4:	08060000 	.word	0x08060000

08002cb8 <scan>:
	WRITE_DATA(screen->end_y>>8);
	WRITE_DATA(0x00FF&screen->end_y);
}


void scan(SPI_HandleTypeDef *spi, UART_HandleTypeDef *uart, Button *button, Pressed *pressed,bool print){
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b0c6      	sub	sp, #280	@ 0x118
 8002cbc:	af04      	add	r7, sp, #16
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8002cc4:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 8002cc8:	6001      	str	r1, [r0, #0]
 8002cca:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8002cce:	f5a1 7182 	sub.w	r1, r1, #260	@ 0x104
 8002cd2:	600a      	str	r2, [r1, #0]
 8002cd4:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8002cd8:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8002cdc:	6013      	str	r3, [r2, #0]
	char temp1[30];
	char temp2[30];
	char buffer[50];

	/* X-POSITION*/
	a = 0x00;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
	a = START_BIT | X_POSITION;
 8002ce4:	23d0      	movs	r3, #208	@ 0xd0
 8002ce6:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
	//a = START_BIT | X_POSITION | MODE_8BIT;
	memset(buffer_X, 0, sizeof(buffer_X));
 8002cea:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002cee:	2232      	movs	r2, #50	@ 0x32
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f005 f912 	bl	8007f1c <memset>
	memset(buffer_Y, 0, sizeof(buffer_Y));
 8002cf8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002cfc:	2232      	movs	r2, #50	@ 0x32
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f005 f90b 	bl	8007f1c <memset>
	memset(data_X, 0, sizeof(data_X));
 8002d06:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f005 f904 	bl	8007f1c <memset>
	memset(data_Y, 0, sizeof(data_Y));
 8002d14:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002d18:	2202      	movs	r2, #2
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f005 f8fd 	bl	8007f1c <memset>
	memset(buffer, 0, sizeof(buffer));
 8002d22:	f107 0314 	add.w	r3, r7, #20
 8002d26:	2232      	movs	r2, #50	@ 0x32
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f005 f8f6 	bl	8007f1c <memset>
	memset(buff, 0, sizeof(buff));
 8002d30:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002d34:	220a      	movs	r2, #10
 8002d36:	2100      	movs	r1, #0
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f005 f8ef 	bl	8007f1c <memset>
	memset(temp1, 0, sizeof(temp1));
 8002d3e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002d42:	221e      	movs	r2, #30
 8002d44:	2100      	movs	r1, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	f005 f8e8 	bl	8007f1c <memset>
	memset(temp2, 0, sizeof(temp2));
 8002d4c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d50:	221e      	movs	r2, #30
 8002d52:	2100      	movs	r1, #0
 8002d54:	4618      	mov	r0, r3
 8002d56:	f005 f8e1 	bl	8007f1c <memset>

	T_CS_RESET; // @suppress("Statement has no effect")
 8002d5a:	4b7d      	ldr	r3, [pc, #500]	@ (8002f50 <scan+0x298>)
 8002d5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d60:	619a      	str	r2, [r3, #24]
	//T_IRQ_RESET;
	HAL_SPI_Transmit(&hspi4, &a, 1, 1000); // @suppress("Statement has no effect")
 8002d62:	f207 1103 	addw	r1, r7, #259	@ 0x103
 8002d66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	4879      	ldr	r0, [pc, #484]	@ (8002f54 <scan+0x29c>)
 8002d6e:	f002 fd90 	bl	8005892 <HAL_SPI_Transmit>
	//T_IRQ_SET;
	//T_IRQ_RESET;
	HAL_SPI_Receive(&hspi4, data_X, 2, 1000);
 8002d72:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8002d76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	4875      	ldr	r0, [pc, #468]	@ (8002f54 <scan+0x29c>)
 8002d7e:	f002 fecc 	bl	8005b1a <HAL_SPI_Receive>
	T_CS_SET;
 8002d82:	4b73      	ldr	r3, [pc, #460]	@ (8002f50 <scan+0x298>)
 8002d84:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d88:	619a      	str	r2, [r3, #24]
	//T_IRQ_SET;

	HAL_Delay(100);
 8002d8a:	2064      	movs	r0, #100	@ 0x64
 8002d8c:	f001 fb36 	bl	80043fc <HAL_Delay>
	/* Y-POSITION*/
	a = 0x01;
 8002d90:	2301      	movs	r3, #1
 8002d92:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
	a = START_BIT | Y_POSITION;
 8002d96:	2390      	movs	r3, #144	@ 0x90
 8002d98:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
	//a = START_BIT | Y_POSITION | MODE_8BIT;
	T_CS_RESET;
 8002d9c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f50 <scan+0x298>)
 8002d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002da2:	619a      	str	r2, [r3, #24]
	//T_IRQ_RESET;
	HAL_SPI_Transmit(&hspi4, &a, 1, 1000);
 8002da4:	f207 1103 	addw	r1, r7, #259	@ 0x103
 8002da8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dac:	2201      	movs	r2, #1
 8002dae:	4869      	ldr	r0, [pc, #420]	@ (8002f54 <scan+0x29c>)
 8002db0:	f002 fd6f 	bl	8005892 <HAL_SPI_Transmit>
	//T_IRQ_SET;
	//T_IRQ_RESET;
	HAL_SPI_Receive(&hspi4, data_Y, 2, 1000);
 8002db4:	f107 01fc 	add.w	r1, r7, #252	@ 0xfc
 8002db8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	4865      	ldr	r0, [pc, #404]	@ (8002f54 <scan+0x29c>)
 8002dc0:	f002 feab 	bl	8005b1a <HAL_SPI_Receive>
	T_CS_SET;
 8002dc4:	4b62      	ldr	r3, [pc, #392]	@ (8002f50 <scan+0x298>)
 8002dc6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002dca:	619a      	str	r2, [r3, #24]
	//T_IRQ_SET;

	uint16_t r_X = data_X[0] << 4 | (data_X[1] >> 3);
 8002dcc:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	b21a      	sxth	r2, r3
 8002dd4:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 8002dd8:	08db      	lsrs	r3, r3, #3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	b21b      	sxth	r3, r3
 8002dde:	4313      	orrs	r3, r2
 8002de0:	b21b      	sxth	r3, r3
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	827b      	strh	r3, [r7, #18]
	uint16_t r_Y = data_Y[0] << 4 | (data_Y[1] >> 3);
 8002de6:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	b21a      	sxth	r2, r3
 8002dee:	f897 30fd 	ldrb.w	r3, [r7, #253]	@ 0xfd
 8002df2:	08db      	lsrs	r3, r3, #3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	b21b      	sxth	r3, r3
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	b21b      	sxth	r3, r3
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	823b      	strh	r3, [r7, #16]
	read_col(pressed, &r_X);
 8002e00:	f107 0212 	add.w	r2, r7, #18
 8002e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002e08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	f000 f8a6 	bl	8002f60 <read_col>
	read_row(pressed, &r_Y);
 8002e14:	f107 0210 	add.w	r2, r7, #16
 8002e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002e1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002e20:	4611      	mov	r1, r2
 8002e22:	6818      	ldr	r0, [r3, #0]
 8002e24:	f000 f8e4 	bl	8002ff0 <read_row>

	get_button(button, pressed);
 8002e28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002e2c:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8002e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002e34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e38:	6811      	ldr	r1, [r2, #0]
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	f000 f92e 	bl	800309c <get_button>
	int n = button->value;
 8002e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002e44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	if(n != -1){
 8002e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e58:	d029      	beq.n	8002eae <scan+0x1f6>
		if(n > -1){
 8002e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	db08      	blt.n	8002e74 <scan+0x1bc>
			button->valid = true;
 8002e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002e66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8002e72:	e01c      	b.n	8002eae <scan+0x1f6>
		}

		else{
			button->valid = true;
 8002e74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002e78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			button->rst = true;
 8002e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002e88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			if(n == -3){button->set = true;}
 8002e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e98:	f113 0f03 	cmn.w	r3, #3
 8002e9c:	d107      	bne.n	8002eae <scan+0x1f6>
 8002e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002ea2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		}
	}

	if(print && n != -1){
 8002eae:	f897 3110 	ldrb.w	r3, [r7, #272]	@ 0x110
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d046      	beq.n	8002f44 <scan+0x28c>
 8002eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebe:	d041      	beq.n	8002f44 <scan+0x28c>
		sprintf(buffer_X, "X_-> %X | X_ANL -> %d ", pressed->X_, r_X);
 8002ec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002ec4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	8a7b      	ldrh	r3, [r7, #18]
 8002ed0:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 8002ed4:	4920      	ldr	r1, [pc, #128]	@ (8002f58 <scan+0x2a0>)
 8002ed6:	f005 f801 	bl	8007edc <siprintf>
		print_hex_f_array(uart, (uint8_t *)buffer_X, 1000, false, false, false, true, false);
 8002eda:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 8002ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002ee2:	f5a3 7080 	sub.w	r0, r3, #256	@ 0x100
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	9303      	str	r3, [sp, #12]
 8002eea:	2301      	movs	r3, #1
 8002eec:	9302      	str	r3, [sp, #8]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	9301      	str	r3, [sp, #4]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002efc:	6800      	ldr	r0, [r0, #0]
 8002efe:	f000 f9a3 	bl	8003248 <print_hex_f_array>

		sprintf(buffer_Y, "Y_ -> %X | Y_ANL -> %d", pressed->Y_, r_Y);
 8002f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	785b      	ldrb	r3, [r3, #1]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	8a3b      	ldrh	r3, [r7, #16]
 8002f12:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8002f16:	4911      	ldr	r1, [pc, #68]	@ (8002f5c <scan+0x2a4>)
 8002f18:	f004 ffe0 	bl	8007edc <siprintf>
		print_hex_f_array(uart, (uint8_t *)buffer_Y, 1000, false, false, false, true, false);
 8002f1c:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8002f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002f24:	f5a3 7080 	sub.w	r0, r3, #256	@ 0x100
 8002f28:	2300      	movs	r3, #0
 8002f2a:	9303      	str	r3, [sp, #12]
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	9302      	str	r3, [sp, #8]
 8002f30:	2300      	movs	r3, #0
 8002f32:	9301      	str	r3, [sp, #4]
 8002f34:	2300      	movs	r3, #0
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f3e:	6800      	ldr	r0, [r0, #0]
 8002f40:	f000 f982 	bl	8003248 <print_hex_f_array>
	}
}
 8002f44:	bf00      	nop
 8002f46:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40020400 	.word	0x40020400
 8002f54:	2000025c 	.word	0x2000025c
 8002f58:	08008b34 	.word	0x08008b34
 8002f5c:	08008b4c 	.word	0x08008b4c

08002f60 <read_col>:

void read_col(Pressed *pressed, uint16_t *x){
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
	pressed->X_ = 0x00;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	701a      	strb	r2, [r3, #0]
	if(*x > (T_X_C1 - ERROR_X) && *x < (T_X_C1 + ERROR_X)){
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	f240 52aa 	movw	r2, #1450	@ 0x5aa
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d90d      	bls.n	8002f98 <read_col+0x38>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	f240 62d5 	movw	r2, #1749	@ 0x6d5
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d807      	bhi.n	8002f98 <read_col+0x38>
		pressed->X_ |= (0x04);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	f043 0304 	orr.w	r3, r3, #4
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	701a      	strb	r2, [r3, #0]
 8002f96:	e025      	b.n	8002fe4 <read_col+0x84>
	}
	else if(*x > (T_X_C2 - ERROR_X) && *x < (T_X_C2 + ERROR_X)){
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	f240 3252 	movw	r2, #850	@ 0x352
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d90d      	bls.n	8002fc0 <read_col+0x60>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	f240 427d 	movw	r2, #1149	@ 0x47d
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d807      	bhi.n	8002fc0 <read_col+0x60>
		pressed->X_ |= (0x02);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	f043 0302 	orr.w	r3, r3, #2
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	701a      	strb	r2, [r3, #0]
 8002fbe:	e011      	b.n	8002fe4 <read_col+0x84>
	}
	else if(*x > (T_X_C3 - ERROR_X) && *x < (T_X_C3 + ERROR_X)){
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	f5b3 7fb5 	cmp.w	r3, #362	@ 0x16a
 8002fc8:	d30c      	bcc.n	8002fe4 <read_col+0x84>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8002fd2:	d807      	bhi.n	8002fe4 <read_col+0x84>
		pressed->X_ |= (0x01);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	701a      	strb	r2, [r3, #0]
	}
}
 8002fe2:	e7ff      	b.n	8002fe4 <read_col+0x84>
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <read_row>:

void read_row(Pressed *pressed, uint16_t *y){
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
	pressed->Y_ = 0x00;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	705a      	strb	r2, [r3, #1]
	if(*y > (T_Y_R1 - ERROR_Y) && *y < (T_Y_R1 + ERROR_Y)){
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8003008:	d90c      	bls.n	8003024 <read_row+0x34>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	f5b3 7f7f 	cmp.w	r3, #1020	@ 0x3fc
 8003012:	d207      	bcs.n	8003024 <read_row+0x34>
		pressed->Y_ |= (0x80);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	785b      	ldrb	r3, [r3, #1]
 8003018:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800301c:	b2da      	uxtb	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	705a      	strb	r2, [r3, #1]
 8003022:	e035      	b.n	8003090 <read_row+0xa0>
	}
	else if(*y > (T_Y_R2 - ERROR_Y) && *y < (T_Y_R2 + ERROR_Y)){
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 800302c:	d90c      	bls.n	8003048 <read_row+0x58>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	f5b3 7f4d 	cmp.w	r3, #820	@ 0x334
 8003036:	d207      	bcs.n	8003048 <read_row+0x58>
		pressed->Y_ |= (0x40);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	785b      	ldrb	r3, [r3, #1]
 800303c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003040:	b2da      	uxtb	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	705a      	strb	r2, [r3, #1]
 8003046:	e023      	b.n	8003090 <read_row+0xa0>
	}
	else if(*y > (T_Y_R3 - ERROR_Y) && *y < (T_Y_R3 + ERROR_Y)){
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8003050:	d90d      	bls.n	800306e <read_row+0x7e>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	f240 2239 	movw	r2, #569	@ 0x239
 800305a:	4293      	cmp	r3, r2
 800305c:	d807      	bhi.n	800306e <read_row+0x7e>
		pressed->Y_ |= (0x20);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	785b      	ldrb	r3, [r3, #1]
 8003062:	f043 0320 	orr.w	r3, r3, #32
 8003066:	b2da      	uxtb	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	705a      	strb	r2, [r3, #1]
 800306c:	e010      	b.n	8003090 <read_row+0xa0>
	}
	else if(*y > (T_Y_R4 - ERROR_Y) && *y < (T_Y_R4 + ERROR_Y)){
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	2bc3      	cmp	r3, #195	@ 0xc3
 8003074:	d90c      	bls.n	8003090 <read_row+0xa0>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 800307e:	d807      	bhi.n	8003090 <read_row+0xa0>
		pressed->Y_ |= (0x10);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	785b      	ldrb	r3, [r3, #1]
 8003084:	f043 0310 	orr.w	r3, r3, #16
 8003088:	b2da      	uxtb	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	705a      	strb	r2, [r3, #1]
	}
}
 800308e:	e7ff      	b.n	8003090 <read_row+0xa0>
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <get_button>:

void get_button(Button *button, Pressed *pressed){
 800309c:	b590      	push	{r4, r7, lr}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
	memset(button->c, 0 , strlen(button->c));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f103 040c 	add.w	r4, r3, #12
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	330c      	adds	r3, #12
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fd f89f 	bl	80001f4 <strlen>
 80030b6:	4603      	mov	r3, r0
 80030b8:	461a      	mov	r2, r3
 80030ba:	2100      	movs	r1, #0
 80030bc:	4620      	mov	r0, r4
 80030be:	f004 ff2d 	bl	8007f1c <memset>
	uint8_t r = (pressed->X_ | pressed->Y_);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	781a      	ldrb	r2, [r3, #0]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	785b      	ldrb	r3, [r3, #1]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	73fb      	strb	r3, [r7, #15]
	 * (8)   1    2   3
	 * (4)   4    5   6
	 * (2)   7    8   9
	 * (1)  clr   0   set
	 * */
	switch (r){
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	2b84      	cmp	r3, #132	@ 0x84
 80030d2:	d07e      	beq.n	80031d2 <get_button+0x136>
 80030d4:	2b84      	cmp	r3, #132	@ 0x84
 80030d6:	f300 80ae 	bgt.w	8003236 <get_button+0x19a>
 80030da:	2b82      	cmp	r3, #130	@ 0x82
 80030dc:	d07d      	beq.n	80031da <get_button+0x13e>
 80030de:	2b82      	cmp	r3, #130	@ 0x82
 80030e0:	f300 80a9 	bgt.w	8003236 <get_button+0x19a>
 80030e4:	2b44      	cmp	r3, #68	@ 0x44
 80030e6:	dc71      	bgt.n	80031cc <get_button+0x130>
 80030e8:	2b11      	cmp	r3, #17
 80030ea:	f2c0 80a4 	blt.w	8003236 <get_button+0x19a>
 80030ee:	3b11      	subs	r3, #17
 80030f0:	2b33      	cmp	r3, #51	@ 0x33
 80030f2:	f200 80a0 	bhi.w	8003236 <get_button+0x19a>
 80030f6:	a201      	add	r2, pc, #4	@ (adr r2, 80030fc <get_button+0x60>)
 80030f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fc:	0800322d 	.word	0x0800322d
 8003100:	08003225 	.word	0x08003225
 8003104:	08003237 	.word	0x08003237
 8003108:	0800321b 	.word	0x0800321b
 800310c:	08003237 	.word	0x08003237
 8003110:	08003237 	.word	0x08003237
 8003114:	08003237 	.word	0x08003237
 8003118:	08003237 	.word	0x08003237
 800311c:	08003237 	.word	0x08003237
 8003120:	08003237 	.word	0x08003237
 8003124:	08003237 	.word	0x08003237
 8003128:	08003237 	.word	0x08003237
 800312c:	08003237 	.word	0x08003237
 8003130:	08003237 	.word	0x08003237
 8003134:	08003237 	.word	0x08003237
 8003138:	08003237 	.word	0x08003237
 800313c:	08003213 	.word	0x08003213
 8003140:	0800320b 	.word	0x0800320b
 8003144:	08003237 	.word	0x08003237
 8003148:	08003203 	.word	0x08003203
 800314c:	08003237 	.word	0x08003237
 8003150:	08003237 	.word	0x08003237
 8003154:	08003237 	.word	0x08003237
 8003158:	08003237 	.word	0x08003237
 800315c:	08003237 	.word	0x08003237
 8003160:	08003237 	.word	0x08003237
 8003164:	08003237 	.word	0x08003237
 8003168:	08003237 	.word	0x08003237
 800316c:	08003237 	.word	0x08003237
 8003170:	08003237 	.word	0x08003237
 8003174:	08003237 	.word	0x08003237
 8003178:	08003237 	.word	0x08003237
 800317c:	08003237 	.word	0x08003237
 8003180:	08003237 	.word	0x08003237
 8003184:	08003237 	.word	0x08003237
 8003188:	08003237 	.word	0x08003237
 800318c:	08003237 	.word	0x08003237
 8003190:	08003237 	.word	0x08003237
 8003194:	08003237 	.word	0x08003237
 8003198:	08003237 	.word	0x08003237
 800319c:	08003237 	.word	0x08003237
 80031a0:	08003237 	.word	0x08003237
 80031a4:	08003237 	.word	0x08003237
 80031a8:	08003237 	.word	0x08003237
 80031ac:	08003237 	.word	0x08003237
 80031b0:	08003237 	.word	0x08003237
 80031b4:	08003237 	.word	0x08003237
 80031b8:	08003237 	.word	0x08003237
 80031bc:	080031fb 	.word	0x080031fb
 80031c0:	080031f3 	.word	0x080031f3
 80031c4:	08003237 	.word	0x08003237
 80031c8:	080031eb 	.word	0x080031eb
 80031cc:	2b81      	cmp	r3, #129	@ 0x81
 80031ce:	d008      	beq.n	80031e2 <get_button+0x146>
 80031d0:	e031      	b.n	8003236 <get_button+0x19a>
		case 0x84:
			button->value = 1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	601a      	str	r2, [r3, #0]
			break;
 80031d8:	e032      	b.n	8003240 <get_button+0x1a4>
		case 0x82:
			button->value = 2;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2202      	movs	r2, #2
 80031de:	601a      	str	r2, [r3, #0]
			break;
 80031e0:	e02e      	b.n	8003240 <get_button+0x1a4>
		case 0x81:
			button->value = 3;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2203      	movs	r2, #3
 80031e6:	601a      	str	r2, [r3, #0]
			break;
 80031e8:	e02a      	b.n	8003240 <get_button+0x1a4>
		case 0x44:
			button->value = 4;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2204      	movs	r2, #4
 80031ee:	601a      	str	r2, [r3, #0]
			break;
 80031f0:	e026      	b.n	8003240 <get_button+0x1a4>
		case 0x42:
			button->value = 5;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2205      	movs	r2, #5
 80031f6:	601a      	str	r2, [r3, #0]
			break;
 80031f8:	e022      	b.n	8003240 <get_button+0x1a4>
		case 0x41:
			button->value = 6;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2206      	movs	r2, #6
 80031fe:	601a      	str	r2, [r3, #0]
			break;
 8003200:	e01e      	b.n	8003240 <get_button+0x1a4>

		case 0x24:
			button->value = 7;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2207      	movs	r2, #7
 8003206:	601a      	str	r2, [r3, #0]
			break;
 8003208:	e01a      	b.n	8003240 <get_button+0x1a4>
		case 0x22:
			button->value = 8;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2208      	movs	r2, #8
 800320e:	601a      	str	r2, [r3, #0]
			break;
 8003210:	e016      	b.n	8003240 <get_button+0x1a4>
		case 0x21:
			button->value = 9;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2209      	movs	r2, #9
 8003216:	601a      	str	r2, [r3, #0]
			break;
 8003218:	e012      	b.n	8003240 <get_button+0x1a4>

		case 0x14:
			button->value = -2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f06f 0201 	mvn.w	r2, #1
 8003220:	601a      	str	r2, [r3, #0]
			break;
 8003222:	e00d      	b.n	8003240 <get_button+0x1a4>
		case 0x12:
			button->value = 0;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
			break;
 800322a:	e009      	b.n	8003240 <get_button+0x1a4>
		case 0x11:
			button->value = -3;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f06f 0202 	mvn.w	r2, #2
 8003232:	601a      	str	r2, [r3, #0]
			break;
 8003234:	e004      	b.n	8003240 <get_button+0x1a4>
		default:
			button->value = -1;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f04f 32ff 	mov.w	r2, #4294967295
 800323c:	601a      	str	r2, [r3, #0]
			break;
 800323e:	bf00      	nop
	}
}
 8003240:	bf00      	nop
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	bd90      	pop	{r4, r7, pc}

08003248 <print_hex_f_array>:
void print_f_array(UART_HandleTypeDef* uart, uint8_t* msg, uint32_t Timeout
		, bool s_space, bool s_line, bool e_space, bool e_line){
}

void print_hex_f_array(UART_HandleTypeDef* uart, uint8_t* pToArray, uint32_t Timeout
		, bool s_space, bool s_line, bool e_space, bool e_line, bool hex_format){
 8003248:	b580      	push	{r7, lr}
 800324a:	b08a      	sub	sp, #40	@ 0x28
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	70fb      	strb	r3, [r7, #3]

		int len = strlen((char *)pToArray);
 8003256:	68b8      	ldr	r0, [r7, #8]
 8003258:	f7fc ffcc 	bl	80001f4 <strlen>
 800325c:	4603      	mov	r3, r0
 800325e:	623b      	str	r3, [r7, #32]
		char hexStr[3];
		for (int i=0; i< len; i++){
 8003260:	2300      	movs	r3, #0
 8003262:	627b      	str	r3, [r7, #36]	@ 0x24
 8003264:	e03b      	b.n	80032de <print_hex_f_array+0x96>
			if (hex_format){
 8003266:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800326a:	2b00      	cmp	r3, #0
 800326c:	d012      	beq.n	8003294 <print_hex_f_array+0x4c>
				sprintf(hexStr, "%02X", pToArray[i]);
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	4413      	add	r3, r2
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	f107 0318 	add.w	r3, r7, #24
 800327c:	4929      	ldr	r1, [pc, #164]	@ (8003324 <print_hex_f_array+0xdc>)
 800327e:	4618      	mov	r0, r3
 8003280:	f004 fe2c 	bl	8007edc <siprintf>
				HAL_UART_Transmit(uart, (uint8_t *)hexStr,2,Timeout);}
 8003284:	f107 0118 	add.w	r1, r7, #24
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f003 fd8d 	bl	8006dac <HAL_UART_Transmit>
 8003292:	e007      	b.n	80032a4 <print_hex_f_array+0x5c>
			else{HAL_UART_Transmit(uart, &pToArray[i],1,Timeout);}
 8003294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	18d1      	adds	r1, r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f003 fd84 	bl	8006dac <HAL_UART_Transmit>

			if (s_space){
 80032a4:	78fb      	ldrb	r3, [r7, #3]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <print_hex_f_array+0x76>
				uint8_t space_char = ' ';
 80032aa:	2320      	movs	r3, #32
 80032ac:	75fb      	strb	r3, [r7, #23]
				HAL_UART_Transmit(uart, &space_char, 1, Timeout);}
 80032ae:	f107 0117 	add.w	r1, r7, #23
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f003 fd78 	bl	8006dac <HAL_UART_Transmit>
 80032bc:	e00c      	b.n	80032d8 <print_hex_f_array+0x90>

			else if (s_line){
 80032be:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d008      	beq.n	80032d8 <print_hex_f_array+0x90>
				uint8_t space_char = '\n';
 80032c6:	230a      	movs	r3, #10
 80032c8:	75bb      	strb	r3, [r7, #22]
				HAL_UART_Transmit(uart, &space_char, 1, Timeout);}
 80032ca:	f107 0116 	add.w	r1, r7, #22
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f003 fd6a 	bl	8006dac <HAL_UART_Transmit>
		for (int i=0; i< len; i++){
 80032d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032da:	3301      	adds	r3, #1
 80032dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80032de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	dbbf      	blt.n	8003266 <print_hex_f_array+0x1e>
		}
		if (e_space){
 80032e6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d009      	beq.n	8003302 <print_hex_f_array+0xba>
			uint8_t eol_char = ' ';
 80032ee:	2320      	movs	r3, #32
 80032f0:	757b      	strb	r3, [r7, #21]
			HAL_UART_Transmit(uart, &eol_char, 1, Timeout);}
 80032f2:	f107 0115 	add.w	r1, r7, #21
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f003 fd56 	bl	8006dac <HAL_UART_Transmit>
		else if (e_line){
			const char* eol_char = "\r\n";
			HAL_UART_Transmit(uart, (uint8_t *)eol_char, 1, Timeout);

		}
}
 8003300:	e00b      	b.n	800331a <print_hex_f_array+0xd2>
		else if (e_line){
 8003302:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003306:	2b00      	cmp	r3, #0
 8003308:	d007      	beq.n	800331a <print_hex_f_array+0xd2>
			const char* eol_char = "\r\n";
 800330a:	4b07      	ldr	r3, [pc, #28]	@ (8003328 <print_hex_f_array+0xe0>)
 800330c:	61fb      	str	r3, [r7, #28]
			HAL_UART_Transmit(uart, (uint8_t *)eol_char, 1, Timeout);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	69f9      	ldr	r1, [r7, #28]
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f003 fd49 	bl	8006dac <HAL_UART_Transmit>
}
 800331a:	bf00      	nop
 800331c:	3728      	adds	r7, #40	@ 0x28
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	08008b64 	.word	0x08008b64
 8003328:	08008b6c 	.word	0x08008b6c

0800332c <TIMER_US_INIT>:
 */
#include "main.h"

TIM_HandleTypeDef Tim_Def;

void TIMER_US_INIT(void){
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status_tim3 = HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	71fb      	strb	r3, [r7, #7]

	Tim_Def.Instance = TIM3;
 8003336:	4b0f      	ldr	r3, [pc, #60]	@ (8003374 <TIMER_US_INIT+0x48>)
 8003338:	4a0f      	ldr	r2, [pc, #60]	@ (8003378 <TIMER_US_INIT+0x4c>)
 800333a:	601a      	str	r2, [r3, #0]
	Tim_Def.Init.Prescaler = 79;
 800333c:	4b0d      	ldr	r3, [pc, #52]	@ (8003374 <TIMER_US_INIT+0x48>)
 800333e:	224f      	movs	r2, #79	@ 0x4f
 8003340:	605a      	str	r2, [r3, #4]
	Tim_Def.Init.Period = 65535;
 8003342:	4b0c      	ldr	r3, [pc, #48]	@ (8003374 <TIMER_US_INIT+0x48>)
 8003344:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003348:	60da      	str	r2, [r3, #12]
	Tim_Def.Init.CounterMode = TIM_COUNTERMODE_UP;
 800334a:	4b0a      	ldr	r3, [pc, #40]	@ (8003374 <TIMER_US_INIT+0x48>)
 800334c:	2200      	movs	r2, #0
 800334e:	609a      	str	r2, [r3, #8]
	Tim_Def.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003350:	4b08      	ldr	r3, [pc, #32]	@ (8003374 <TIMER_US_INIT+0x48>)
 8003352:	2200      	movs	r2, #0
 8003354:	611a      	str	r2, [r3, #16]
	Tim_Def.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003356:	4b07      	ldr	r3, [pc, #28]	@ (8003374 <TIMER_US_INIT+0x48>)
 8003358:	2200      	movs	r2, #0
 800335a:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&Tim_Def);
 800335c:	4805      	ldr	r0, [pc, #20]	@ (8003374 <TIMER_US_INIT+0x48>)
 800335e:	f002 ffe1 	bl	8006324 <HAL_TIM_Base_Init>
    if (status_tim3 != HAL_OK) {
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <TIMER_US_INIT+0x40>
    	Error_Handler();
 8003368:	f000 fce2 	bl	8003d30 <Error_Handler>
    }
}
 800336c:	bf00      	nop
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	200001bc 	.word	0x200001bc
 8003378:	40000400 	.word	0x40000400

0800337c <TIMER_US_DELAY>:
void TIMER_US_DELAY(uint16_t time){
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&Tim_Def);
 8003386:	480f      	ldr	r0, [pc, #60]	@ (80033c4 <TIMER_US_DELAY+0x48>)
 8003388:	f003 f81c 	bl	80063c4 <HAL_TIM_Base_Start>
	uint32_t startTick = __HAL_TIM_GET_COUNTER(&Tim_Def);
 800338c:	4b0d      	ldr	r3, [pc, #52]	@ (80033c4 <TIMER_US_DELAY+0x48>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003392:	60bb      	str	r3, [r7, #8]
	uint32_t current_time = startTick;
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	60fb      	str	r3, [r7, #12]
    while ((current_time - startTick) < time) {
 8003398:	e003      	b.n	80033a2 <TIMER_US_DELAY+0x26>
        current_time = __HAL_TIM_GET_COUNTER(&Tim_Def);
 800339a:	4b0a      	ldr	r3, [pc, #40]	@ (80033c4 <TIMER_US_DELAY+0x48>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a0:	60fb      	str	r3, [r7, #12]
    while ((current_time - startTick) < time) {
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	1ad2      	subs	r2, r2, r3
 80033a8:	88fb      	ldrh	r3, [r7, #6]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d3f5      	bcc.n	800339a <TIMER_US_DELAY+0x1e>
    }

    HAL_TIM_Base_Stop(&Tim_Def);
 80033ae:	4805      	ldr	r0, [pc, #20]	@ (80033c4 <TIMER_US_DELAY+0x48>)
 80033b0:	f003 f862 	bl	8006478 <HAL_TIM_Base_Stop>
    __HAL_TIM_SET_COUNTER(&Tim_Def, 0);
 80033b4:	4b03      	ldr	r3, [pc, #12]	@ (80033c4 <TIMER_US_DELAY+0x48>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2200      	movs	r2, #0
 80033ba:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80033bc:	bf00      	nop
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	200001bc 	.word	0x200001bc

080033c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b0ec      	sub	sp, #432	@ 0x1b0
 80033cc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033ce:	f000 ffa3 	bl	8004318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033d2:	f000 f97d 	bl	80036d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033d6:	f000 fb87 	bl	8003ae8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80033da:	f000 fb31 	bl	8003a40 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80033de:	f000 fb59 	bl	8003a94 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80033e2:	f000 fa97 	bl	8003914 <MX_TIM3_Init>
  MX_TIM10_Init();
 80033e6:	f000 fae3 	bl	80039b0 <MX_TIM10_Init>
  MX_SPI2_Init();
 80033ea:	f000 f9d9 	bl	80037a0 <MX_SPI2_Init>
  MX_TIM11_Init();
 80033ee:	f000 fb03 	bl	80039f8 <MX_TIM11_Init>
  MX_TIM2_Init();
 80033f2:	f000 fa41 	bl	8003878 <MX_TIM2_Init>
  MX_SPI4_Init();
 80033f6:	f000 fa09 	bl	800380c <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  TIMER_US_INIT();
 80033fa:	f7ff ff97 	bl	800332c <TIMER_US_INIT>
  LCD_Init();
 80033fe:	f7fe fa6d 	bl	80018dc <LCD_Init>
  LCD_DrawPage1();
 8003402:	f7fe fe11 	bl	8002028 <LCD_DrawPage1>
  VALVE_MODE_FULL_CW();
 8003406:	f7fe f84f 	bl	80014a8 <VALVE_MODE_FULL_CW>
  HAL_UART_Receive_IT(&huart1, rxBuffer, 1);
 800340a:	2201      	movs	r2, #1
 800340c:	4999      	ldr	r1, [pc, #612]	@ (8003674 <main+0x2ac>)
 800340e:	489a      	ldr	r0, [pc, #616]	@ (8003678 <main+0x2b0>)
 8003410:	f003 fd57 	bl	8006ec2 <HAL_UART_Receive_IT>

  GPIOA->BSRR = (1U << (16));
 8003414:	4b99      	ldr	r3, [pc, #612]	@ (800367c <main+0x2b4>)
 8003416:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800341a:	619a      	str	r2, [r3, #24]
  HAL_Delay(1000);
 800341c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003420:	f000 ffec 	bl	80043fc <HAL_Delay>
  GPIOA->BSRR = (1U << (0));
 8003424:	4b95      	ldr	r3, [pc, #596]	@ (800367c <main+0x2b4>)
 8003426:	2201      	movs	r2, #1
 8003428:	619a      	str	r2, [r3, #24]
  GPIOB->BSRR = (1U << 8); // Enable ESP
 800342a:	4b95      	ldr	r3, [pc, #596]	@ (8003680 <main+0x2b8>)
 800342c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003430:	619a      	str	r2, [r3, #24]
  T_CS_SET;
 8003432:	4b93      	ldr	r3, [pc, #588]	@ (8003680 <main+0x2b8>)
 8003434:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003438:	619a      	str	r2, [r3, #24]
  flag = 0x00;
 800343a:	4b92      	ldr	r3, [pc, #584]	@ (8003684 <main+0x2bc>)
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]
  page = 0x01;
 8003440:	4b91      	ldr	r3, [pc, #580]	@ (8003688 <main+0x2c0>)
 8003442:	2201      	movs	r2, #1
 8003444:	701a      	strb	r2, [r3, #0]
  command = 0x0;
 8003446:	4b91      	ldr	r3, [pc, #580]	@ (800368c <main+0x2c4>)
 8003448:	2200      	movs	r2, #0
 800344a:	701a      	strb	r2, [r3, #0]
  act = 0x00;
 800344c:	4b90      	ldr	r3, [pc, #576]	@ (8003690 <main+0x2c8>)
 800344e:	2200      	movs	r2, #0
 8003450:	701a      	strb	r2, [r3, #0]

  uint32_t *p = (uint32_t *)FLASH_ADDRESS;
 8003452:	4b90      	ldr	r3, [pc, #576]	@ (8003694 <main+0x2cc>)
 8003454:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
  int h = *p;
 8003458:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  LCD_UpdateFlash(h);
 8003462:	f8d7 0190 	ldr.w	r0, [r7, #400]	@ 0x190
 8003466:	f7ff facb 	bl	8002a00 <LCD_UpdateFlash>
  HAL_Delay(1000);
 800346a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800346e:	f000 ffc5 	bl	80043fc <HAL_Delay>

  ds18b20_terminal.temperature = ds18b20_get_temperature(&ds18b20_terminal, false, &huart2);
 8003472:	4a89      	ldr	r2, [pc, #548]	@ (8003698 <main+0x2d0>)
 8003474:	2100      	movs	r1, #0
 8003476:	4889      	ldr	r0, [pc, #548]	@ (800369c <main+0x2d4>)
 8003478:	f7fd fd60 	bl	8000f3c <ds18b20_get_temperature>
 800347c:	eef0 7a40 	vmov.f32	s15, s0
 8003480:	4b86      	ldr	r3, [pc, #536]	@ (800369c <main+0x2d4>)
 8003482:	edc3 7a03 	vstr	s15, [r3, #12]
  ds18b20_hot.temperature = ds18b20_get_temperature(&ds18b20_hot, false, &huart2);
 8003486:	4a84      	ldr	r2, [pc, #528]	@ (8003698 <main+0x2d0>)
 8003488:	2100      	movs	r1, #0
 800348a:	4885      	ldr	r0, [pc, #532]	@ (80036a0 <main+0x2d8>)
 800348c:	f7fd fd56 	bl	8000f3c <ds18b20_get_temperature>
 8003490:	eef0 7a40 	vmov.f32	s15, s0
 8003494:	4b82      	ldr	r3, [pc, #520]	@ (80036a0 <main+0x2d8>)
 8003496:	edc3 7a03 	vstr	s15, [r3, #12]

  LCD_UpdateTemperature(&ds18b20_terminal, ds18b20_terminal.temperature);
 800349a:	4b80      	ldr	r3, [pc, #512]	@ (800369c <main+0x2d4>)
 800349c:	edd3 7a03 	vldr	s15, [r3, #12]
 80034a0:	eeb0 0a67 	vmov.f32	s0, s15
 80034a4:	487d      	ldr	r0, [pc, #500]	@ (800369c <main+0x2d4>)
 80034a6:	f7ff f951 	bl	800274c <LCD_UpdateTemperature>
  LCD_UpdateTemperature(&ds18b20_hot, ds18b20_hot.temperature);
 80034aa:	4b7d      	ldr	r3, [pc, #500]	@ (80036a0 <main+0x2d8>)
 80034ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80034b0:	eeb0 0a67 	vmov.f32	s0, s15
 80034b4:	487a      	ldr	r0, [pc, #488]	@ (80036a0 <main+0x2d8>)
 80034b6:	f7ff f949 	bl	800274c <LCD_UpdateTemperature>

  // Handle initial positioning -> Return valve to its 0 positioning
  // Raise STALL flag if Hot temperature is lower then minimum
  //VALVE_CONTROL_HANDLE_INIT(&valve);
  h = *p;
 80034ba:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  //char msg[20] = "HELLO YOU BUSY";
  LCD_UpdateFlash(h);
 80034c4:	f8d7 0190 	ldr.w	r0, [r7, #400]	@ 0x190
 80034c8:	f7ff fa9a 	bl	8002a00 <LCD_UpdateFlash>
  HAL_Delay(1000);
 80034cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80034d0:	f000 ff94 	bl	80043fc <HAL_Delay>
	while(1){
    /* USER CODE END WHILE */
		//LCD_typeDebug("looping");
    /* USER CODE BEGIN 3 */
		// Handle command flags
		COMMAND_HANDLE(&htim10, &htim2, &command);
 80034d4:	4a6d      	ldr	r2, [pc, #436]	@ (800368c <main+0x2c4>)
 80034d6:	4973      	ldr	r1, [pc, #460]	@ (80036a4 <main+0x2dc>)
 80034d8:	4873      	ldr	r0, [pc, #460]	@ (80036a8 <main+0x2e0>)
 80034da:	f7fd fdc9 	bl	8001070 <COMMAND_HANDLE>
		// Handle touch screen interrupt
		if((flag & SCAN_PAD) != 0){
 80034de:	4b69      	ldr	r3, [pc, #420]	@ (8003684 <main+0x2bc>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	b25b      	sxtb	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	da16      	bge.n	8003516 <main+0x14e>
			SCAN_HANDLE(&ds18b20_hot, &valve, &hspi4, &huart2, &button, &pressed, &act, &flag, &PAGE);
 80034e8:	4b70      	ldr	r3, [pc, #448]	@ (80036ac <main+0x2e4>)
 80034ea:	9304      	str	r3, [sp, #16]
 80034ec:	4b65      	ldr	r3, [pc, #404]	@ (8003684 <main+0x2bc>)
 80034ee:	9303      	str	r3, [sp, #12]
 80034f0:	4b67      	ldr	r3, [pc, #412]	@ (8003690 <main+0x2c8>)
 80034f2:	9302      	str	r3, [sp, #8]
 80034f4:	4b6e      	ldr	r3, [pc, #440]	@ (80036b0 <main+0x2e8>)
 80034f6:	9301      	str	r3, [sp, #4]
 80034f8:	4b6e      	ldr	r3, [pc, #440]	@ (80036b4 <main+0x2ec>)
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	4b66      	ldr	r3, [pc, #408]	@ (8003698 <main+0x2d0>)
 80034fe:	4a6e      	ldr	r2, [pc, #440]	@ (80036b8 <main+0x2f0>)
 8003500:	496e      	ldr	r1, [pc, #440]	@ (80036bc <main+0x2f4>)
 8003502:	4867      	ldr	r0, [pc, #412]	@ (80036a0 <main+0x2d8>)
 8003504:	f7ff fae0 	bl	8002ac8 <SCAN_HANDLE>
			flag &= (~SCAN_PAD);}
 8003508:	4b5e      	ldr	r3, [pc, #376]	@ (8003684 <main+0x2bc>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003510:	b2da      	uxtb	r2, r3
 8003512:	4b5c      	ldr	r3, [pc, #368]	@ (8003684 <main+0x2bc>)
 8003514:	701a      	strb	r2, [r3, #0]

		// Update temperatures, storing them in the Struct.
		if((act & TEMP_UPDATE_) == TEMP_UPDATE_){
 8003516:	4b5e      	ldr	r3, [pc, #376]	@ (8003690 <main+0x2c8>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d069      	beq.n	80035f6 <main+0x22e>
			LCD_typeDebug("reading temperature");
 8003522:	4867      	ldr	r0, [pc, #412]	@ (80036c0 <main+0x2f8>)
 8003524:	f7ff fab2 	bl	8002a8c <LCD_typeDebug>
			terminal_temp = ds18b20_get_temperature(&ds18b20_terminal, false, &huart2);
 8003528:	4a5b      	ldr	r2, [pc, #364]	@ (8003698 <main+0x2d0>)
 800352a:	2100      	movs	r1, #0
 800352c:	485b      	ldr	r0, [pc, #364]	@ (800369c <main+0x2d4>)
 800352e:	f7fd fd05 	bl	8000f3c <ds18b20_get_temperature>
 8003532:	eef0 7a40 	vmov.f32	s15, s0
 8003536:	4b63      	ldr	r3, [pc, #396]	@ (80036c4 <main+0x2fc>)
 8003538:	edc3 7a00 	vstr	s15, [r3]
			hot_temp = ds18b20_get_temperature(&ds18b20_hot, false, &huart2);
 800353c:	4a56      	ldr	r2, [pc, #344]	@ (8003698 <main+0x2d0>)
 800353e:	2100      	movs	r1, #0
 8003540:	4857      	ldr	r0, [pc, #348]	@ (80036a0 <main+0x2d8>)
 8003542:	f7fd fcfb 	bl	8000f3c <ds18b20_get_temperature>
 8003546:	eef0 7a40 	vmov.f32	s15, s0
 800354a:	4b5f      	ldr	r3, [pc, #380]	@ (80036c8 <main+0x300>)
 800354c:	edc3 7a00 	vstr	s15, [r3]

			ds18b20_terminal.delta = terminal_temp - ds18b20_terminal.temperature;
 8003550:	4b5c      	ldr	r3, [pc, #368]	@ (80036c4 <main+0x2fc>)
 8003552:	ed93 7a00 	vldr	s14, [r3]
 8003556:	4b51      	ldr	r3, [pc, #324]	@ (800369c <main+0x2d4>)
 8003558:	edd3 7a03 	vldr	s15, [r3, #12]
 800355c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003560:	4b4e      	ldr	r3, [pc, #312]	@ (800369c <main+0x2d4>)
 8003562:	edc3 7a04 	vstr	s15, [r3, #16]
			ds18b20_hot.delta = hot_temp - ds18b20_hot.temperature;
 8003566:	4b58      	ldr	r3, [pc, #352]	@ (80036c8 <main+0x300>)
 8003568:	ed93 7a00 	vldr	s14, [r3]
 800356c:	4b4c      	ldr	r3, [pc, #304]	@ (80036a0 <main+0x2d8>)
 800356e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003572:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003576:	4b4a      	ldr	r3, [pc, #296]	@ (80036a0 <main+0x2d8>)
 8003578:	edc3 7a04 	vstr	s15, [r3, #16]

			ds18b20_terminal.temperature = terminal_temp;
 800357c:	4b51      	ldr	r3, [pc, #324]	@ (80036c4 <main+0x2fc>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a46      	ldr	r2, [pc, #280]	@ (800369c <main+0x2d4>)
 8003582:	60d3      	str	r3, [r2, #12]
			ds18b20_hot.temperature = hot_temp;
 8003584:	4b50      	ldr	r3, [pc, #320]	@ (80036c8 <main+0x300>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a45      	ldr	r2, [pc, #276]	@ (80036a0 <main+0x2d8>)
 800358a:	60d3      	str	r3, [r2, #12]
			act = act & (~TEMP_UPDATE_);
 800358c:	4b40      	ldr	r3, [pc, #256]	@ (8003690 <main+0x2c8>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	f023 0302 	bic.w	r3, r3, #2
 8003594:	b2da      	uxtb	r2, r3
 8003596:	4b3e      	ldr	r3, [pc, #248]	@ (8003690 <main+0x2c8>)
 8003598:	701a      	strb	r2, [r3, #0]
		    // Update the User's screen controller
			getFloatString(terminalBuffer, terminal_temp);
 800359a:	4b4a      	ldr	r3, [pc, #296]	@ (80036c4 <main+0x2fc>)
 800359c:	edd3 7a00 	vldr	s15, [r3]
 80035a0:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80035a4:	eeb0 0a67 	vmov.f32	s0, s15
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fb89 	bl	8003cc0 <getFloatString>
			getFloatString(hotBuffer, hot_temp);
 80035ae:	4b46      	ldr	r3, [pc, #280]	@ (80036c8 <main+0x300>)
 80035b0:	edd3 7a00 	vldr	s15, [r3]
 80035b4:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80035b8:	eeb0 0a67 	vmov.f32	s0, s15
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fb7f 	bl	8003cc0 <getFloatString>
			sprintf(updateMsg, "UPDATE %d %s %s %d", button.data, terminalBuffer, hotBuffer, valve.current_steps);
 80035c2:	4b3c      	ldr	r3, [pc, #240]	@ (80036b4 <main+0x2ec>)
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	4b3d      	ldr	r3, [pc, #244]	@ (80036bc <main+0x2f4>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f507 7196 	add.w	r1, r7, #300	@ 0x12c
 80035ce:	4638      	mov	r0, r7
 80035d0:	9301      	str	r3, [sp, #4]
 80035d2:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	460b      	mov	r3, r1
 80035da:	493c      	ldr	r1, [pc, #240]	@ (80036cc <main+0x304>)
 80035dc:	f004 fc7e 	bl	8007edc <siprintf>
		    HAL_UART_Transmit(&huart1, (uint8_t *)updateMsg,strlen(updateMsg), 100);}
 80035e0:	463b      	mov	r3, r7
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fc fe06 	bl	80001f4 <strlen>
 80035e8:	4603      	mov	r3, r0
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	4639      	mov	r1, r7
 80035ee:	2364      	movs	r3, #100	@ 0x64
 80035f0:	4821      	ldr	r0, [pc, #132]	@ (8003678 <main+0x2b0>)
 80035f2:	f003 fbdb 	bl	8006dac <HAL_UART_Transmit>


		if(((act & TEMP_GET_VALV_APROX) == TEMP_GET_VALV_APROX)){
 80035f6:	4b26      	ldr	r3, [pc, #152]	@ (8003690 <main+0x2c8>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d010      	beq.n	8003624 <main+0x25c>
			VALVE_CONTROL_APROX(&valve); // Open Valve to approximate position
 8003602:	482e      	ldr	r0, [pc, #184]	@ (80036bc <main+0x2f4>)
 8003604:	f7fe f80a 	bl	800161c <VALVE_CONTROL_APROX>
			act &= (~TEMP_GET_VALV_APROX);
 8003608:	4b21      	ldr	r3, [pc, #132]	@ (8003690 <main+0x2c8>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	f023 0308 	bic.w	r3, r3, #8
 8003610:	b2da      	uxtb	r2, r3
 8003612:	4b1f      	ldr	r3, [pc, #124]	@ (8003690 <main+0x2c8>)
 8003614:	701a      	strb	r2, [r3, #0]
			command |= RUN;} // Clear bit flag
 8003616:	4b1d      	ldr	r3, [pc, #116]	@ (800368c <main+0x2c4>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	f043 0320 	orr.w	r3, r3, #32
 800361e:	b2da      	uxtb	r2, r3
 8003620:	4b1a      	ldr	r3, [pc, #104]	@ (800368c <main+0x2c4>)
 8003622:	701a      	strb	r2, [r3, #0]

		if(((command & RUN) == RUN) && (command & RUN_) == RUN_){
 8003624:	4b19      	ldr	r3, [pc, #100]	@ (800368c <main+0x2c4>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	d011      	beq.n	8003654 <main+0x28c>
 8003630:	4b16      	ldr	r3, [pc, #88]	@ (800368c <main+0x2c4>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00b      	beq.n	8003654 <main+0x28c>
			VALVE_CONTROL_RUN(&valve, &ds18b20_terminal, &button);
 800363c:	4a1d      	ldr	r2, [pc, #116]	@ (80036b4 <main+0x2ec>)
 800363e:	4917      	ldr	r1, [pc, #92]	@ (800369c <main+0x2d4>)
 8003640:	481e      	ldr	r0, [pc, #120]	@ (80036bc <main+0x2f4>)
 8003642:	f7fd fe03 	bl	800124c <VALVE_CONTROL_RUN>
			command = command & (~RUN_);}
 8003646:	4b11      	ldr	r3, [pc, #68]	@ (800368c <main+0x2c4>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800364e:	b2da      	uxtb	r2, r3
 8003650:	4b0e      	ldr	r3, [pc, #56]	@ (800368c <main+0x2c4>)
 8003652:	701a      	strb	r2, [r3, #0]

		switch (page){
 8003654:	4b0c      	ldr	r3, [pc, #48]	@ (8003688 <main+0x2c0>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d001      	beq.n	8003660 <main+0x298>
 800365c:	2b02      	cmp	r3, #2
			case 0x01: // Home Page
				LCD_HANDLE_PAGE_1(&PAGE, &act, &command);
				break;
			case 0x02: // Readings Page
				break;
 800365e:	e005      	b.n	800366c <main+0x2a4>
				LCD_HANDLE_PAGE_1(&PAGE, &act, &command);
 8003660:	4a0a      	ldr	r2, [pc, #40]	@ (800368c <main+0x2c4>)
 8003662:	490b      	ldr	r1, [pc, #44]	@ (8003690 <main+0x2c8>)
 8003664:	4811      	ldr	r0, [pc, #68]	@ (80036ac <main+0x2e4>)
 8003666:	f7ff fac7 	bl	8002bf8 <LCD_HANDLE_PAGE_1>
				break;
 800366a:	bf00      	nop
		}

		HAL_Delay(10);
 800366c:	200a      	movs	r0, #10
 800366e:	f000 fec5 	bl	80043fc <HAL_Delay>
		COMMAND_HANDLE(&htim10, &htim2, &command);
 8003672:	e72f      	b.n	80034d4 <main+0x10c>
 8003674:	20000da4 	.word	0x20000da4
 8003678:	200003d4 	.word	0x200003d4
 800367c:	40020000 	.word	0x40020000
 8003680:	40020400 	.word	0x40020400
 8003684:	20000464 	.word	0x20000464
 8003688:	20000467 	.word	0x20000467
 800368c:	20000466 	.word	0x20000466
 8003690:	20000465 	.word	0x20000465
 8003694:	08060000 	.word	0x08060000
 8003698:	2000041c 	.word	0x2000041c
 800369c:	20000088 	.word	0x20000088
 80036a0:	200000a0 	.word	0x200000a0
 80036a4:	200002b4 	.word	0x200002b4
 80036a8:	20000344 	.word	0x20000344
 80036ac:	200000fc 	.word	0x200000fc
 80036b0:	20000470 	.word	0x20000470
 80036b4:	200000cc 	.word	0x200000cc
 80036b8:	2000025c 	.word	0x2000025c
 80036bc:	200000b8 	.word	0x200000b8
 80036c0:	08008b70 	.word	0x08008b70
 80036c4:	2000046c 	.word	0x2000046c
 80036c8:	20000468 	.word	0x20000468
 80036cc:	08008b84 	.word	0x08008b84

080036d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b094      	sub	sp, #80	@ 0x50
 80036d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036d6:	f107 0320 	add.w	r3, r7, #32
 80036da:	2230      	movs	r2, #48	@ 0x30
 80036dc:	2100      	movs	r1, #0
 80036de:	4618      	mov	r0, r3
 80036e0:	f004 fc1c 	bl	8007f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036e4:	f107 030c 	add.w	r3, r7, #12
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80036f4:	2300      	movs	r3, #0
 80036f6:	60bb      	str	r3, [r7, #8]
 80036f8:	4b27      	ldr	r3, [pc, #156]	@ (8003798 <SystemClock_Config+0xc8>)
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	4a26      	ldr	r2, [pc, #152]	@ (8003798 <SystemClock_Config+0xc8>)
 80036fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003702:	6413      	str	r3, [r2, #64]	@ 0x40
 8003704:	4b24      	ldr	r3, [pc, #144]	@ (8003798 <SystemClock_Config+0xc8>)
 8003706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003710:	2300      	movs	r3, #0
 8003712:	607b      	str	r3, [r7, #4]
 8003714:	4b21      	ldr	r3, [pc, #132]	@ (800379c <SystemClock_Config+0xcc>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a20      	ldr	r2, [pc, #128]	@ (800379c <SystemClock_Config+0xcc>)
 800371a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	4b1e      	ldr	r3, [pc, #120]	@ (800379c <SystemClock_Config+0xcc>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003728:	607b      	str	r3, [r7, #4]
 800372a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800372c:	2302      	movs	r3, #2
 800372e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003730:	2301      	movs	r3, #1
 8003732:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003734:	2310      	movs	r3, #16
 8003736:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003738:	2302      	movs	r3, #2
 800373a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800373c:	2300      	movs	r3, #0
 800373e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003740:	2308      	movs	r3, #8
 8003742:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8003744:	2350      	movs	r3, #80	@ 0x50
 8003746:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003748:	2302      	movs	r3, #2
 800374a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800374c:	2304      	movs	r3, #4
 800374e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003750:	f107 0320 	add.w	r3, r7, #32
 8003754:	4618      	mov	r0, r3
 8003756:	f001 fbbb 	bl	8004ed0 <HAL_RCC_OscConfig>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003760:	f000 fae6 	bl	8003d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003764:	230f      	movs	r3, #15
 8003766:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003768:	2302      	movs	r3, #2
 800376a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003770:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003774:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003776:	2300      	movs	r3, #0
 8003778:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800377a:	f107 030c 	add.w	r3, r7, #12
 800377e:	2102      	movs	r1, #2
 8003780:	4618      	mov	r0, r3
 8003782:	f001 fe1d 	bl	80053c0 <HAL_RCC_ClockConfig>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800378c:	f000 fad0 	bl	8003d30 <Error_Handler>
  }
}
 8003790:	bf00      	nop
 8003792:	3750      	adds	r7, #80	@ 0x50
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40023800 	.word	0x40023800
 800379c:	40007000 	.word	0x40007000

080037a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80037a4:	4b17      	ldr	r3, [pc, #92]	@ (8003804 <MX_SPI2_Init+0x64>)
 80037a6:	4a18      	ldr	r2, [pc, #96]	@ (8003808 <MX_SPI2_Init+0x68>)
 80037a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80037aa:	4b16      	ldr	r3, [pc, #88]	@ (8003804 <MX_SPI2_Init+0x64>)
 80037ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80037b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80037b2:	4b14      	ldr	r3, [pc, #80]	@ (8003804 <MX_SPI2_Init+0x64>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80037b8:	4b12      	ldr	r3, [pc, #72]	@ (8003804 <MX_SPI2_Init+0x64>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037be:	4b11      	ldr	r3, [pc, #68]	@ (8003804 <MX_SPI2_Init+0x64>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003804 <MX_SPI2_Init+0x64>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80037ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003804 <MX_SPI2_Init+0x64>)
 80037cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003804 <MX_SPI2_Init+0x64>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003804 <MX_SPI2_Init+0x64>)
 80037da:	2200      	movs	r2, #0
 80037dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80037de:	4b09      	ldr	r3, [pc, #36]	@ (8003804 <MX_SPI2_Init+0x64>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037e4:	4b07      	ldr	r3, [pc, #28]	@ (8003804 <MX_SPI2_Init+0x64>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80037ea:	4b06      	ldr	r3, [pc, #24]	@ (8003804 <MX_SPI2_Init+0x64>)
 80037ec:	220a      	movs	r2, #10
 80037ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80037f0:	4804      	ldr	r0, [pc, #16]	@ (8003804 <MX_SPI2_Init+0x64>)
 80037f2:	f001 ffc5 	bl	8005780 <HAL_SPI_Init>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80037fc:	f000 fa98 	bl	8003d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003800:	bf00      	nop
 8003802:	bd80      	pop	{r7, pc}
 8003804:	20000204 	.word	0x20000204
 8003808:	40003800 	.word	0x40003800

0800380c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8003810:	4b17      	ldr	r3, [pc, #92]	@ (8003870 <MX_SPI4_Init+0x64>)
 8003812:	4a18      	ldr	r2, [pc, #96]	@ (8003874 <MX_SPI4_Init+0x68>)
 8003814:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003816:	4b16      	ldr	r3, [pc, #88]	@ (8003870 <MX_SPI4_Init+0x64>)
 8003818:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800381c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800381e:	4b14      	ldr	r3, [pc, #80]	@ (8003870 <MX_SPI4_Init+0x64>)
 8003820:	2200      	movs	r2, #0
 8003822:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003824:	4b12      	ldr	r3, [pc, #72]	@ (8003870 <MX_SPI4_Init+0x64>)
 8003826:	2200      	movs	r2, #0
 8003828:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800382a:	4b11      	ldr	r3, [pc, #68]	@ (8003870 <MX_SPI4_Init+0x64>)
 800382c:	2200      	movs	r2, #0
 800382e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003830:	4b0f      	ldr	r3, [pc, #60]	@ (8003870 <MX_SPI4_Init+0x64>)
 8003832:	2200      	movs	r2, #0
 8003834:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003836:	4b0e      	ldr	r3, [pc, #56]	@ (8003870 <MX_SPI4_Init+0x64>)
 8003838:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800383c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800383e:	4b0c      	ldr	r3, [pc, #48]	@ (8003870 <MX_SPI4_Init+0x64>)
 8003840:	2210      	movs	r2, #16
 8003842:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003844:	4b0a      	ldr	r3, [pc, #40]	@ (8003870 <MX_SPI4_Init+0x64>)
 8003846:	2200      	movs	r2, #0
 8003848:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800384a:	4b09      	ldr	r3, [pc, #36]	@ (8003870 <MX_SPI4_Init+0x64>)
 800384c:	2200      	movs	r2, #0
 800384e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003850:	4b07      	ldr	r3, [pc, #28]	@ (8003870 <MX_SPI4_Init+0x64>)
 8003852:	2200      	movs	r2, #0
 8003854:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8003856:	4b06      	ldr	r3, [pc, #24]	@ (8003870 <MX_SPI4_Init+0x64>)
 8003858:	220a      	movs	r2, #10
 800385a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800385c:	4804      	ldr	r0, [pc, #16]	@ (8003870 <MX_SPI4_Init+0x64>)
 800385e:	f001 ff8f 	bl	8005780 <HAL_SPI_Init>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8003868:	f000 fa62 	bl	8003d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800386c:	bf00      	nop
 800386e:	bd80      	pop	{r7, pc}
 8003870:	2000025c 	.word	0x2000025c
 8003874:	40013400 	.word	0x40013400

08003878 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800387e:	f107 0308 	add.w	r3, r7, #8
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	605a      	str	r2, [r3, #4]
 8003888:	609a      	str	r2, [r3, #8]
 800388a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800388c:	463b      	mov	r3, r7
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003894:	4b1e      	ldr	r3, [pc, #120]	@ (8003910 <MX_TIM2_Init+0x98>)
 8003896:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800389a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 19999;
 800389c:	4b1c      	ldr	r3, [pc, #112]	@ (8003910 <MX_TIM2_Init+0x98>)
 800389e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80038a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003910 <MX_TIM2_Init+0x98>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80038aa:	4b19      	ldr	r3, [pc, #100]	@ (8003910 <MX_TIM2_Init+0x98>)
 80038ac:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80038b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038b2:	4b17      	ldr	r3, [pc, #92]	@ (8003910 <MX_TIM2_Init+0x98>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038b8:	4b15      	ldr	r3, [pc, #84]	@ (8003910 <MX_TIM2_Init+0x98>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80038be:	4814      	ldr	r0, [pc, #80]	@ (8003910 <MX_TIM2_Init+0x98>)
 80038c0:	f002 fd30 	bl	8006324 <HAL_TIM_Base_Init>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80038ca:	f000 fa31 	bl	8003d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80038d4:	f107 0308 	add.w	r3, r7, #8
 80038d8:	4619      	mov	r1, r3
 80038da:	480d      	ldr	r0, [pc, #52]	@ (8003910 <MX_TIM2_Init+0x98>)
 80038dc:	f002 ff75 	bl	80067ca <HAL_TIM_ConfigClockSource>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80038e6:	f000 fa23 	bl	8003d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038ea:	2300      	movs	r3, #0
 80038ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ee:	2300      	movs	r3, #0
 80038f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038f2:	463b      	mov	r3, r7
 80038f4:	4619      	mov	r1, r3
 80038f6:	4806      	ldr	r0, [pc, #24]	@ (8003910 <MX_TIM2_Init+0x98>)
 80038f8:	f003 f986 	bl	8006c08 <HAL_TIMEx_MasterConfigSynchronization>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003902:	f000 fa15 	bl	8003d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003906:	bf00      	nop
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	200002b4 	.word	0x200002b4

08003914 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800391a:	f107 0308 	add.w	r3, r7, #8
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	605a      	str	r2, [r3, #4]
 8003924:	609a      	str	r2, [r3, #8]
 8003926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003928:	463b      	mov	r3, r7
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003930:	4b1d      	ldr	r3, [pc, #116]	@ (80039a8 <MX_TIM3_Init+0x94>)
 8003932:	4a1e      	ldr	r2, [pc, #120]	@ (80039ac <MX_TIM3_Init+0x98>)
 8003934:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 8003936:	4b1c      	ldr	r3, [pc, #112]	@ (80039a8 <MX_TIM3_Init+0x94>)
 8003938:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800393c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800393e:	4b1a      	ldr	r3, [pc, #104]	@ (80039a8 <MX_TIM3_Init+0x94>)
 8003940:	2200      	movs	r2, #0
 8003942:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003944:	4b18      	ldr	r3, [pc, #96]	@ (80039a8 <MX_TIM3_Init+0x94>)
 8003946:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800394a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800394c:	4b16      	ldr	r3, [pc, #88]	@ (80039a8 <MX_TIM3_Init+0x94>)
 800394e:	2200      	movs	r2, #0
 8003950:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003952:	4b15      	ldr	r3, [pc, #84]	@ (80039a8 <MX_TIM3_Init+0x94>)
 8003954:	2200      	movs	r2, #0
 8003956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003958:	4813      	ldr	r0, [pc, #76]	@ (80039a8 <MX_TIM3_Init+0x94>)
 800395a:	f002 fce3 	bl	8006324 <HAL_TIM_Base_Init>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003964:	f000 f9e4 	bl	8003d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003968:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800396c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800396e:	f107 0308 	add.w	r3, r7, #8
 8003972:	4619      	mov	r1, r3
 8003974:	480c      	ldr	r0, [pc, #48]	@ (80039a8 <MX_TIM3_Init+0x94>)
 8003976:	f002 ff28 	bl	80067ca <HAL_TIM_ConfigClockSource>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003980:	f000 f9d6 	bl	8003d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003984:	2300      	movs	r3, #0
 8003986:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003988:	2300      	movs	r3, #0
 800398a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800398c:	463b      	mov	r3, r7
 800398e:	4619      	mov	r1, r3
 8003990:	4805      	ldr	r0, [pc, #20]	@ (80039a8 <MX_TIM3_Init+0x94>)
 8003992:	f003 f939 	bl	8006c08 <HAL_TIMEx_MasterConfigSynchronization>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800399c:	f000 f9c8 	bl	8003d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80039a0:	bf00      	nop
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	200002fc 	.word	0x200002fc
 80039ac:	40000400 	.word	0x40000400

080039b0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80039b4:	4b0e      	ldr	r3, [pc, #56]	@ (80039f0 <MX_TIM10_Init+0x40>)
 80039b6:	4a0f      	ldr	r2, [pc, #60]	@ (80039f4 <MX_TIM10_Init+0x44>)
 80039b8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 59999;
 80039ba:	4b0d      	ldr	r3, [pc, #52]	@ (80039f0 <MX_TIM10_Init+0x40>)
 80039bc:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80039c0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039c2:	4b0b      	ldr	r3, [pc, #44]	@ (80039f0 <MX_TIM10_Init+0x40>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 29999;
 80039c8:	4b09      	ldr	r3, [pc, #36]	@ (80039f0 <MX_TIM10_Init+0x40>)
 80039ca:	f247 522f 	movw	r2, #29999	@ 0x752f
 80039ce:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039d0:	4b07      	ldr	r3, [pc, #28]	@ (80039f0 <MX_TIM10_Init+0x40>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039d6:	4b06      	ldr	r3, [pc, #24]	@ (80039f0 <MX_TIM10_Init+0x40>)
 80039d8:	2200      	movs	r2, #0
 80039da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80039dc:	4804      	ldr	r0, [pc, #16]	@ (80039f0 <MX_TIM10_Init+0x40>)
 80039de:	f002 fca1 	bl	8006324 <HAL_TIM_Base_Init>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80039e8:	f000 f9a2 	bl	8003d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80039ec:	bf00      	nop
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20000344 	.word	0x20000344
 80039f4:	40014400 	.word	0x40014400

080039f8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80039fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003a38 <MX_TIM11_Init+0x40>)
 80039fe:	4a0f      	ldr	r2, [pc, #60]	@ (8003a3c <MX_TIM11_Init+0x44>)
 8003a00:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8003a02:	4b0d      	ldr	r3, [pc, #52]	@ (8003a38 <MX_TIM11_Init+0x40>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a08:	4b0b      	ldr	r3, [pc, #44]	@ (8003a38 <MX_TIM11_Init+0x40>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a38 <MX_TIM11_Init+0x40>)
 8003a10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a14:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a16:	4b08      	ldr	r3, [pc, #32]	@ (8003a38 <MX_TIM11_Init+0x40>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a1c:	4b06      	ldr	r3, [pc, #24]	@ (8003a38 <MX_TIM11_Init+0x40>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003a22:	4805      	ldr	r0, [pc, #20]	@ (8003a38 <MX_TIM11_Init+0x40>)
 8003a24:	f002 fc7e 	bl	8006324 <HAL_TIM_Base_Init>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8003a2e:	f000 f97f 	bl	8003d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	2000038c 	.word	0x2000038c
 8003a3c:	40014800 	.word	0x40014800

08003a40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a44:	4b11      	ldr	r3, [pc, #68]	@ (8003a8c <MX_USART1_UART_Init+0x4c>)
 8003a46:	4a12      	ldr	r2, [pc, #72]	@ (8003a90 <MX_USART1_UART_Init+0x50>)
 8003a48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003a4a:	4b10      	ldr	r3, [pc, #64]	@ (8003a8c <MX_USART1_UART_Init+0x4c>)
 8003a4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003a50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a52:	4b0e      	ldr	r3, [pc, #56]	@ (8003a8c <MX_USART1_UART_Init+0x4c>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a58:	4b0c      	ldr	r3, [pc, #48]	@ (8003a8c <MX_USART1_UART_Init+0x4c>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a8c <MX_USART1_UART_Init+0x4c>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a64:	4b09      	ldr	r3, [pc, #36]	@ (8003a8c <MX_USART1_UART_Init+0x4c>)
 8003a66:	220c      	movs	r2, #12
 8003a68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a6a:	4b08      	ldr	r3, [pc, #32]	@ (8003a8c <MX_USART1_UART_Init+0x4c>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a70:	4b06      	ldr	r3, [pc, #24]	@ (8003a8c <MX_USART1_UART_Init+0x4c>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a76:	4805      	ldr	r0, [pc, #20]	@ (8003a8c <MX_USART1_UART_Init+0x4c>)
 8003a78:	f003 f948 	bl	8006d0c <HAL_UART_Init>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003a82:	f000 f955 	bl	8003d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003a86:	bf00      	nop
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	200003d4 	.word	0x200003d4
 8003a90:	40011000 	.word	0x40011000

08003a94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003a98:	4b11      	ldr	r3, [pc, #68]	@ (8003ae0 <MX_USART2_UART_Init+0x4c>)
 8003a9a:	4a12      	ldr	r2, [pc, #72]	@ (8003ae4 <MX_USART2_UART_Init+0x50>)
 8003a9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003a9e:	4b10      	ldr	r3, [pc, #64]	@ (8003ae0 <MX_USART2_UART_Init+0x4c>)
 8003aa0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003aa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae0 <MX_USART2_UART_Init+0x4c>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003aac:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae0 <MX_USART2_UART_Init+0x4c>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae0 <MX_USART2_UART_Init+0x4c>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003ab8:	4b09      	ldr	r3, [pc, #36]	@ (8003ae0 <MX_USART2_UART_Init+0x4c>)
 8003aba:	220c      	movs	r2, #12
 8003abc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003abe:	4b08      	ldr	r3, [pc, #32]	@ (8003ae0 <MX_USART2_UART_Init+0x4c>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ac4:	4b06      	ldr	r3, [pc, #24]	@ (8003ae0 <MX_USART2_UART_Init+0x4c>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003aca:	4805      	ldr	r0, [pc, #20]	@ (8003ae0 <MX_USART2_UART_Init+0x4c>)
 8003acc:	f003 f91e 	bl	8006d0c <HAL_UART_Init>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003ad6:	f000 f92b 	bl	8003d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	2000041c 	.word	0x2000041c
 8003ae4:	40004400 	.word	0x40004400

08003ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08a      	sub	sp, #40	@ 0x28
 8003aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aee:	f107 0314 	add.w	r3, r7, #20
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	605a      	str	r2, [r3, #4]
 8003af8:	609a      	str	r2, [r3, #8]
 8003afa:	60da      	str	r2, [r3, #12]
 8003afc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	613b      	str	r3, [r7, #16]
 8003b02:	4b6a      	ldr	r3, [pc, #424]	@ (8003cac <MX_GPIO_Init+0x1c4>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b06:	4a69      	ldr	r2, [pc, #420]	@ (8003cac <MX_GPIO_Init+0x1c4>)
 8003b08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b0e:	4b67      	ldr	r3, [pc, #412]	@ (8003cac <MX_GPIO_Init+0x1c4>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	4b63      	ldr	r3, [pc, #396]	@ (8003cac <MX_GPIO_Init+0x1c4>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b22:	4a62      	ldr	r2, [pc, #392]	@ (8003cac <MX_GPIO_Init+0x1c4>)
 8003b24:	f043 0304 	orr.w	r3, r3, #4
 8003b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b2a:	4b60      	ldr	r3, [pc, #384]	@ (8003cac <MX_GPIO_Init+0x1c4>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b36:	2300      	movs	r3, #0
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	4b5c      	ldr	r3, [pc, #368]	@ (8003cac <MX_GPIO_Init+0x1c4>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3e:	4a5b      	ldr	r2, [pc, #364]	@ (8003cac <MX_GPIO_Init+0x1c4>)
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b46:	4b59      	ldr	r3, [pc, #356]	@ (8003cac <MX_GPIO_Init+0x1c4>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	60bb      	str	r3, [r7, #8]
 8003b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b52:	2300      	movs	r3, #0
 8003b54:	607b      	str	r3, [r7, #4]
 8003b56:	4b55      	ldr	r3, [pc, #340]	@ (8003cac <MX_GPIO_Init+0x1c4>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5a:	4a54      	ldr	r2, [pc, #336]	@ (8003cac <MX_GPIO_Init+0x1c4>)
 8003b5c:	f043 0302 	orr.w	r3, r3, #2
 8003b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b62:	4b52      	ldr	r3, [pc, #328]	@ (8003cac <MX_GPIO_Init+0x1c4>)
 8003b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	607b      	str	r3, [r7, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2101      	movs	r1, #1
 8003b72:	484f      	ldr	r0, [pc, #316]	@ (8003cb0 <MX_GPIO_Init+0x1c8>)
 8003b74:	f001 f96e 	bl	8004e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Valve_M1_Pin|Valve_M2_Pin|Valve_M3_Pin|Valve_EN_Pin
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8003b7e:	484d      	ldr	r0, [pc, #308]	@ (8003cb4 <MX_GPIO_Init+0x1cc>)
 8003b80:	f001 f968 	bl	8004e54 <HAL_GPIO_WritePin>
                          |Valve_RST_Pin|Valve_CLK_Pin|Valve_CCW_Pin|Valve_LATCH_Pin
                          |Valve_TQ_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ESP_RST_Pin|ESP_RTS_Pin|ESP_IO4_Pin|ESP_IO5_Pin, GPIO_PIN_RESET);
 8003b84:	2200      	movs	r2, #0
 8003b86:	21d1      	movs	r1, #209	@ 0xd1
 8003b88:	484b      	ldr	r0, [pc, #300]	@ (8003cb8 <MX_GPIO_Init+0x1d0>)
 8003b8a:	f001 f963 	bl	8004e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin|T_CS_Pin|GPIO_PIN_7
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f241 3186 	movw	r1, #4998	@ 0x1386
 8003b94:	4849      	ldr	r0, [pc, #292]	@ (8003cbc <MX_GPIO_Init+0x1d4>)
 8003b96:	f001 f95d 	bl	8004e54 <HAL_GPIO_WritePin>
                          |ESP_EN_Pin|LCD_CSB9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OneWire_GPIO_Port, OneWire_Pin, GPIO_PIN_SET);
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	2120      	movs	r1, #32
 8003b9e:	4847      	ldr	r0, [pc, #284]	@ (8003cbc <MX_GPIO_Init+0x1d4>)
 8003ba0:	f001 f958 	bl	8004e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8003bb4:	f107 0314 	add.w	r3, r7, #20
 8003bb8:	4619      	mov	r1, r3
 8003bba:	483d      	ldr	r0, [pc, #244]	@ (8003cb0 <MX_GPIO_Init+0x1c8>)
 8003bbc:	f000 ffae 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : Valve_M1_Pin Valve_M2_Pin Valve_M3_Pin Valve_EN_Pin
                           Valve_RST_Pin Valve_CLK_Pin Valve_CCW_Pin Valve_LATCH_Pin
                           Valve_TQ_Pin */
  GPIO_InitStruct.Pin = Valve_M1_Pin|Valve_M2_Pin|Valve_M3_Pin|Valve_EN_Pin
 8003bc0:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8003bc4:	617b      	str	r3, [r7, #20]
                          |Valve_RST_Pin|Valve_CLK_Pin|Valve_CCW_Pin|Valve_LATCH_Pin
                          |Valve_TQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bd2:	f107 0314 	add.w	r3, r7, #20
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4836      	ldr	r0, [pc, #216]	@ (8003cb4 <MX_GPIO_Init+0x1cc>)
 8003bda:	f000 ff9f 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : ESP_RST_Pin ESP_RTS_Pin ESP_IO4_Pin ESP_IO5_Pin */
  GPIO_InitStruct.Pin = ESP_RST_Pin|ESP_RTS_Pin|ESP_IO4_Pin|ESP_IO5_Pin;
 8003bde:	23d1      	movs	r3, #209	@ 0xd1
 8003be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003be2:	2301      	movs	r3, #1
 8003be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bea:	2300      	movs	r3, #0
 8003bec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bee:	f107 0314 	add.w	r3, r7, #20
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4830      	ldr	r0, [pc, #192]	@ (8003cb8 <MX_GPIO_Init+0x1d0>)
 8003bf6:	f000 ff91 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_CTS_Pin */
  GPIO_InitStruct.Pin = ESP_CTS_Pin;
 8003bfa:	2320      	movs	r3, #32
 8003bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ESP_CTS_GPIO_Port, &GPIO_InitStruct);
 8003c06:	f107 0314 	add.w	r3, r7, #20
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	482a      	ldr	r0, [pc, #168]	@ (8003cb8 <MX_GPIO_Init+0x1d0>)
 8003c0e:	f000 ff85 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_DC_Pin T_CS_Pin PB7
                           ESP_EN_Pin LCD_CSB9_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|T_CS_Pin|GPIO_PIN_7
 8003c12:	f241 3386 	movw	r3, #4998	@ 0x1386
 8003c16:	617b      	str	r3, [r7, #20]
                          |ESP_EN_Pin|LCD_CSB9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c20:	2300      	movs	r3, #0
 8003c22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c24:	f107 0314 	add.w	r3, r7, #20
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4824      	ldr	r0, [pc, #144]	@ (8003cbc <MX_GPIO_Init+0x1d4>)
 8003c2c:	f000 ff76 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003c30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003c36:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c40:	f107 0314 	add.w	r3, r7, #20
 8003c44:	4619      	mov	r1, r3
 8003c46:	481c      	ldr	r0, [pc, #112]	@ (8003cb8 <MX_GPIO_Init+0x1d0>)
 8003c48:	f000 ff68 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : Valve_ALERT_Pin */
  GPIO_InitStruct.Pin = Valve_ALERT_Pin;
 8003c4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c52:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Valve_ALERT_GPIO_Port, &GPIO_InitStruct);
 8003c5c:	f107 0314 	add.w	r3, r7, #20
 8003c60:	4619      	mov	r1, r3
 8003c62:	4814      	ldr	r0, [pc, #80]	@ (8003cb4 <MX_GPIO_Init+0x1cc>)
 8003c64:	f000 ff5a 	bl	8004b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OneWire_Pin */
  GPIO_InitStruct.Pin = OneWire_Pin;
 8003c68:	2320      	movs	r3, #32
 8003c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003c6c:	2311      	movs	r3, #17
 8003c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c70:	2300      	movs	r3, #0
 8003c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c74:	2302      	movs	r3, #2
 8003c76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OneWire_GPIO_Port, &GPIO_InitStruct);
 8003c78:	f107 0314 	add.w	r3, r7, #20
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	480f      	ldr	r0, [pc, #60]	@ (8003cbc <MX_GPIO_Init+0x1d4>)
 8003c80:	f000 ff4c 	bl	8004b1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003c84:	2200      	movs	r2, #0
 8003c86:	2100      	movs	r1, #0
 8003c88:	2017      	movs	r0, #23
 8003c8a:	f000 fcb6 	bl	80045fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003c8e:	2017      	movs	r0, #23
 8003c90:	f000 fccf 	bl	8004632 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c94:	2200      	movs	r2, #0
 8003c96:	2100      	movs	r1, #0
 8003c98:	2025      	movs	r0, #37	@ 0x25
 8003c9a:	f000 fcae 	bl	80045fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c9e:	2025      	movs	r0, #37	@ 0x25
 8003ca0:	f000 fcc7 	bl	8004632 <HAL_NVIC_EnableIRQ>

/* USER CODE END MX_GPIO_Init_2 */
}
 8003ca4:	bf00      	nop
 8003ca6:	3728      	adds	r7, #40	@ 0x28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	40021c00 	.word	0x40021c00
 8003cb4:	40020800 	.word	0x40020800
 8003cb8:	40020000 	.word	0x40020000
 8003cbc:	40020400 	.word	0x40020400

08003cc0 <getFloatString>:

/* USER CODE BEGIN 4 */

void getFloatString(char *buffer, float number){
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	ed87 0a00 	vstr	s0, [r7]
	int intNumber = (int)floor(number);
 8003ccc:	6838      	ldr	r0, [r7, #0]
 8003cce:	f7fc fd7d 	bl	80007cc <__aeabi_f2d>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	ec43 2b10 	vmov	d0, r2, r3
 8003cda:	f004 fde5 	bl	80088a8 <floor>
 8003cde:	ec53 2b10 	vmov	r2, r3, d0
 8003ce2:	4610      	mov	r0, r2
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	f7fc fe51 	bl	800098c <__aeabi_d2iz>
 8003cea:	4603      	mov	r3, r0
 8003cec:	60fb      	str	r3, [r7, #12]
	int floatNumber = (int)((number - (float)intNumber)*10000);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	ee07 3a90 	vmov	s15, r3
 8003cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cf8:	ed97 7a00 	vldr	s14, [r7]
 8003cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d00:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003d28 <getFloatString+0x68>
 8003d04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d0c:	ee17 3a90 	vmov	r3, s15
 8003d10:	60bb      	str	r3, [r7, #8]
	sprintf(buffer, "%d,%d", intNumber, floatNumber);
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4905      	ldr	r1, [pc, #20]	@ (8003d2c <getFloatString+0x6c>)
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f004 f8df 	bl	8007edc <siprintf>
}
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	461c4000 	.word	0x461c4000
 8003d2c:	08008b98 	.word	0x08008b98

08003d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d34:	b672      	cpsid	i
}
 8003d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d38:	bf00      	nop
 8003d3a:	e7fd      	b.n	8003d38 <Error_Handler+0x8>

08003d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d42:	2300      	movs	r3, #0
 8003d44:	607b      	str	r3, [r7, #4]
 8003d46:	4b10      	ldr	r3, [pc, #64]	@ (8003d88 <HAL_MspInit+0x4c>)
 8003d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4a:	4a0f      	ldr	r2, [pc, #60]	@ (8003d88 <HAL_MspInit+0x4c>)
 8003d4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d52:	4b0d      	ldr	r3, [pc, #52]	@ (8003d88 <HAL_MspInit+0x4c>)
 8003d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d5a:	607b      	str	r3, [r7, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	603b      	str	r3, [r7, #0]
 8003d62:	4b09      	ldr	r3, [pc, #36]	@ (8003d88 <HAL_MspInit+0x4c>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	4a08      	ldr	r2, [pc, #32]	@ (8003d88 <HAL_MspInit+0x4c>)
 8003d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d6e:	4b06      	ldr	r3, [pc, #24]	@ (8003d88 <HAL_MspInit+0x4c>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40023800 	.word	0x40023800

08003d8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08c      	sub	sp, #48	@ 0x30
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d94:	f107 031c 	add.w	r3, r7, #28
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	605a      	str	r2, [r3, #4]
 8003d9e:	609a      	str	r2, [r3, #8]
 8003da0:	60da      	str	r2, [r3, #12]
 8003da2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a4a      	ldr	r2, [pc, #296]	@ (8003ed4 <HAL_SPI_MspInit+0x148>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d12d      	bne.n	8003e0a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	61bb      	str	r3, [r7, #24]
 8003db2:	4b49      	ldr	r3, [pc, #292]	@ (8003ed8 <HAL_SPI_MspInit+0x14c>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db6:	4a48      	ldr	r2, [pc, #288]	@ (8003ed8 <HAL_SPI_MspInit+0x14c>)
 8003db8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dbe:	4b46      	ldr	r3, [pc, #280]	@ (8003ed8 <HAL_SPI_MspInit+0x14c>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dc6:	61bb      	str	r3, [r7, #24]
 8003dc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]
 8003dce:	4b42      	ldr	r3, [pc, #264]	@ (8003ed8 <HAL_SPI_MspInit+0x14c>)
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd2:	4a41      	ldr	r2, [pc, #260]	@ (8003ed8 <HAL_SPI_MspInit+0x14c>)
 8003dd4:	f043 0302 	orr.w	r3, r3, #2
 8003dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dda:	4b3f      	ldr	r3, [pc, #252]	@ (8003ed8 <HAL_SPI_MspInit+0x14c>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8003de6:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8003dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dec:	2302      	movs	r3, #2
 8003dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df4:	2303      	movs	r3, #3
 8003df6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003df8:	2305      	movs	r3, #5
 8003dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dfc:	f107 031c 	add.w	r3, r7, #28
 8003e00:	4619      	mov	r1, r3
 8003e02:	4836      	ldr	r0, [pc, #216]	@ (8003edc <HAL_SPI_MspInit+0x150>)
 8003e04:	f000 fe8a 	bl	8004b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8003e08:	e060      	b.n	8003ecc <HAL_SPI_MspInit+0x140>
  else if(hspi->Instance==SPI4)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a34      	ldr	r2, [pc, #208]	@ (8003ee0 <HAL_SPI_MspInit+0x154>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d15b      	bne.n	8003ecc <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003e14:	2300      	movs	r3, #0
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	4b2f      	ldr	r3, [pc, #188]	@ (8003ed8 <HAL_SPI_MspInit+0x14c>)
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1c:	4a2e      	ldr	r2, [pc, #184]	@ (8003ed8 <HAL_SPI_MspInit+0x14c>)
 8003e1e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e22:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e24:	4b2c      	ldr	r3, [pc, #176]	@ (8003ed8 <HAL_SPI_MspInit+0x14c>)
 8003e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	4b28      	ldr	r3, [pc, #160]	@ (8003ed8 <HAL_SPI_MspInit+0x14c>)
 8003e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e38:	4a27      	ldr	r2, [pc, #156]	@ (8003ed8 <HAL_SPI_MspInit+0x14c>)
 8003e3a:	f043 0301 	orr.w	r3, r3, #1
 8003e3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e40:	4b25      	ldr	r3, [pc, #148]	@ (8003ed8 <HAL_SPI_MspInit+0x14c>)
 8003e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60bb      	str	r3, [r7, #8]
 8003e50:	4b21      	ldr	r3, [pc, #132]	@ (8003ed8 <HAL_SPI_MspInit+0x14c>)
 8003e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e54:	4a20      	ldr	r2, [pc, #128]	@ (8003ed8 <HAL_SPI_MspInit+0x14c>)
 8003e56:	f043 0302 	orr.w	r3, r3, #2
 8003e5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e5c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ed8 <HAL_SPI_MspInit+0x14c>)
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	60bb      	str	r3, [r7, #8]
 8003e66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e68:	2302      	movs	r3, #2
 8003e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e70:	2300      	movs	r3, #0
 8003e72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e74:	2303      	movs	r3, #3
 8003e76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003e78:	2305      	movs	r3, #5
 8003e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e7c:	f107 031c 	add.w	r3, r7, #28
 8003e80:	4619      	mov	r1, r3
 8003e82:	4818      	ldr	r0, [pc, #96]	@ (8003ee4 <HAL_SPI_MspInit+0x158>)
 8003e84:	f000 fe4a 	bl	8004b1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003e88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8e:	2302      	movs	r3, #2
 8003e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e96:	2303      	movs	r3, #3
 8003e98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8003e9a:	2306      	movs	r3, #6
 8003e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e9e:	f107 031c 	add.w	r3, r7, #28
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	480d      	ldr	r0, [pc, #52]	@ (8003edc <HAL_SPI_MspInit+0x150>)
 8003ea6:	f000 fe39 	bl	8004b1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003eaa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8003ebc:	2306      	movs	r3, #6
 8003ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ec0:	f107 031c 	add.w	r3, r7, #28
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4807      	ldr	r0, [pc, #28]	@ (8003ee4 <HAL_SPI_MspInit+0x158>)
 8003ec8:	f000 fe28 	bl	8004b1c <HAL_GPIO_Init>
}
 8003ecc:	bf00      	nop
 8003ece:	3730      	adds	r7, #48	@ 0x30
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40003800 	.word	0x40003800
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	40020400 	.word	0x40020400
 8003ee0:	40013400 	.word	0x40013400
 8003ee4:	40020000 	.word	0x40020000

08003ee8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ef8:	d116      	bne.n	8003f28 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	4b32      	ldr	r3, [pc, #200]	@ (8003fc8 <HAL_TIM_Base_MspInit+0xe0>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f02:	4a31      	ldr	r2, [pc, #196]	@ (8003fc8 <HAL_TIM_Base_MspInit+0xe0>)
 8003f04:	f043 0301 	orr.w	r3, r3, #1
 8003f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8003fc8 <HAL_TIM_Base_MspInit+0xe0>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003f16:	2200      	movs	r2, #0
 8003f18:	2100      	movs	r1, #0
 8003f1a:	201c      	movs	r0, #28
 8003f1c:	f000 fb6d 	bl	80045fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003f20:	201c      	movs	r0, #28
 8003f22:	f000 fb86 	bl	8004632 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003f26:	e04a      	b.n	8003fbe <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a27      	ldr	r2, [pc, #156]	@ (8003fcc <HAL_TIM_Base_MspInit+0xe4>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d116      	bne.n	8003f60 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f32:	2300      	movs	r3, #0
 8003f34:	613b      	str	r3, [r7, #16]
 8003f36:	4b24      	ldr	r3, [pc, #144]	@ (8003fc8 <HAL_TIM_Base_MspInit+0xe0>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3a:	4a23      	ldr	r2, [pc, #140]	@ (8003fc8 <HAL_TIM_Base_MspInit+0xe0>)
 8003f3c:	f043 0302 	orr.w	r3, r3, #2
 8003f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f42:	4b21      	ldr	r3, [pc, #132]	@ (8003fc8 <HAL_TIM_Base_MspInit+0xe0>)
 8003f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8003f4e:	2200      	movs	r2, #0
 8003f50:	2103      	movs	r1, #3
 8003f52:	201d      	movs	r0, #29
 8003f54:	f000 fb51 	bl	80045fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003f58:	201d      	movs	r0, #29
 8003f5a:	f000 fb6a 	bl	8004632 <HAL_NVIC_EnableIRQ>
}
 8003f5e:	e02e      	b.n	8003fbe <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a1a      	ldr	r2, [pc, #104]	@ (8003fd0 <HAL_TIM_Base_MspInit+0xe8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d116      	bne.n	8003f98 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	4b16      	ldr	r3, [pc, #88]	@ (8003fc8 <HAL_TIM_Base_MspInit+0xe0>)
 8003f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f72:	4a15      	ldr	r2, [pc, #84]	@ (8003fc8 <HAL_TIM_Base_MspInit+0xe0>)
 8003f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f78:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f7a:	4b13      	ldr	r3, [pc, #76]	@ (8003fc8 <HAL_TIM_Base_MspInit+0xe0>)
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8003f86:	2200      	movs	r2, #0
 8003f88:	2101      	movs	r1, #1
 8003f8a:	2019      	movs	r0, #25
 8003f8c:	f000 fb35 	bl	80045fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003f90:	2019      	movs	r0, #25
 8003f92:	f000 fb4e 	bl	8004632 <HAL_NVIC_EnableIRQ>
}
 8003f96:	e012      	b.n	8003fbe <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM11)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8003fd4 <HAL_TIM_Base_MspInit+0xec>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d10d      	bne.n	8003fbe <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	4b08      	ldr	r3, [pc, #32]	@ (8003fc8 <HAL_TIM_Base_MspInit+0xe0>)
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003faa:	4a07      	ldr	r2, [pc, #28]	@ (8003fc8 <HAL_TIM_Base_MspInit+0xe0>)
 8003fac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fb2:	4b05      	ldr	r3, [pc, #20]	@ (8003fc8 <HAL_TIM_Base_MspInit+0xe0>)
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fba:	60bb      	str	r3, [r7, #8]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
}
 8003fbe:	bf00      	nop
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	40000400 	.word	0x40000400
 8003fd0:	40014400 	.word	0x40014400
 8003fd4:	40014800 	.word	0x40014800

08003fd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08c      	sub	sp, #48	@ 0x30
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe0:	f107 031c 	add.w	r3, r7, #28
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	605a      	str	r2, [r3, #4]
 8003fea:	609a      	str	r2, [r3, #8]
 8003fec:	60da      	str	r2, [r3, #12]
 8003fee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a36      	ldr	r2, [pc, #216]	@ (80040d0 <HAL_UART_MspInit+0xf8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d135      	bne.n	8004066 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61bb      	str	r3, [r7, #24]
 8003ffe:	4b35      	ldr	r3, [pc, #212]	@ (80040d4 <HAL_UART_MspInit+0xfc>)
 8004000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004002:	4a34      	ldr	r2, [pc, #208]	@ (80040d4 <HAL_UART_MspInit+0xfc>)
 8004004:	f043 0310 	orr.w	r3, r3, #16
 8004008:	6453      	str	r3, [r2, #68]	@ 0x44
 800400a:	4b32      	ldr	r3, [pc, #200]	@ (80040d4 <HAL_UART_MspInit+0xfc>)
 800400c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	61bb      	str	r3, [r7, #24]
 8004014:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004016:	2300      	movs	r3, #0
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	4b2e      	ldr	r3, [pc, #184]	@ (80040d4 <HAL_UART_MspInit+0xfc>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401e:	4a2d      	ldr	r2, [pc, #180]	@ (80040d4 <HAL_UART_MspInit+0xfc>)
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	6313      	str	r3, [r2, #48]	@ 0x30
 8004026:	4b2b      	ldr	r3, [pc, #172]	@ (80040d4 <HAL_UART_MspInit+0xfc>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004032:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004038:	2302      	movs	r3, #2
 800403a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403c:	2300      	movs	r3, #0
 800403e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004040:	2303      	movs	r3, #3
 8004042:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004044:	2307      	movs	r3, #7
 8004046:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004048:	f107 031c 	add.w	r3, r7, #28
 800404c:	4619      	mov	r1, r3
 800404e:	4822      	ldr	r0, [pc, #136]	@ (80040d8 <HAL_UART_MspInit+0x100>)
 8004050:	f000 fd64 	bl	8004b1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004054:	2200      	movs	r2, #0
 8004056:	2100      	movs	r1, #0
 8004058:	2025      	movs	r0, #37	@ 0x25
 800405a:	f000 face 	bl	80045fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800405e:	2025      	movs	r0, #37	@ 0x25
 8004060:	f000 fae7 	bl	8004632 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004064:	e030      	b.n	80040c8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1c      	ldr	r2, [pc, #112]	@ (80040dc <HAL_UART_MspInit+0x104>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d12b      	bne.n	80040c8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004070:	2300      	movs	r3, #0
 8004072:	613b      	str	r3, [r7, #16]
 8004074:	4b17      	ldr	r3, [pc, #92]	@ (80040d4 <HAL_UART_MspInit+0xfc>)
 8004076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004078:	4a16      	ldr	r2, [pc, #88]	@ (80040d4 <HAL_UART_MspInit+0xfc>)
 800407a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800407e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004080:	4b14      	ldr	r3, [pc, #80]	@ (80040d4 <HAL_UART_MspInit+0xfc>)
 8004082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	4b10      	ldr	r3, [pc, #64]	@ (80040d4 <HAL_UART_MspInit+0xfc>)
 8004092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004094:	4a0f      	ldr	r2, [pc, #60]	@ (80040d4 <HAL_UART_MspInit+0xfc>)
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	6313      	str	r3, [r2, #48]	@ 0x30
 800409c:	4b0d      	ldr	r3, [pc, #52]	@ (80040d4 <HAL_UART_MspInit+0xfc>)
 800409e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80040a8:	230c      	movs	r3, #12
 80040aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ac:	2302      	movs	r3, #2
 80040ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b0:	2300      	movs	r3, #0
 80040b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b4:	2303      	movs	r3, #3
 80040b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040b8:	2307      	movs	r3, #7
 80040ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040bc:	f107 031c 	add.w	r3, r7, #28
 80040c0:	4619      	mov	r1, r3
 80040c2:	4805      	ldr	r0, [pc, #20]	@ (80040d8 <HAL_UART_MspInit+0x100>)
 80040c4:	f000 fd2a 	bl	8004b1c <HAL_GPIO_Init>
}
 80040c8:	bf00      	nop
 80040ca:	3730      	adds	r7, #48	@ 0x30
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40011000 	.word	0x40011000
 80040d4:	40023800 	.word	0x40023800
 80040d8:	40020000 	.word	0x40020000
 80040dc:	40004400 	.word	0x40004400

080040e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80040e4:	bf00      	nop
 80040e6:	e7fd      	b.n	80040e4 <NMI_Handler+0x4>

080040e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040ec:	bf00      	nop
 80040ee:	e7fd      	b.n	80040ec <HardFault_Handler+0x4>

080040f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040f4:	bf00      	nop
 80040f6:	e7fd      	b.n	80040f4 <MemManage_Handler+0x4>

080040f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040fc:	bf00      	nop
 80040fe:	e7fd      	b.n	80040fc <BusFault_Handler+0x4>

08004100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004104:	bf00      	nop
 8004106:	e7fd      	b.n	8004104 <UsageFault_Handler+0x4>

08004108 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800410c:	bf00      	nop
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004116:	b480      	push	{r7}
 8004118:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800411a:	bf00      	nop
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004128:	bf00      	nop
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004136:	f000 f941 	bl	80043bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800413a:	bf00      	nop
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	flag |= SCAN_PAD;
 8004144:	4b06      	ldr	r3, [pc, #24]	@ (8004160 <EXTI9_5_IRQHandler+0x20>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800414c:	b2da      	uxtb	r2, r3
 800414e:	4b04      	ldr	r3, [pc, #16]	@ (8004160 <EXTI9_5_IRQHandler+0x20>)
 8004150:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004152:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004156:	f000 fe97 	bl	8004e88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800415a:	bf00      	nop
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	20000464 	.word	0x20000464

08004164 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	act |= (TEMP_UPDATE);
 8004168:	4b09      	ldr	r3, [pc, #36]	@ (8004190 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	f043 0301 	orr.w	r3, r3, #1
 8004170:	b2da      	uxtb	r2, r3
 8004172:	4b07      	ldr	r3, [pc, #28]	@ (8004190 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8004174:	701a      	strb	r2, [r3, #0]
	act |= (TEMP_UPDATE_);
 8004176:	4b06      	ldr	r3, [pc, #24]	@ (8004190 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	f043 0302 	orr.w	r3, r3, #2
 800417e:	b2da      	uxtb	r2, r3
 8004180:	4b03      	ldr	r3, [pc, #12]	@ (8004190 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8004182:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8004184:	4803      	ldr	r0, [pc, #12]	@ (8004194 <TIM1_UP_TIM10_IRQHandler+0x30>)
 8004186:	f002 fa30 	bl	80065ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800418a:	bf00      	nop
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000465 	.word	0x20000465
 8004194:	20000344 	.word	0x20000344

08004198 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	//act |= (TEMP_UPDATE);
  command |= RUN_;
 800419c:	4b05      	ldr	r3, [pc, #20]	@ (80041b4 <TIM2_IRQHandler+0x1c>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	4b03      	ldr	r3, [pc, #12]	@ (80041b4 <TIM2_IRQHandler+0x1c>)
 80041a8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80041aa:	4803      	ldr	r0, [pc, #12]	@ (80041b8 <TIM2_IRQHandler+0x20>)
 80041ac:	f002 fa1d 	bl	80065ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80041b0:	bf00      	nop
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	20000466 	.word	0x20000466
 80041b8:	200002b4 	.word	0x200002b4

080041bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//reach_temperature();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80041c0:	4802      	ldr	r0, [pc, #8]	@ (80041cc <TIM3_IRQHandler+0x10>)
 80041c2:	f002 fa12 	bl	80065ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80041c6:	bf00      	nop
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	200002fc 	.word	0x200002fc

080041d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint8_t command = USART1->DR & 0xFF;
 80041d6:	4b12      	ldr	r3, [pc, #72]	@ (8004220 <USART1_IRQHandler+0x50>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	71fb      	strb	r3, [r7, #7]
	cmd.status_busy = true;
 80041dc:	4b11      	ldr	r3, [pc, #68]	@ (8004224 <USART1_IRQHandler+0x54>)
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 292c 	strb.w	r2, [r3, #2348]	@ 0x92c
	rxBuffer[0] = command;
 80041e4:	4a10      	ldr	r2, [pc, #64]	@ (8004228 <USART1_IRQHandler+0x58>)
 80041e6:	79fb      	ldrb	r3, [r7, #7]
 80041e8:	7013      	strb	r3, [r2, #0]
    char tmp[2] = {command, '\0'};        // Convert to C-string
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	713b      	strb	r3, [r7, #4]
 80041ee:	2300      	movs	r3, #0
 80041f0:	717b      	strb	r3, [r7, #5]
    strcat(cmd.cmd_all, tmp);
 80041f2:	1d3b      	adds	r3, r7, #4
 80041f4:	4619      	mov	r1, r3
 80041f6:	480d      	ldr	r0, [pc, #52]	@ (800422c <USART1_IRQHandler+0x5c>)
 80041f8:	f003 fe98 	bl	8007f2c <strcat>
	//HAL_UART_Transmit(&huart2, rxBuffer,1, HAL_MAX_DELAY);

	__HAL_UART_CLEAR_OREFLAG(&huart1);
 80041fc:	2300      	movs	r3, #0
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	4b0b      	ldr	r3, [pc, #44]	@ (8004230 <USART1_IRQHandler+0x60>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	603b      	str	r3, [r7, #0]
 8004208:	4b09      	ldr	r3, [pc, #36]	@ (8004230 <USART1_IRQHandler+0x60>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004212:	4807      	ldr	r0, [pc, #28]	@ (8004230 <USART1_IRQHandler+0x60>)
 8004214:	f002 fe7a 	bl	8006f0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004218:	bf00      	nop
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40011000 	.word	0x40011000
 8004224:	20000474 	.word	0x20000474
 8004228:	20000da4 	.word	0x20000da4
 800422c:	200005a0 	.word	0x200005a0
 8004230:	200003d4 	.word	0x200003d4

08004234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800423c:	4a14      	ldr	r2, [pc, #80]	@ (8004290 <_sbrk+0x5c>)
 800423e:	4b15      	ldr	r3, [pc, #84]	@ (8004294 <_sbrk+0x60>)
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004248:	4b13      	ldr	r3, [pc, #76]	@ (8004298 <_sbrk+0x64>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d102      	bne.n	8004256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004250:	4b11      	ldr	r3, [pc, #68]	@ (8004298 <_sbrk+0x64>)
 8004252:	4a12      	ldr	r2, [pc, #72]	@ (800429c <_sbrk+0x68>)
 8004254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004256:	4b10      	ldr	r3, [pc, #64]	@ (8004298 <_sbrk+0x64>)
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4413      	add	r3, r2
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	429a      	cmp	r2, r3
 8004262:	d207      	bcs.n	8004274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004264:	f003 fe9e 	bl	8007fa4 <__errno>
 8004268:	4603      	mov	r3, r0
 800426a:	220c      	movs	r2, #12
 800426c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800426e:	f04f 33ff 	mov.w	r3, #4294967295
 8004272:	e009      	b.n	8004288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004274:	4b08      	ldr	r3, [pc, #32]	@ (8004298 <_sbrk+0x64>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800427a:	4b07      	ldr	r3, [pc, #28]	@ (8004298 <_sbrk+0x64>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4413      	add	r3, r2
 8004282:	4a05      	ldr	r2, [pc, #20]	@ (8004298 <_sbrk+0x64>)
 8004284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004286:	68fb      	ldr	r3, [r7, #12]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	20020000 	.word	0x20020000
 8004294:	00000400 	.word	0x00000400
 8004298:	20000da8 	.word	0x20000da8
 800429c:	20000f18 	.word	0x20000f18

080042a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042a4:	4b06      	ldr	r3, [pc, #24]	@ (80042c0 <SystemInit+0x20>)
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042aa:	4a05      	ldr	r2, [pc, #20]	@ (80042c0 <SystemInit+0x20>)
 80042ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80042b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042b4:	bf00      	nop
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	e000ed00 	.word	0xe000ed00

080042c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80042c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80042fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80042c8:	f7ff ffea 	bl	80042a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042cc:	480c      	ldr	r0, [pc, #48]	@ (8004300 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80042ce:	490d      	ldr	r1, [pc, #52]	@ (8004304 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80042d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004308 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80042d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042d4:	e002      	b.n	80042dc <LoopCopyDataInit>

080042d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042da:	3304      	adds	r3, #4

080042dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042e0:	d3f9      	bcc.n	80042d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042e2:	4a0a      	ldr	r2, [pc, #40]	@ (800430c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80042e4:	4c0a      	ldr	r4, [pc, #40]	@ (8004310 <LoopFillZerobss+0x22>)
  movs r3, #0
 80042e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042e8:	e001      	b.n	80042ee <LoopFillZerobss>

080042ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042ec:	3204      	adds	r2, #4

080042ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042f0:	d3fb      	bcc.n	80042ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042f2:	f003 fe5d 	bl	8007fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042f6:	f7ff f867 	bl	80033c8 <main>
  bx  lr    
 80042fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80042fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004304:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8004308:	08009760 	.word	0x08009760
  ldr r2, =_sbss
 800430c:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8004310:	20000f18 	.word	0x20000f18

08004314 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004314:	e7fe      	b.n	8004314 <ADC_IRQHandler>
	...

08004318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800431c:	4b0e      	ldr	r3, [pc, #56]	@ (8004358 <HAL_Init+0x40>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a0d      	ldr	r2, [pc, #52]	@ (8004358 <HAL_Init+0x40>)
 8004322:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004326:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004328:	4b0b      	ldr	r3, [pc, #44]	@ (8004358 <HAL_Init+0x40>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a0a      	ldr	r2, [pc, #40]	@ (8004358 <HAL_Init+0x40>)
 800432e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004332:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004334:	4b08      	ldr	r3, [pc, #32]	@ (8004358 <HAL_Init+0x40>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a07      	ldr	r2, [pc, #28]	@ (8004358 <HAL_Init+0x40>)
 800433a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800433e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004340:	2003      	movs	r0, #3
 8004342:	f000 f94f 	bl	80045e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004346:	200f      	movs	r0, #15
 8004348:	f000 f808 	bl	800435c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800434c:	f7ff fcf6 	bl	8003d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40023c00 	.word	0x40023c00

0800435c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004364:	4b12      	ldr	r3, [pc, #72]	@ (80043b0 <HAL_InitTick+0x54>)
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	4b12      	ldr	r3, [pc, #72]	@ (80043b4 <HAL_InitTick+0x58>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	4619      	mov	r1, r3
 800436e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004372:	fbb3 f3f1 	udiv	r3, r3, r1
 8004376:	fbb2 f3f3 	udiv	r3, r2, r3
 800437a:	4618      	mov	r0, r3
 800437c:	f000 f967 	bl	800464e <HAL_SYSTICK_Config>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e00e      	b.n	80043a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b0f      	cmp	r3, #15
 800438e:	d80a      	bhi.n	80043a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004390:	2200      	movs	r2, #0
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	f04f 30ff 	mov.w	r0, #4294967295
 8004398:	f000 f92f 	bl	80045fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800439c:	4a06      	ldr	r2, [pc, #24]	@ (80043b8 <HAL_InitTick+0x5c>)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	e000      	b.n	80043a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000110 	.word	0x20000110
 80043b4:	20000118 	.word	0x20000118
 80043b8:	20000114 	.word	0x20000114

080043bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043c0:	4b06      	ldr	r3, [pc, #24]	@ (80043dc <HAL_IncTick+0x20>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	461a      	mov	r2, r3
 80043c6:	4b06      	ldr	r3, [pc, #24]	@ (80043e0 <HAL_IncTick+0x24>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4413      	add	r3, r2
 80043cc:	4a04      	ldr	r2, [pc, #16]	@ (80043e0 <HAL_IncTick+0x24>)
 80043ce:	6013      	str	r3, [r2, #0]
}
 80043d0:	bf00      	nop
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	20000118 	.word	0x20000118
 80043e0:	20000dac 	.word	0x20000dac

080043e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  return uwTick;
 80043e8:	4b03      	ldr	r3, [pc, #12]	@ (80043f8 <HAL_GetTick+0x14>)
 80043ea:	681b      	ldr	r3, [r3, #0]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	20000dac 	.word	0x20000dac

080043fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004404:	f7ff ffee 	bl	80043e4 <HAL_GetTick>
 8004408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004414:	d005      	beq.n	8004422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004416:	4b0a      	ldr	r3, [pc, #40]	@ (8004440 <HAL_Delay+0x44>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4413      	add	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004422:	bf00      	nop
 8004424:	f7ff ffde 	bl	80043e4 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	429a      	cmp	r2, r3
 8004432:	d8f7      	bhi.n	8004424 <HAL_Delay+0x28>
  {
  }
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20000118 	.word	0x20000118

08004444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004454:	4b0c      	ldr	r3, [pc, #48]	@ (8004488 <__NVIC_SetPriorityGrouping+0x44>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004460:	4013      	ands	r3, r2
 8004462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800446c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004470:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004476:	4a04      	ldr	r2, [pc, #16]	@ (8004488 <__NVIC_SetPriorityGrouping+0x44>)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	60d3      	str	r3, [r2, #12]
}
 800447c:	bf00      	nop
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	e000ed00 	.word	0xe000ed00

0800448c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004490:	4b04      	ldr	r3, [pc, #16]	@ (80044a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	0a1b      	lsrs	r3, r3, #8
 8004496:	f003 0307 	and.w	r3, r3, #7
}
 800449a:	4618      	mov	r0, r3
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	e000ed00 	.word	0xe000ed00

080044a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	4603      	mov	r3, r0
 80044b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	db0b      	blt.n	80044d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	f003 021f 	and.w	r2, r3, #31
 80044c0:	4907      	ldr	r1, [pc, #28]	@ (80044e0 <__NVIC_EnableIRQ+0x38>)
 80044c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	2001      	movs	r0, #1
 80044ca:	fa00 f202 	lsl.w	r2, r0, r2
 80044ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	e000e100 	.word	0xe000e100

080044e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	4603      	mov	r3, r0
 80044ec:	6039      	str	r1, [r7, #0]
 80044ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	db0a      	blt.n	800450e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	490c      	ldr	r1, [pc, #48]	@ (8004530 <__NVIC_SetPriority+0x4c>)
 80044fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004502:	0112      	lsls	r2, r2, #4
 8004504:	b2d2      	uxtb	r2, r2
 8004506:	440b      	add	r3, r1
 8004508:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800450c:	e00a      	b.n	8004524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	b2da      	uxtb	r2, r3
 8004512:	4908      	ldr	r1, [pc, #32]	@ (8004534 <__NVIC_SetPriority+0x50>)
 8004514:	79fb      	ldrb	r3, [r7, #7]
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	3b04      	subs	r3, #4
 800451c:	0112      	lsls	r2, r2, #4
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	440b      	add	r3, r1
 8004522:	761a      	strb	r2, [r3, #24]
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	e000e100 	.word	0xe000e100
 8004534:	e000ed00 	.word	0xe000ed00

08004538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004538:	b480      	push	{r7}
 800453a:	b089      	sub	sp, #36	@ 0x24
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 0307 	and.w	r3, r3, #7
 800454a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	f1c3 0307 	rsb	r3, r3, #7
 8004552:	2b04      	cmp	r3, #4
 8004554:	bf28      	it	cs
 8004556:	2304      	movcs	r3, #4
 8004558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	3304      	adds	r3, #4
 800455e:	2b06      	cmp	r3, #6
 8004560:	d902      	bls.n	8004568 <NVIC_EncodePriority+0x30>
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	3b03      	subs	r3, #3
 8004566:	e000      	b.n	800456a <NVIC_EncodePriority+0x32>
 8004568:	2300      	movs	r3, #0
 800456a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800456c:	f04f 32ff 	mov.w	r2, #4294967295
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	43da      	mvns	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	401a      	ands	r2, r3
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004580:	f04f 31ff 	mov.w	r1, #4294967295
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	fa01 f303 	lsl.w	r3, r1, r3
 800458a:	43d9      	mvns	r1, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004590:	4313      	orrs	r3, r2
         );
}
 8004592:	4618      	mov	r0, r3
 8004594:	3724      	adds	r7, #36	@ 0x24
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
	...

080045a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045b0:	d301      	bcc.n	80045b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045b2:	2301      	movs	r3, #1
 80045b4:	e00f      	b.n	80045d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045b6:	4a0a      	ldr	r2, [pc, #40]	@ (80045e0 <SysTick_Config+0x40>)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045be:	210f      	movs	r1, #15
 80045c0:	f04f 30ff 	mov.w	r0, #4294967295
 80045c4:	f7ff ff8e 	bl	80044e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045c8:	4b05      	ldr	r3, [pc, #20]	@ (80045e0 <SysTick_Config+0x40>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045ce:	4b04      	ldr	r3, [pc, #16]	@ (80045e0 <SysTick_Config+0x40>)
 80045d0:	2207      	movs	r2, #7
 80045d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	e000e010 	.word	0xe000e010

080045e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7ff ff29 	bl	8004444 <__NVIC_SetPriorityGrouping>
}
 80045f2:	bf00      	nop
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b086      	sub	sp, #24
 80045fe:	af00      	add	r7, sp, #0
 8004600:	4603      	mov	r3, r0
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	607a      	str	r2, [r7, #4]
 8004606:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004608:	2300      	movs	r3, #0
 800460a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800460c:	f7ff ff3e 	bl	800448c <__NVIC_GetPriorityGrouping>
 8004610:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	68b9      	ldr	r1, [r7, #8]
 8004616:	6978      	ldr	r0, [r7, #20]
 8004618:	f7ff ff8e 	bl	8004538 <NVIC_EncodePriority>
 800461c:	4602      	mov	r2, r0
 800461e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004622:	4611      	mov	r1, r2
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff ff5d 	bl	80044e4 <__NVIC_SetPriority>
}
 800462a:	bf00      	nop
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b082      	sub	sp, #8
 8004636:	af00      	add	r7, sp, #0
 8004638:	4603      	mov	r3, r0
 800463a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800463c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff ff31 	bl	80044a8 <__NVIC_EnableIRQ>
}
 8004646:	bf00      	nop
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b082      	sub	sp, #8
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7ff ffa2 	bl	80045a0 <SysTick_Config>
 800465c:	4603      	mov	r3, r0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b084      	sub	sp, #16
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004672:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004674:	f7ff feb6 	bl	80043e4 <HAL_GetTick>
 8004678:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d008      	beq.n	8004698 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2280      	movs	r2, #128	@ 0x80
 800468a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e052      	b.n	800473e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0216 	bic.w	r2, r2, #22
 80046a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695a      	ldr	r2, [r3, #20]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d103      	bne.n	80046c8 <HAL_DMA_Abort+0x62>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d007      	beq.n	80046d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0208 	bic.w	r2, r2, #8
 80046d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0201 	bic.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046e8:	e013      	b.n	8004712 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046ea:	f7ff fe7b 	bl	80043e4 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b05      	cmp	r3, #5
 80046f6:	d90c      	bls.n	8004712 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2220      	movs	r2, #32
 80046fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2203      	movs	r2, #3
 8004702:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e015      	b.n	800473e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1e4      	bne.n	80046ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004724:	223f      	movs	r2, #63	@ 0x3f
 8004726:	409a      	lsls	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004746:	b480      	push	{r7}
 8004748:	b083      	sub	sp, #12
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d004      	beq.n	8004764 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2280      	movs	r2, #128	@ 0x80
 800475e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e00c      	b.n	800477e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2205      	movs	r2, #5
 8004768:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0201 	bic.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
	...

0800478c <HAL_FLASH_Program_IT>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 800479e:	4b1b      	ldr	r3, [pc, #108]	@ (800480c <HAL_FLASH_Program_IT+0x80>)
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	4a1a      	ldr	r2, [pc, #104]	@ (800480c <HAL_FLASH_Program_IT+0x80>)
 80047a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047a8:	6113      	str	r3, [r2, #16]

  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 80047aa:	4b18      	ldr	r3, [pc, #96]	@ (800480c <HAL_FLASH_Program_IT+0x80>)
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	4a17      	ldr	r2, [pc, #92]	@ (800480c <HAL_FLASH_Program_IT+0x80>)
 80047b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80047b4:	6113      	str	r3, [r2, #16]

  pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 80047b6:	4b16      	ldr	r3, [pc, #88]	@ (8004810 <HAL_FLASH_Program_IT+0x84>)
 80047b8:	2203      	movs	r2, #3
 80047ba:	701a      	strb	r2, [r3, #0]
  pFlash.Address = Address;
 80047bc:	4a14      	ldr	r2, [pc, #80]	@ (8004810 <HAL_FLASH_Program_IT+0x84>)
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	6153      	str	r3, [r2, #20]

  if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d105      	bne.n	80047d4 <HAL_FLASH_Program_IT+0x48>
  {
    /*Program byte (8-bit) at a specified address.*/
    FLASH_Program_Byte(Address, (uint8_t) Data);
 80047c8:	783b      	ldrb	r3, [r7, #0]
 80047ca:	4619      	mov	r1, r3
 80047cc:	68b8      	ldr	r0, [r7, #8]
 80047ce:	f000 f8cb 	bl	8004968 <FLASH_Program_Byte>
 80047d2:	e016      	b.n	8004802 <HAL_FLASH_Program_IT+0x76>
  }
  else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d105      	bne.n	80047e6 <HAL_FLASH_Program_IT+0x5a>
  {
    /*Program halfword (16-bit) at a specified address.*/
    FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80047da:	883b      	ldrh	r3, [r7, #0]
 80047dc:	4619      	mov	r1, r3
 80047de:	68b8      	ldr	r0, [r7, #8]
 80047e0:	f000 f89e 	bl	8004920 <FLASH_Program_HalfWord>
 80047e4:	e00d      	b.n	8004802 <HAL_FLASH_Program_IT+0x76>
  }
  else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d105      	bne.n	80047f8 <HAL_FLASH_Program_IT+0x6c>
  {
    /*Program word (32-bit) at a specified address.*/
    FLASH_Program_Word(Address, (uint32_t) Data);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	4619      	mov	r1, r3
 80047f0:	68b8      	ldr	r0, [r7, #8]
 80047f2:	f000 f873 	bl	80048dc <FLASH_Program_Word>
 80047f6:	e004      	b.n	8004802 <HAL_FLASH_Program_IT+0x76>
  }
  else
  {
    /*Program double word (64-bit) at a specified address.*/
    FLASH_Program_DoubleWord(Address, Data);
 80047f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047fc:	68b8      	ldr	r0, [r7, #8]
 80047fe:	f000 f83b 	bl	8004878 <FLASH_Program_DoubleWord>
  }

  return status;
 8004802:	7dfb      	ldrb	r3, [r7, #23]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40023c00 	.word	0x40023c00
 8004810:	20000db0 	.word	0x20000db0

08004814 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800481e:	4b0b      	ldr	r3, [pc, #44]	@ (800484c <HAL_FLASH_Unlock+0x38>)
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	da0b      	bge.n	800483e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004826:	4b09      	ldr	r3, [pc, #36]	@ (800484c <HAL_FLASH_Unlock+0x38>)
 8004828:	4a09      	ldr	r2, [pc, #36]	@ (8004850 <HAL_FLASH_Unlock+0x3c>)
 800482a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800482c:	4b07      	ldr	r3, [pc, #28]	@ (800484c <HAL_FLASH_Unlock+0x38>)
 800482e:	4a09      	ldr	r2, [pc, #36]	@ (8004854 <HAL_FLASH_Unlock+0x40>)
 8004830:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004832:	4b06      	ldr	r3, [pc, #24]	@ (800484c <HAL_FLASH_Unlock+0x38>)
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	da01      	bge.n	800483e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800483e:	79fb      	ldrb	r3, [r7, #7]
}
 8004840:	4618      	mov	r0, r3
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	40023c00 	.word	0x40023c00
 8004850:	45670123 	.word	0x45670123
 8004854:	cdef89ab 	.word	0xcdef89ab

08004858 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800485c:	4b05      	ldr	r3, [pc, #20]	@ (8004874 <HAL_FLASH_Lock+0x1c>)
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	4a04      	ldr	r2, [pc, #16]	@ (8004874 <HAL_FLASH_Lock+0x1c>)
 8004862:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004866:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	40023c00 	.word	0x40023c00

08004878 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004884:	4b14      	ldr	r3, [pc, #80]	@ (80048d8 <FLASH_Program_DoubleWord+0x60>)
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	4a13      	ldr	r2, [pc, #76]	@ (80048d8 <FLASH_Program_DoubleWord+0x60>)
 800488a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800488e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004890:	4b11      	ldr	r3, [pc, #68]	@ (80048d8 <FLASH_Program_DoubleWord+0x60>)
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	4a10      	ldr	r2, [pc, #64]	@ (80048d8 <FLASH_Program_DoubleWord+0x60>)
 8004896:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800489a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800489c:	4b0e      	ldr	r3, [pc, #56]	@ (80048d8 <FLASH_Program_DoubleWord+0x60>)
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	4a0d      	ldr	r2, [pc, #52]	@ (80048d8 <FLASH_Program_DoubleWord+0x60>)
 80048a2:	f043 0301 	orr.w	r3, r3, #1
 80048a6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80048ae:	f3bf 8f6f 	isb	sy
}
 80048b2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80048b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	000a      	movs	r2, r1
 80048c2:	2300      	movs	r3, #0
 80048c4:	68f9      	ldr	r1, [r7, #12]
 80048c6:	3104      	adds	r1, #4
 80048c8:	4613      	mov	r3, r2
 80048ca:	600b      	str	r3, [r1, #0]
}
 80048cc:	bf00      	nop
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	40023c00 	.word	0x40023c00

080048dc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80048e6:	4b0d      	ldr	r3, [pc, #52]	@ (800491c <FLASH_Program_Word+0x40>)
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	4a0c      	ldr	r2, [pc, #48]	@ (800491c <FLASH_Program_Word+0x40>)
 80048ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80048f2:	4b0a      	ldr	r3, [pc, #40]	@ (800491c <FLASH_Program_Word+0x40>)
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	4a09      	ldr	r2, [pc, #36]	@ (800491c <FLASH_Program_Word+0x40>)
 80048f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80048fe:	4b07      	ldr	r3, [pc, #28]	@ (800491c <FLASH_Program_Word+0x40>)
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	4a06      	ldr	r2, [pc, #24]	@ (800491c <FLASH_Program_Word+0x40>)
 8004904:	f043 0301 	orr.w	r3, r3, #1
 8004908:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	601a      	str	r2, [r3, #0]
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	40023c00 	.word	0x40023c00

08004920 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800492c:	4b0d      	ldr	r3, [pc, #52]	@ (8004964 <FLASH_Program_HalfWord+0x44>)
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	4a0c      	ldr	r2, [pc, #48]	@ (8004964 <FLASH_Program_HalfWord+0x44>)
 8004932:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004936:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004938:	4b0a      	ldr	r3, [pc, #40]	@ (8004964 <FLASH_Program_HalfWord+0x44>)
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	4a09      	ldr	r2, [pc, #36]	@ (8004964 <FLASH_Program_HalfWord+0x44>)
 800493e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004942:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004944:	4b07      	ldr	r3, [pc, #28]	@ (8004964 <FLASH_Program_HalfWord+0x44>)
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	4a06      	ldr	r2, [pc, #24]	@ (8004964 <FLASH_Program_HalfWord+0x44>)
 800494a:	f043 0301 	orr.w	r3, r3, #1
 800494e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	887a      	ldrh	r2, [r7, #2]
 8004954:	801a      	strh	r2, [r3, #0]
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	40023c00 	.word	0x40023c00

08004968 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	460b      	mov	r3, r1
 8004972:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004974:	4b0c      	ldr	r3, [pc, #48]	@ (80049a8 <FLASH_Program_Byte+0x40>)
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	4a0b      	ldr	r2, [pc, #44]	@ (80049a8 <FLASH_Program_Byte+0x40>)
 800497a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800497e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004980:	4b09      	ldr	r3, [pc, #36]	@ (80049a8 <FLASH_Program_Byte+0x40>)
 8004982:	4a09      	ldr	r2, [pc, #36]	@ (80049a8 <FLASH_Program_Byte+0x40>)
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004988:	4b07      	ldr	r3, [pc, #28]	@ (80049a8 <FLASH_Program_Byte+0x40>)
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	4a06      	ldr	r2, [pc, #24]	@ (80049a8 <FLASH_Program_Byte+0x40>)
 800498e:	f043 0301 	orr.w	r3, r3, #1
 8004992:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	78fa      	ldrb	r2, [r7, #3]
 8004998:	701a      	strb	r2, [r3, #0]
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40023c00 	.word	0x40023c00

080049ac <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 80049b8:	4b20      	ldr	r3, [pc, #128]	@ (8004a3c <HAL_FLASHEx_Erase_IT+0x90>)
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	4a1f      	ldr	r2, [pc, #124]	@ (8004a3c <HAL_FLASHEx_Erase_IT+0x90>)
 80049be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049c2:	6113      	str	r3, [r2, #16]

  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 80049c4:	4b1d      	ldr	r3, [pc, #116]	@ (8004a3c <HAL_FLASHEx_Erase_IT+0x90>)
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a3c <HAL_FLASHEx_Erase_IT+0x90>)
 80049ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80049ce:	6113      	str	r3, [r2, #16]

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | \
 80049d0:	4b1a      	ldr	r3, [pc, #104]	@ (8004a3c <HAL_FLASHEx_Erase_IT+0x90>)
 80049d2:	22f3      	movs	r2, #243	@ 0xf3
 80049d4:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d110      	bne.n	8004a00 <HAL_FLASHEx_Erase_IT+0x54>
  {
    /*Mass erase to be done*/
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 80049de:	4b18      	ldr	r3, [pc, #96]	@ (8004a40 <HAL_FLASHEx_Erase_IT+0x94>)
 80049e0:	2202      	movs	r2, #2
 80049e2:	701a      	strb	r2, [r3, #0]
    pFlash.Bank = pEraseInit->Banks;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	4a15      	ldr	r2, [pc, #84]	@ (8004a40 <HAL_FLASHEx_Erase_IT+0x94>)
 80049ea:	6113      	str	r3, [r2, #16]
    FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	4619      	mov	r1, r3
 80049f8:	4610      	mov	r0, r2
 80049fa:	f000 f823 	bl	8004a44 <FLASH_MassErase>
 80049fe:	e018      	b.n	8004a32 <HAL_FLASHEx_Erase_IT+0x86>
    /* Erase by sector to be done*/

    /* Check the parameters */
    assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

    pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
 8004a00:	4b0f      	ldr	r3, [pc, #60]	@ (8004a40 <HAL_FLASHEx_Erase_IT+0x94>)
 8004a02:	2201      	movs	r2, #1
 8004a04:	701a      	strb	r2, [r3, #0]
    pFlash.NbSectorsToErase = pEraseInit->NbSectors;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	4a0d      	ldr	r2, [pc, #52]	@ (8004a40 <HAL_FLASHEx_Erase_IT+0x94>)
 8004a0c:	6053      	str	r3, [r2, #4]
    pFlash.Sector = pEraseInit->Sector;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	4a0b      	ldr	r2, [pc, #44]	@ (8004a40 <HAL_FLASHEx_Erase_IT+0x94>)
 8004a14:	60d3      	str	r3, [r2, #12]
    pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	4b08      	ldr	r3, [pc, #32]	@ (8004a40 <HAL_FLASHEx_Erase_IT+0x94>)
 8004a1e:	721a      	strb	r2, [r3, #8]

    /*Erase 1st sector and wait for IT*/
    FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	4610      	mov	r0, r2
 8004a2e:	f000 f82d 	bl	8004a8c <FLASH_Erase_Sector>
  }

  return status;
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40023c00 	.word	0x40023c00
 8004a40:	20000db0 	.word	0x20000db0

08004a44 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	6039      	str	r1, [r7, #0]
 8004a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004a50:	4b0d      	ldr	r3, [pc, #52]	@ (8004a88 <FLASH_MassErase+0x44>)
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	4a0c      	ldr	r2, [pc, #48]	@ (8004a88 <FLASH_MassErase+0x44>)
 8004a56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a88 <FLASH_MassErase+0x44>)
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	4a09      	ldr	r2, [pc, #36]	@ (8004a88 <FLASH_MassErase+0x44>)
 8004a62:	f043 0304 	orr.w	r3, r3, #4
 8004a66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8004a68:	4b07      	ldr	r3, [pc, #28]	@ (8004a88 <FLASH_MassErase+0x44>)
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	79fb      	ldrb	r3, [r7, #7]
 8004a6e:	021b      	lsls	r3, r3, #8
 8004a70:	4313      	orrs	r3, r2
 8004a72:	4a05      	ldr	r2, [pc, #20]	@ (8004a88 <FLASH_MassErase+0x44>)
 8004a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a78:	6113      	str	r3, [r2, #16]
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	40023c00 	.word	0x40023c00

08004a8c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	460b      	mov	r3, r1
 8004a96:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d102      	bne.n	8004aa8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	e010      	b.n	8004aca <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d103      	bne.n	8004ab6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004aae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	e009      	b.n	8004aca <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004ab6:	78fb      	ldrb	r3, [r7, #3]
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d103      	bne.n	8004ac4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004abc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	e002      	b.n	8004aca <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004ac4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004ac8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004aca:	4b13      	ldr	r3, [pc, #76]	@ (8004b18 <FLASH_Erase_Sector+0x8c>)
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	4a12      	ldr	r2, [pc, #72]	@ (8004b18 <FLASH_Erase_Sector+0x8c>)
 8004ad0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ad4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004ad6:	4b10      	ldr	r3, [pc, #64]	@ (8004b18 <FLASH_Erase_Sector+0x8c>)
 8004ad8:	691a      	ldr	r2, [r3, #16]
 8004ada:	490f      	ldr	r1, [pc, #60]	@ (8004b18 <FLASH_Erase_Sector+0x8c>)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b18 <FLASH_Erase_Sector+0x8c>)
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8004b18 <FLASH_Erase_Sector+0x8c>)
 8004ae8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004aec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004aee:	4b0a      	ldr	r3, [pc, #40]	@ (8004b18 <FLASH_Erase_Sector+0x8c>)
 8004af0:	691a      	ldr	r2, [r3, #16]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	4313      	orrs	r3, r2
 8004af8:	4a07      	ldr	r2, [pc, #28]	@ (8004b18 <FLASH_Erase_Sector+0x8c>)
 8004afa:	f043 0302 	orr.w	r3, r3, #2
 8004afe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004b00:	4b05      	ldr	r3, [pc, #20]	@ (8004b18 <FLASH_Erase_Sector+0x8c>)
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	4a04      	ldr	r2, [pc, #16]	@ (8004b18 <FLASH_Erase_Sector+0x8c>)
 8004b06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b0a:	6113      	str	r3, [r2, #16]
}
 8004b0c:	bf00      	nop
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	40023c00 	.word	0x40023c00

08004b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b089      	sub	sp, #36	@ 0x24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b32:	2300      	movs	r3, #0
 8004b34:	61fb      	str	r3, [r7, #28]
 8004b36:	e159      	b.n	8004dec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b38:	2201      	movs	r2, #1
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	f040 8148 	bne.w	8004de6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d005      	beq.n	8004b6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d130      	bne.n	8004bd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	2203      	movs	r2, #3
 8004b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7e:	43db      	mvns	r3, r3
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	4013      	ands	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bac:	43db      	mvns	r3, r3
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	091b      	lsrs	r3, r3, #4
 8004bba:	f003 0201 	and.w	r2, r3, #1
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d017      	beq.n	8004c0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	2203      	movs	r2, #3
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	43db      	mvns	r3, r3
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f003 0303 	and.w	r3, r3, #3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d123      	bne.n	8004c60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	08da      	lsrs	r2, r3, #3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3208      	adds	r2, #8
 8004c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	220f      	movs	r2, #15
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	43db      	mvns	r3, r3
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	691a      	ldr	r2, [r3, #16]
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	08da      	lsrs	r2, r3, #3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	3208      	adds	r2, #8
 8004c5a:	69b9      	ldr	r1, [r7, #24]
 8004c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	2203      	movs	r2, #3
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	43db      	mvns	r3, r3
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	4013      	ands	r3, r2
 8004c76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f003 0203 	and.w	r2, r3, #3
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	fa02 f303 	lsl.w	r3, r2, r3
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 80a2 	beq.w	8004de6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	4b57      	ldr	r3, [pc, #348]	@ (8004e04 <HAL_GPIO_Init+0x2e8>)
 8004ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004caa:	4a56      	ldr	r2, [pc, #344]	@ (8004e04 <HAL_GPIO_Init+0x2e8>)
 8004cac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004cb2:	4b54      	ldr	r3, [pc, #336]	@ (8004e04 <HAL_GPIO_Init+0x2e8>)
 8004cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cbe:	4a52      	ldr	r2, [pc, #328]	@ (8004e08 <HAL_GPIO_Init+0x2ec>)
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	089b      	lsrs	r3, r3, #2
 8004cc4:	3302      	adds	r3, #2
 8004cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	220f      	movs	r2, #15
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	43db      	mvns	r3, r3
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a49      	ldr	r2, [pc, #292]	@ (8004e0c <HAL_GPIO_Init+0x2f0>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d019      	beq.n	8004d1e <HAL_GPIO_Init+0x202>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a48      	ldr	r2, [pc, #288]	@ (8004e10 <HAL_GPIO_Init+0x2f4>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d013      	beq.n	8004d1a <HAL_GPIO_Init+0x1fe>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a47      	ldr	r2, [pc, #284]	@ (8004e14 <HAL_GPIO_Init+0x2f8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00d      	beq.n	8004d16 <HAL_GPIO_Init+0x1fa>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a46      	ldr	r2, [pc, #280]	@ (8004e18 <HAL_GPIO_Init+0x2fc>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d007      	beq.n	8004d12 <HAL_GPIO_Init+0x1f6>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a45      	ldr	r2, [pc, #276]	@ (8004e1c <HAL_GPIO_Init+0x300>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d101      	bne.n	8004d0e <HAL_GPIO_Init+0x1f2>
 8004d0a:	2304      	movs	r3, #4
 8004d0c:	e008      	b.n	8004d20 <HAL_GPIO_Init+0x204>
 8004d0e:	2307      	movs	r3, #7
 8004d10:	e006      	b.n	8004d20 <HAL_GPIO_Init+0x204>
 8004d12:	2303      	movs	r3, #3
 8004d14:	e004      	b.n	8004d20 <HAL_GPIO_Init+0x204>
 8004d16:	2302      	movs	r3, #2
 8004d18:	e002      	b.n	8004d20 <HAL_GPIO_Init+0x204>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <HAL_GPIO_Init+0x204>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	69fa      	ldr	r2, [r7, #28]
 8004d22:	f002 0203 	and.w	r2, r2, #3
 8004d26:	0092      	lsls	r2, r2, #2
 8004d28:	4093      	lsls	r3, r2
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d30:	4935      	ldr	r1, [pc, #212]	@ (8004e08 <HAL_GPIO_Init+0x2ec>)
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	089b      	lsrs	r3, r3, #2
 8004d36:	3302      	adds	r3, #2
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d3e:	4b38      	ldr	r3, [pc, #224]	@ (8004e20 <HAL_GPIO_Init+0x304>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	43db      	mvns	r3, r3
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d62:	4a2f      	ldr	r2, [pc, #188]	@ (8004e20 <HAL_GPIO_Init+0x304>)
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d68:	4b2d      	ldr	r3, [pc, #180]	@ (8004e20 <HAL_GPIO_Init+0x304>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	43db      	mvns	r3, r3
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	4013      	ands	r3, r2
 8004d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d8c:	4a24      	ldr	r2, [pc, #144]	@ (8004e20 <HAL_GPIO_Init+0x304>)
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d92:	4b23      	ldr	r3, [pc, #140]	@ (8004e20 <HAL_GPIO_Init+0x304>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	43db      	mvns	r3, r3
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004db6:	4a1a      	ldr	r2, [pc, #104]	@ (8004e20 <HAL_GPIO_Init+0x304>)
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dbc:	4b18      	ldr	r3, [pc, #96]	@ (8004e20 <HAL_GPIO_Init+0x304>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	43db      	mvns	r3, r3
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004de0:	4a0f      	ldr	r2, [pc, #60]	@ (8004e20 <HAL_GPIO_Init+0x304>)
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	3301      	adds	r3, #1
 8004dea:	61fb      	str	r3, [r7, #28]
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	2b0f      	cmp	r3, #15
 8004df0:	f67f aea2 	bls.w	8004b38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004df4:	bf00      	nop
 8004df6:	bf00      	nop
 8004df8:	3724      	adds	r7, #36	@ 0x24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	40023800 	.word	0x40023800
 8004e08:	40013800 	.word	0x40013800
 8004e0c:	40020000 	.word	0x40020000
 8004e10:	40020400 	.word	0x40020400
 8004e14:	40020800 	.word	0x40020800
 8004e18:	40020c00 	.word	0x40020c00
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	40013c00 	.word	0x40013c00

08004e24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	887b      	ldrh	r3, [r7, #2]
 8004e36:	4013      	ands	r3, r2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	73fb      	strb	r3, [r7, #15]
 8004e40:	e001      	b.n	8004e46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e42:	2300      	movs	r3, #0
 8004e44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	807b      	strh	r3, [r7, #2]
 8004e60:	4613      	mov	r3, r2
 8004e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e64:	787b      	ldrb	r3, [r7, #1]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e6a:	887a      	ldrh	r2, [r7, #2]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e70:	e003      	b.n	8004e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e72:	887b      	ldrh	r3, [r7, #2]
 8004e74:	041a      	lsls	r2, r3, #16
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	619a      	str	r2, [r3, #24]
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
	...

08004e88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e92:	4b08      	ldr	r3, [pc, #32]	@ (8004eb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e94:	695a      	ldr	r2, [r3, #20]
 8004e96:	88fb      	ldrh	r3, [r7, #6]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d006      	beq.n	8004eac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e9e:	4a05      	ldr	r2, [pc, #20]	@ (8004eb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ea0:	88fb      	ldrh	r3, [r7, #6]
 8004ea2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ea4:	88fb      	ldrh	r3, [r7, #6]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 f806 	bl	8004eb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004eac:	bf00      	nop
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	40013c00 	.word	0x40013c00

08004eb8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
	...

08004ed0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e267      	b.n	80053b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d075      	beq.n	8004fda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004eee:	4b88      	ldr	r3, [pc, #544]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 030c 	and.w	r3, r3, #12
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d00c      	beq.n	8004f14 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004efa:	4b85      	ldr	r3, [pc, #532]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004f02:	2b08      	cmp	r3, #8
 8004f04:	d112      	bne.n	8004f2c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f06:	4b82      	ldr	r3, [pc, #520]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f12:	d10b      	bne.n	8004f2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f14:	4b7e      	ldr	r3, [pc, #504]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d05b      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x108>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d157      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e242      	b.n	80053b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f34:	d106      	bne.n	8004f44 <HAL_RCC_OscConfig+0x74>
 8004f36:	4b76      	ldr	r3, [pc, #472]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a75      	ldr	r2, [pc, #468]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 8004f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	e01d      	b.n	8004f80 <HAL_RCC_OscConfig+0xb0>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f4c:	d10c      	bne.n	8004f68 <HAL_RCC_OscConfig+0x98>
 8004f4e:	4b70      	ldr	r3, [pc, #448]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a6f      	ldr	r2, [pc, #444]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 8004f54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	4b6d      	ldr	r3, [pc, #436]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a6c      	ldr	r2, [pc, #432]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 8004f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	e00b      	b.n	8004f80 <HAL_RCC_OscConfig+0xb0>
 8004f68:	4b69      	ldr	r3, [pc, #420]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a68      	ldr	r2, [pc, #416]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 8004f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f72:	6013      	str	r3, [r2, #0]
 8004f74:	4b66      	ldr	r3, [pc, #408]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a65      	ldr	r2, [pc, #404]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 8004f7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d013      	beq.n	8004fb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f88:	f7ff fa2c 	bl	80043e4 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f90:	f7ff fa28 	bl	80043e4 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b64      	cmp	r3, #100	@ 0x64
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e207      	b.n	80053b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fa2:	4b5b      	ldr	r3, [pc, #364]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0f0      	beq.n	8004f90 <HAL_RCC_OscConfig+0xc0>
 8004fae:	e014      	b.n	8004fda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb0:	f7ff fa18 	bl	80043e4 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fb8:	f7ff fa14 	bl	80043e4 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b64      	cmp	r3, #100	@ 0x64
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e1f3      	b.n	80053b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fca:	4b51      	ldr	r3, [pc, #324]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1f0      	bne.n	8004fb8 <HAL_RCC_OscConfig+0xe8>
 8004fd6:	e000      	b.n	8004fda <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d063      	beq.n	80050ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004fe6:	4b4a      	ldr	r3, [pc, #296]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 030c 	and.w	r3, r3, #12
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00b      	beq.n	800500a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ff2:	4b47      	ldr	r3, [pc, #284]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ffa:	2b08      	cmp	r3, #8
 8004ffc:	d11c      	bne.n	8005038 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ffe:	4b44      	ldr	r3, [pc, #272]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d116      	bne.n	8005038 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800500a:	4b41      	ldr	r3, [pc, #260]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d005      	beq.n	8005022 <HAL_RCC_OscConfig+0x152>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d001      	beq.n	8005022 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e1c7      	b.n	80053b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005022:	4b3b      	ldr	r3, [pc, #236]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	4937      	ldr	r1, [pc, #220]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 8005032:	4313      	orrs	r3, r2
 8005034:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005036:	e03a      	b.n	80050ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d020      	beq.n	8005082 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005040:	4b34      	ldr	r3, [pc, #208]	@ (8005114 <HAL_RCC_OscConfig+0x244>)
 8005042:	2201      	movs	r2, #1
 8005044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005046:	f7ff f9cd 	bl	80043e4 <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800504c:	e008      	b.n	8005060 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800504e:	f7ff f9c9 	bl	80043e4 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e1a8      	b.n	80053b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005060:	4b2b      	ldr	r3, [pc, #172]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0f0      	beq.n	800504e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800506c:	4b28      	ldr	r3, [pc, #160]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	4925      	ldr	r1, [pc, #148]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 800507c:	4313      	orrs	r3, r2
 800507e:	600b      	str	r3, [r1, #0]
 8005080:	e015      	b.n	80050ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005082:	4b24      	ldr	r3, [pc, #144]	@ (8005114 <HAL_RCC_OscConfig+0x244>)
 8005084:	2200      	movs	r2, #0
 8005086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005088:	f7ff f9ac 	bl	80043e4 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005090:	f7ff f9a8 	bl	80043e4 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e187      	b.n	80053b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1f0      	bne.n	8005090 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0308 	and.w	r3, r3, #8
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d036      	beq.n	8005128 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d016      	beq.n	80050f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050c2:	4b15      	ldr	r3, [pc, #84]	@ (8005118 <HAL_RCC_OscConfig+0x248>)
 80050c4:	2201      	movs	r2, #1
 80050c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c8:	f7ff f98c 	bl	80043e4 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050d0:	f7ff f988 	bl	80043e4 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e167      	b.n	80053b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005110 <HAL_RCC_OscConfig+0x240>)
 80050e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0f0      	beq.n	80050d0 <HAL_RCC_OscConfig+0x200>
 80050ee:	e01b      	b.n	8005128 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050f0:	4b09      	ldr	r3, [pc, #36]	@ (8005118 <HAL_RCC_OscConfig+0x248>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050f6:	f7ff f975 	bl	80043e4 <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050fc:	e00e      	b.n	800511c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050fe:	f7ff f971 	bl	80043e4 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d907      	bls.n	800511c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e150      	b.n	80053b2 <HAL_RCC_OscConfig+0x4e2>
 8005110:	40023800 	.word	0x40023800
 8005114:	42470000 	.word	0x42470000
 8005118:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800511c:	4b88      	ldr	r3, [pc, #544]	@ (8005340 <HAL_RCC_OscConfig+0x470>)
 800511e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1ea      	bne.n	80050fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 8097 	beq.w	8005264 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005136:	2300      	movs	r3, #0
 8005138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800513a:	4b81      	ldr	r3, [pc, #516]	@ (8005340 <HAL_RCC_OscConfig+0x470>)
 800513c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10f      	bne.n	8005166 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005146:	2300      	movs	r3, #0
 8005148:	60bb      	str	r3, [r7, #8]
 800514a:	4b7d      	ldr	r3, [pc, #500]	@ (8005340 <HAL_RCC_OscConfig+0x470>)
 800514c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514e:	4a7c      	ldr	r2, [pc, #496]	@ (8005340 <HAL_RCC_OscConfig+0x470>)
 8005150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005154:	6413      	str	r3, [r2, #64]	@ 0x40
 8005156:	4b7a      	ldr	r3, [pc, #488]	@ (8005340 <HAL_RCC_OscConfig+0x470>)
 8005158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800515e:	60bb      	str	r3, [r7, #8]
 8005160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005162:	2301      	movs	r3, #1
 8005164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005166:	4b77      	ldr	r3, [pc, #476]	@ (8005344 <HAL_RCC_OscConfig+0x474>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800516e:	2b00      	cmp	r3, #0
 8005170:	d118      	bne.n	80051a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005172:	4b74      	ldr	r3, [pc, #464]	@ (8005344 <HAL_RCC_OscConfig+0x474>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a73      	ldr	r2, [pc, #460]	@ (8005344 <HAL_RCC_OscConfig+0x474>)
 8005178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800517c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800517e:	f7ff f931 	bl	80043e4 <HAL_GetTick>
 8005182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005184:	e008      	b.n	8005198 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005186:	f7ff f92d 	bl	80043e4 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d901      	bls.n	8005198 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e10c      	b.n	80053b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005198:	4b6a      	ldr	r3, [pc, #424]	@ (8005344 <HAL_RCC_OscConfig+0x474>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0f0      	beq.n	8005186 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d106      	bne.n	80051ba <HAL_RCC_OscConfig+0x2ea>
 80051ac:	4b64      	ldr	r3, [pc, #400]	@ (8005340 <HAL_RCC_OscConfig+0x470>)
 80051ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b0:	4a63      	ldr	r2, [pc, #396]	@ (8005340 <HAL_RCC_OscConfig+0x470>)
 80051b2:	f043 0301 	orr.w	r3, r3, #1
 80051b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80051b8:	e01c      	b.n	80051f4 <HAL_RCC_OscConfig+0x324>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	2b05      	cmp	r3, #5
 80051c0:	d10c      	bne.n	80051dc <HAL_RCC_OscConfig+0x30c>
 80051c2:	4b5f      	ldr	r3, [pc, #380]	@ (8005340 <HAL_RCC_OscConfig+0x470>)
 80051c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c6:	4a5e      	ldr	r2, [pc, #376]	@ (8005340 <HAL_RCC_OscConfig+0x470>)
 80051c8:	f043 0304 	orr.w	r3, r3, #4
 80051cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80051ce:	4b5c      	ldr	r3, [pc, #368]	@ (8005340 <HAL_RCC_OscConfig+0x470>)
 80051d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d2:	4a5b      	ldr	r2, [pc, #364]	@ (8005340 <HAL_RCC_OscConfig+0x470>)
 80051d4:	f043 0301 	orr.w	r3, r3, #1
 80051d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80051da:	e00b      	b.n	80051f4 <HAL_RCC_OscConfig+0x324>
 80051dc:	4b58      	ldr	r3, [pc, #352]	@ (8005340 <HAL_RCC_OscConfig+0x470>)
 80051de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e0:	4a57      	ldr	r2, [pc, #348]	@ (8005340 <HAL_RCC_OscConfig+0x470>)
 80051e2:	f023 0301 	bic.w	r3, r3, #1
 80051e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80051e8:	4b55      	ldr	r3, [pc, #340]	@ (8005340 <HAL_RCC_OscConfig+0x470>)
 80051ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ec:	4a54      	ldr	r2, [pc, #336]	@ (8005340 <HAL_RCC_OscConfig+0x470>)
 80051ee:	f023 0304 	bic.w	r3, r3, #4
 80051f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d015      	beq.n	8005228 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051fc:	f7ff f8f2 	bl	80043e4 <HAL_GetTick>
 8005200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005202:	e00a      	b.n	800521a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005204:	f7ff f8ee 	bl	80043e4 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005212:	4293      	cmp	r3, r2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e0cb      	b.n	80053b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800521a:	4b49      	ldr	r3, [pc, #292]	@ (8005340 <HAL_RCC_OscConfig+0x470>)
 800521c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0ee      	beq.n	8005204 <HAL_RCC_OscConfig+0x334>
 8005226:	e014      	b.n	8005252 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005228:	f7ff f8dc 	bl	80043e4 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800522e:	e00a      	b.n	8005246 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005230:	f7ff f8d8 	bl	80043e4 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800523e:	4293      	cmp	r3, r2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e0b5      	b.n	80053b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005246:	4b3e      	ldr	r3, [pc, #248]	@ (8005340 <HAL_RCC_OscConfig+0x470>)
 8005248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1ee      	bne.n	8005230 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005252:	7dfb      	ldrb	r3, [r7, #23]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d105      	bne.n	8005264 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005258:	4b39      	ldr	r3, [pc, #228]	@ (8005340 <HAL_RCC_OscConfig+0x470>)
 800525a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525c:	4a38      	ldr	r2, [pc, #224]	@ (8005340 <HAL_RCC_OscConfig+0x470>)
 800525e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005262:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 80a1 	beq.w	80053b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800526e:	4b34      	ldr	r3, [pc, #208]	@ (8005340 <HAL_RCC_OscConfig+0x470>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 030c 	and.w	r3, r3, #12
 8005276:	2b08      	cmp	r3, #8
 8005278:	d05c      	beq.n	8005334 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	2b02      	cmp	r3, #2
 8005280:	d141      	bne.n	8005306 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005282:	4b31      	ldr	r3, [pc, #196]	@ (8005348 <HAL_RCC_OscConfig+0x478>)
 8005284:	2200      	movs	r2, #0
 8005286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005288:	f7ff f8ac 	bl	80043e4 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005290:	f7ff f8a8 	bl	80043e4 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e087      	b.n	80053b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052a2:	4b27      	ldr	r3, [pc, #156]	@ (8005340 <HAL_RCC_OscConfig+0x470>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f0      	bne.n	8005290 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69da      	ldr	r2, [r3, #28]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052bc:	019b      	lsls	r3, r3, #6
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c4:	085b      	lsrs	r3, r3, #1
 80052c6:	3b01      	subs	r3, #1
 80052c8:	041b      	lsls	r3, r3, #16
 80052ca:	431a      	orrs	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d0:	061b      	lsls	r3, r3, #24
 80052d2:	491b      	ldr	r1, [pc, #108]	@ (8005340 <HAL_RCC_OscConfig+0x470>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005348 <HAL_RCC_OscConfig+0x478>)
 80052da:	2201      	movs	r2, #1
 80052dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052de:	f7ff f881 	bl	80043e4 <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052e4:	e008      	b.n	80052f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e6:	f7ff f87d 	bl	80043e4 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e05c      	b.n	80053b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052f8:	4b11      	ldr	r3, [pc, #68]	@ (8005340 <HAL_RCC_OscConfig+0x470>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0f0      	beq.n	80052e6 <HAL_RCC_OscConfig+0x416>
 8005304:	e054      	b.n	80053b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005306:	4b10      	ldr	r3, [pc, #64]	@ (8005348 <HAL_RCC_OscConfig+0x478>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800530c:	f7ff f86a 	bl	80043e4 <HAL_GetTick>
 8005310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005314:	f7ff f866 	bl	80043e4 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e045      	b.n	80053b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005326:	4b06      	ldr	r3, [pc, #24]	@ (8005340 <HAL_RCC_OscConfig+0x470>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1f0      	bne.n	8005314 <HAL_RCC_OscConfig+0x444>
 8005332:	e03d      	b.n	80053b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d107      	bne.n	800534c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e038      	b.n	80053b2 <HAL_RCC_OscConfig+0x4e2>
 8005340:	40023800 	.word	0x40023800
 8005344:	40007000 	.word	0x40007000
 8005348:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800534c:	4b1b      	ldr	r3, [pc, #108]	@ (80053bc <HAL_RCC_OscConfig+0x4ec>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d028      	beq.n	80053ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005364:	429a      	cmp	r2, r3
 8005366:	d121      	bne.n	80053ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005372:	429a      	cmp	r2, r3
 8005374:	d11a      	bne.n	80053ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800537c:	4013      	ands	r3, r2
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005382:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005384:	4293      	cmp	r3, r2
 8005386:	d111      	bne.n	80053ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005392:	085b      	lsrs	r3, r3, #1
 8005394:	3b01      	subs	r3, #1
 8005396:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005398:	429a      	cmp	r2, r3
 800539a:	d107      	bne.n	80053ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d001      	beq.n	80053b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e000      	b.n	80053b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	40023800 	.word	0x40023800

080053c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e0cc      	b.n	800556e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053d4:	4b68      	ldr	r3, [pc, #416]	@ (8005578 <HAL_RCC_ClockConfig+0x1b8>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0307 	and.w	r3, r3, #7
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d90c      	bls.n	80053fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053e2:	4b65      	ldr	r3, [pc, #404]	@ (8005578 <HAL_RCC_ClockConfig+0x1b8>)
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	b2d2      	uxtb	r2, r2
 80053e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ea:	4b63      	ldr	r3, [pc, #396]	@ (8005578 <HAL_RCC_ClockConfig+0x1b8>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d001      	beq.n	80053fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e0b8      	b.n	800556e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d020      	beq.n	800544a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005414:	4b59      	ldr	r3, [pc, #356]	@ (800557c <HAL_RCC_ClockConfig+0x1bc>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	4a58      	ldr	r2, [pc, #352]	@ (800557c <HAL_RCC_ClockConfig+0x1bc>)
 800541a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800541e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0308 	and.w	r3, r3, #8
 8005428:	2b00      	cmp	r3, #0
 800542a:	d005      	beq.n	8005438 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800542c:	4b53      	ldr	r3, [pc, #332]	@ (800557c <HAL_RCC_ClockConfig+0x1bc>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	4a52      	ldr	r2, [pc, #328]	@ (800557c <HAL_RCC_ClockConfig+0x1bc>)
 8005432:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005436:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005438:	4b50      	ldr	r3, [pc, #320]	@ (800557c <HAL_RCC_ClockConfig+0x1bc>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	494d      	ldr	r1, [pc, #308]	@ (800557c <HAL_RCC_ClockConfig+0x1bc>)
 8005446:	4313      	orrs	r3, r2
 8005448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d044      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d107      	bne.n	800546e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800545e:	4b47      	ldr	r3, [pc, #284]	@ (800557c <HAL_RCC_ClockConfig+0x1bc>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d119      	bne.n	800549e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e07f      	b.n	800556e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2b02      	cmp	r3, #2
 8005474:	d003      	beq.n	800547e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800547a:	2b03      	cmp	r3, #3
 800547c:	d107      	bne.n	800548e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800547e:	4b3f      	ldr	r3, [pc, #252]	@ (800557c <HAL_RCC_ClockConfig+0x1bc>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d109      	bne.n	800549e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e06f      	b.n	800556e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800548e:	4b3b      	ldr	r3, [pc, #236]	@ (800557c <HAL_RCC_ClockConfig+0x1bc>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e067      	b.n	800556e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800549e:	4b37      	ldr	r3, [pc, #220]	@ (800557c <HAL_RCC_ClockConfig+0x1bc>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f023 0203 	bic.w	r2, r3, #3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	4934      	ldr	r1, [pc, #208]	@ (800557c <HAL_RCC_ClockConfig+0x1bc>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054b0:	f7fe ff98 	bl	80043e4 <HAL_GetTick>
 80054b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054b6:	e00a      	b.n	80054ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054b8:	f7fe ff94 	bl	80043e4 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e04f      	b.n	800556e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ce:	4b2b      	ldr	r3, [pc, #172]	@ (800557c <HAL_RCC_ClockConfig+0x1bc>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f003 020c 	and.w	r2, r3, #12
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	429a      	cmp	r2, r3
 80054de:	d1eb      	bne.n	80054b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054e0:	4b25      	ldr	r3, [pc, #148]	@ (8005578 <HAL_RCC_ClockConfig+0x1b8>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d20c      	bcs.n	8005508 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ee:	4b22      	ldr	r3, [pc, #136]	@ (8005578 <HAL_RCC_ClockConfig+0x1b8>)
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054f6:	4b20      	ldr	r3, [pc, #128]	@ (8005578 <HAL_RCC_ClockConfig+0x1b8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0307 	and.w	r3, r3, #7
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	429a      	cmp	r2, r3
 8005502:	d001      	beq.n	8005508 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e032      	b.n	800556e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b00      	cmp	r3, #0
 8005512:	d008      	beq.n	8005526 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005514:	4b19      	ldr	r3, [pc, #100]	@ (800557c <HAL_RCC_ClockConfig+0x1bc>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	4916      	ldr	r1, [pc, #88]	@ (800557c <HAL_RCC_ClockConfig+0x1bc>)
 8005522:	4313      	orrs	r3, r2
 8005524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0308 	and.w	r3, r3, #8
 800552e:	2b00      	cmp	r3, #0
 8005530:	d009      	beq.n	8005546 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005532:	4b12      	ldr	r3, [pc, #72]	@ (800557c <HAL_RCC_ClockConfig+0x1bc>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	490e      	ldr	r1, [pc, #56]	@ (800557c <HAL_RCC_ClockConfig+0x1bc>)
 8005542:	4313      	orrs	r3, r2
 8005544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005546:	f000 f821 	bl	800558c <HAL_RCC_GetSysClockFreq>
 800554a:	4602      	mov	r2, r0
 800554c:	4b0b      	ldr	r3, [pc, #44]	@ (800557c <HAL_RCC_ClockConfig+0x1bc>)
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	091b      	lsrs	r3, r3, #4
 8005552:	f003 030f 	and.w	r3, r3, #15
 8005556:	490a      	ldr	r1, [pc, #40]	@ (8005580 <HAL_RCC_ClockConfig+0x1c0>)
 8005558:	5ccb      	ldrb	r3, [r1, r3]
 800555a:	fa22 f303 	lsr.w	r3, r2, r3
 800555e:	4a09      	ldr	r2, [pc, #36]	@ (8005584 <HAL_RCC_ClockConfig+0x1c4>)
 8005560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005562:	4b09      	ldr	r3, [pc, #36]	@ (8005588 <HAL_RCC_ClockConfig+0x1c8>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f7fe fef8 	bl	800435c <HAL_InitTick>

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40023c00 	.word	0x40023c00
 800557c:	40023800 	.word	0x40023800
 8005580:	08009604 	.word	0x08009604
 8005584:	20000110 	.word	0x20000110
 8005588:	20000114 	.word	0x20000114

0800558c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800558c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005590:	b090      	sub	sp, #64	@ 0x40
 8005592:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005598:	2300      	movs	r3, #0
 800559a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800559c:	2300      	movs	r3, #0
 800559e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055a4:	4b59      	ldr	r3, [pc, #356]	@ (800570c <HAL_RCC_GetSysClockFreq+0x180>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f003 030c 	and.w	r3, r3, #12
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d00d      	beq.n	80055cc <HAL_RCC_GetSysClockFreq+0x40>
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	f200 80a1 	bhi.w	80056f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <HAL_RCC_GetSysClockFreq+0x34>
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d003      	beq.n	80055c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80055be:	e09b      	b.n	80056f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055c0:	4b53      	ldr	r3, [pc, #332]	@ (8005710 <HAL_RCC_GetSysClockFreq+0x184>)
 80055c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80055c4:	e09b      	b.n	80056fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055c6:	4b53      	ldr	r3, [pc, #332]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x188>)
 80055c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80055ca:	e098      	b.n	80056fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055cc:	4b4f      	ldr	r3, [pc, #316]	@ (800570c <HAL_RCC_GetSysClockFreq+0x180>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055d6:	4b4d      	ldr	r3, [pc, #308]	@ (800570c <HAL_RCC_GetSysClockFreq+0x180>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d028      	beq.n	8005634 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055e2:	4b4a      	ldr	r3, [pc, #296]	@ (800570c <HAL_RCC_GetSysClockFreq+0x180>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	099b      	lsrs	r3, r3, #6
 80055e8:	2200      	movs	r2, #0
 80055ea:	623b      	str	r3, [r7, #32]
 80055ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80055f4:	2100      	movs	r1, #0
 80055f6:	4b47      	ldr	r3, [pc, #284]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x188>)
 80055f8:	fb03 f201 	mul.w	r2, r3, r1
 80055fc:	2300      	movs	r3, #0
 80055fe:	fb00 f303 	mul.w	r3, r0, r3
 8005602:	4413      	add	r3, r2
 8005604:	4a43      	ldr	r2, [pc, #268]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x188>)
 8005606:	fba0 1202 	umull	r1, r2, r0, r2
 800560a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800560c:	460a      	mov	r2, r1
 800560e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005610:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005612:	4413      	add	r3, r2
 8005614:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005618:	2200      	movs	r2, #0
 800561a:	61bb      	str	r3, [r7, #24]
 800561c:	61fa      	str	r2, [r7, #28]
 800561e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005622:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005626:	f7fb fa29 	bl	8000a7c <__aeabi_uldivmod>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	4613      	mov	r3, r2
 8005630:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005632:	e053      	b.n	80056dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005634:	4b35      	ldr	r3, [pc, #212]	@ (800570c <HAL_RCC_GetSysClockFreq+0x180>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	099b      	lsrs	r3, r3, #6
 800563a:	2200      	movs	r2, #0
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	617a      	str	r2, [r7, #20]
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005646:	f04f 0b00 	mov.w	fp, #0
 800564a:	4652      	mov	r2, sl
 800564c:	465b      	mov	r3, fp
 800564e:	f04f 0000 	mov.w	r0, #0
 8005652:	f04f 0100 	mov.w	r1, #0
 8005656:	0159      	lsls	r1, r3, #5
 8005658:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800565c:	0150      	lsls	r0, r2, #5
 800565e:	4602      	mov	r2, r0
 8005660:	460b      	mov	r3, r1
 8005662:	ebb2 080a 	subs.w	r8, r2, sl
 8005666:	eb63 090b 	sbc.w	r9, r3, fp
 800566a:	f04f 0200 	mov.w	r2, #0
 800566e:	f04f 0300 	mov.w	r3, #0
 8005672:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005676:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800567a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800567e:	ebb2 0408 	subs.w	r4, r2, r8
 8005682:	eb63 0509 	sbc.w	r5, r3, r9
 8005686:	f04f 0200 	mov.w	r2, #0
 800568a:	f04f 0300 	mov.w	r3, #0
 800568e:	00eb      	lsls	r3, r5, #3
 8005690:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005694:	00e2      	lsls	r2, r4, #3
 8005696:	4614      	mov	r4, r2
 8005698:	461d      	mov	r5, r3
 800569a:	eb14 030a 	adds.w	r3, r4, sl
 800569e:	603b      	str	r3, [r7, #0]
 80056a0:	eb45 030b 	adc.w	r3, r5, fp
 80056a4:	607b      	str	r3, [r7, #4]
 80056a6:	f04f 0200 	mov.w	r2, #0
 80056aa:	f04f 0300 	mov.w	r3, #0
 80056ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056b2:	4629      	mov	r1, r5
 80056b4:	028b      	lsls	r3, r1, #10
 80056b6:	4621      	mov	r1, r4
 80056b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056bc:	4621      	mov	r1, r4
 80056be:	028a      	lsls	r2, r1, #10
 80056c0:	4610      	mov	r0, r2
 80056c2:	4619      	mov	r1, r3
 80056c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c6:	2200      	movs	r2, #0
 80056c8:	60bb      	str	r3, [r7, #8]
 80056ca:	60fa      	str	r2, [r7, #12]
 80056cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056d0:	f7fb f9d4 	bl	8000a7c <__aeabi_uldivmod>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4613      	mov	r3, r2
 80056da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80056dc:	4b0b      	ldr	r3, [pc, #44]	@ (800570c <HAL_RCC_GetSysClockFreq+0x180>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	0c1b      	lsrs	r3, r3, #16
 80056e2:	f003 0303 	and.w	r3, r3, #3
 80056e6:	3301      	adds	r3, #1
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80056ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056f6:	e002      	b.n	80056fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056f8:	4b05      	ldr	r3, [pc, #20]	@ (8005710 <HAL_RCC_GetSysClockFreq+0x184>)
 80056fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005700:	4618      	mov	r0, r3
 8005702:	3740      	adds	r7, #64	@ 0x40
 8005704:	46bd      	mov	sp, r7
 8005706:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800570a:	bf00      	nop
 800570c:	40023800 	.word	0x40023800
 8005710:	00f42400 	.word	0x00f42400
 8005714:	017d7840 	.word	0x017d7840

08005718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005718:	b480      	push	{r7}
 800571a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800571c:	4b03      	ldr	r3, [pc, #12]	@ (800572c <HAL_RCC_GetHCLKFreq+0x14>)
 800571e:	681b      	ldr	r3, [r3, #0]
}
 8005720:	4618      	mov	r0, r3
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	20000110 	.word	0x20000110

08005730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005734:	f7ff fff0 	bl	8005718 <HAL_RCC_GetHCLKFreq>
 8005738:	4602      	mov	r2, r0
 800573a:	4b05      	ldr	r3, [pc, #20]	@ (8005750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	0a9b      	lsrs	r3, r3, #10
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	4903      	ldr	r1, [pc, #12]	@ (8005754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005746:	5ccb      	ldrb	r3, [r1, r3]
 8005748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800574c:	4618      	mov	r0, r3
 800574e:	bd80      	pop	{r7, pc}
 8005750:	40023800 	.word	0x40023800
 8005754:	08009614 	.word	0x08009614

08005758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800575c:	f7ff ffdc 	bl	8005718 <HAL_RCC_GetHCLKFreq>
 8005760:	4602      	mov	r2, r0
 8005762:	4b05      	ldr	r3, [pc, #20]	@ (8005778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	0b5b      	lsrs	r3, r3, #13
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	4903      	ldr	r1, [pc, #12]	@ (800577c <HAL_RCC_GetPCLK2Freq+0x24>)
 800576e:	5ccb      	ldrb	r3, [r1, r3]
 8005770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005774:	4618      	mov	r0, r3
 8005776:	bd80      	pop	{r7, pc}
 8005778:	40023800 	.word	0x40023800
 800577c:	08009614 	.word	0x08009614

08005780 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e07b      	b.n	800588a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005796:	2b00      	cmp	r3, #0
 8005798:	d108      	bne.n	80057ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057a2:	d009      	beq.n	80057b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	61da      	str	r2, [r3, #28]
 80057aa:	e005      	b.n	80057b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d106      	bne.n	80057d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fe fada 	bl	8003d8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005800:	431a      	orrs	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800580a:	431a      	orrs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	431a      	orrs	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	431a      	orrs	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005828:	431a      	orrs	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005832:	431a      	orrs	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800583c:	ea42 0103 	orr.w	r1, r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005844:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	0c1b      	lsrs	r3, r3, #16
 8005856:	f003 0104 	and.w	r1, r3, #4
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585e:	f003 0210 	and.w	r2, r3, #16
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69da      	ldr	r2, [r3, #28]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005878:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b088      	sub	sp, #32
 8005896:	af00      	add	r7, sp, #0
 8005898:	60f8      	str	r0, [r7, #12]
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	603b      	str	r3, [r7, #0]
 800589e:	4613      	mov	r3, r2
 80058a0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058a2:	f7fe fd9f 	bl	80043e4 <HAL_GetTick>
 80058a6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80058a8:	88fb      	ldrh	r3, [r7, #6]
 80058aa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d001      	beq.n	80058bc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80058b8:	2302      	movs	r3, #2
 80058ba:	e12a      	b.n	8005b12 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <HAL_SPI_Transmit+0x36>
 80058c2:	88fb      	ldrh	r3, [r7, #6]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d101      	bne.n	80058cc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e122      	b.n	8005b12 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d101      	bne.n	80058da <HAL_SPI_Transmit+0x48>
 80058d6:	2302      	movs	r3, #2
 80058d8:	e11b      	b.n	8005b12 <HAL_SPI_Transmit+0x280>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2203      	movs	r2, #3
 80058e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	88fa      	ldrh	r2, [r7, #6]
 80058fa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	88fa      	ldrh	r2, [r7, #6]
 8005900:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005928:	d10f      	bne.n	800594a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005938:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005948:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005954:	2b40      	cmp	r3, #64	@ 0x40
 8005956:	d007      	beq.n	8005968 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005966:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005970:	d152      	bne.n	8005a18 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <HAL_SPI_Transmit+0xee>
 800597a:	8b7b      	ldrh	r3, [r7, #26]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d145      	bne.n	8005a0c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005984:	881a      	ldrh	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005990:	1c9a      	adds	r2, r3, #2
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800599a:	b29b      	uxth	r3, r3
 800599c:	3b01      	subs	r3, #1
 800599e:	b29a      	uxth	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80059a4:	e032      	b.n	8005a0c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f003 0302 	and.w	r3, r3, #2
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d112      	bne.n	80059da <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b8:	881a      	ldrh	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c4:	1c9a      	adds	r2, r3, #2
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	3b01      	subs	r3, #1
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80059d8:	e018      	b.n	8005a0c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059da:	f7fe fd03 	bl	80043e4 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d803      	bhi.n	80059f2 <HAL_SPI_Transmit+0x160>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f0:	d102      	bne.n	80059f8 <HAL_SPI_Transmit+0x166>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d109      	bne.n	8005a0c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e082      	b.n	8005b12 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1c7      	bne.n	80059a6 <HAL_SPI_Transmit+0x114>
 8005a16:	e053      	b.n	8005ac0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <HAL_SPI_Transmit+0x194>
 8005a20:	8b7b      	ldrh	r3, [r7, #26]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d147      	bne.n	8005ab6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	330c      	adds	r3, #12
 8005a30:	7812      	ldrb	r2, [r2, #0]
 8005a32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a38:	1c5a      	adds	r2, r3, #1
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	3b01      	subs	r3, #1
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005a4c:	e033      	b.n	8005ab6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d113      	bne.n	8005a84 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	330c      	adds	r3, #12
 8005a66:	7812      	ldrb	r2, [r2, #0]
 8005a68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005a82:	e018      	b.n	8005ab6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a84:	f7fe fcae 	bl	80043e4 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d803      	bhi.n	8005a9c <HAL_SPI_Transmit+0x20a>
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9a:	d102      	bne.n	8005aa2 <HAL_SPI_Transmit+0x210>
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d109      	bne.n	8005ab6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e02d      	b.n	8005b12 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1c6      	bne.n	8005a4e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ac0:	69fa      	ldr	r2, [r7, #28]
 8005ac2:	6839      	ldr	r1, [r7, #0]
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 fbd9 	bl	800627c <SPI_EndRxTxTransaction>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10a      	bne.n	8005af4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ade:	2300      	movs	r3, #0
 8005ae0:	617b      	str	r3, [r7, #20]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	617b      	str	r3, [r7, #20]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	617b      	str	r3, [r7, #20]
 8005af2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e000      	b.n	8005b12 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005b10:	2300      	movs	r3, #0
  }
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3720      	adds	r7, #32
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b088      	sub	sp, #32
 8005b1e:	af02      	add	r7, sp, #8
 8005b20:	60f8      	str	r0, [r7, #12]
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	603b      	str	r3, [r7, #0]
 8005b26:	4613      	mov	r3, r2
 8005b28:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d001      	beq.n	8005b3a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005b36:	2302      	movs	r3, #2
 8005b38:	e104      	b.n	8005d44 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b42:	d112      	bne.n	8005b6a <HAL_SPI_Receive+0x50>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10e      	bne.n	8005b6a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2204      	movs	r2, #4
 8005b50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b54:	88fa      	ldrh	r2, [r7, #6]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	68b9      	ldr	r1, [r7, #8]
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 f8f3 	bl	8005d4c <HAL_SPI_TransmitReceive>
 8005b66:	4603      	mov	r3, r0
 8005b68:	e0ec      	b.n	8005d44 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b6a:	f7fe fc3b 	bl	80043e4 <HAL_GetTick>
 8005b6e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <HAL_SPI_Receive+0x62>
 8005b76:	88fb      	ldrh	r3, [r7, #6]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e0e1      	b.n	8005d44 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d101      	bne.n	8005b8e <HAL_SPI_Receive+0x74>
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	e0da      	b.n	8005d44 <HAL_SPI_Receive+0x22a>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2204      	movs	r2, #4
 8005b9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	88fa      	ldrh	r2, [r7, #6]
 8005bae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	88fa      	ldrh	r2, [r7, #6]
 8005bb4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bdc:	d10f      	bne.n	8005bfe <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005bfc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c08:	2b40      	cmp	r3, #64	@ 0x40
 8005c0a:	d007      	beq.n	8005c1c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c1a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d170      	bne.n	8005d06 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005c24:	e035      	b.n	8005c92 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d115      	bne.n	8005c60 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f103 020c 	add.w	r2, r3, #12
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c40:	7812      	ldrb	r2, [r2, #0]
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	3b01      	subs	r3, #1
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c5e:	e018      	b.n	8005c92 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c60:	f7fe fbc0 	bl	80043e4 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d803      	bhi.n	8005c78 <HAL_SPI_Receive+0x15e>
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c76:	d102      	bne.n	8005c7e <HAL_SPI_Receive+0x164>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d109      	bne.n	8005c92 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e058      	b.n	8005d44 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1c4      	bne.n	8005c26 <HAL_SPI_Receive+0x10c>
 8005c9c:	e038      	b.n	8005d10 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d113      	bne.n	8005cd4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68da      	ldr	r2, [r3, #12]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb6:	b292      	uxth	r2, r2
 8005cb8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cbe:	1c9a      	adds	r2, r3, #2
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005cd2:	e018      	b.n	8005d06 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cd4:	f7fe fb86 	bl	80043e4 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d803      	bhi.n	8005cec <HAL_SPI_Receive+0x1d2>
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cea:	d102      	bne.n	8005cf2 <HAL_SPI_Receive+0x1d8>
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d109      	bne.n	8005d06 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e01e      	b.n	8005d44 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1c6      	bne.n	8005c9e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	6839      	ldr	r1, [r7, #0]
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 fa4b 	bl	80061b0 <SPI_EndRxTransaction>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2220      	movs	r2, #32
 8005d24:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e000      	b.n	8005d44 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005d42:	2300      	movs	r3, #0
  }
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08a      	sub	sp, #40	@ 0x28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d5e:	f7fe fb41 	bl	80043e4 <HAL_GetTick>
 8005d62:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d6a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005d72:	887b      	ldrh	r3, [r7, #2]
 8005d74:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d76:	7ffb      	ldrb	r3, [r7, #31]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d00c      	beq.n	8005d96 <HAL_SPI_TransmitReceive+0x4a>
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d82:	d106      	bne.n	8005d92 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d102      	bne.n	8005d92 <HAL_SPI_TransmitReceive+0x46>
 8005d8c:	7ffb      	ldrb	r3, [r7, #31]
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d001      	beq.n	8005d96 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005d92:	2302      	movs	r3, #2
 8005d94:	e17f      	b.n	8006096 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d005      	beq.n	8005da8 <HAL_SPI_TransmitReceive+0x5c>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d002      	beq.n	8005da8 <HAL_SPI_TransmitReceive+0x5c>
 8005da2:	887b      	ldrh	r3, [r7, #2]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d101      	bne.n	8005dac <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e174      	b.n	8006096 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d101      	bne.n	8005dba <HAL_SPI_TransmitReceive+0x6e>
 8005db6:	2302      	movs	r3, #2
 8005db8:	e16d      	b.n	8006096 <HAL_SPI_TransmitReceive+0x34a>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	d003      	beq.n	8005dd6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2205      	movs	r2, #5
 8005dd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	887a      	ldrh	r2, [r7, #2]
 8005de6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	887a      	ldrh	r2, [r7, #2]
 8005dec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	887a      	ldrh	r2, [r7, #2]
 8005df8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	887a      	ldrh	r2, [r7, #2]
 8005dfe:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e16:	2b40      	cmp	r3, #64	@ 0x40
 8005e18:	d007      	beq.n	8005e2a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e32:	d17e      	bne.n	8005f32 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <HAL_SPI_TransmitReceive+0xf6>
 8005e3c:	8afb      	ldrh	r3, [r7, #22]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d16c      	bne.n	8005f1c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e46:	881a      	ldrh	r2, [r3, #0]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e52:	1c9a      	adds	r2, r3, #2
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e66:	e059      	b.n	8005f1c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d11b      	bne.n	8005eae <HAL_SPI_TransmitReceive+0x162>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d016      	beq.n	8005eae <HAL_SPI_TransmitReceive+0x162>
 8005e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d113      	bne.n	8005eae <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e8a:	881a      	ldrh	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e96:	1c9a      	adds	r2, r3, #2
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d119      	bne.n	8005ef0 <HAL_SPI_TransmitReceive+0x1a4>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d014      	beq.n	8005ef0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68da      	ldr	r2, [r3, #12]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed0:	b292      	uxth	r2, r2
 8005ed2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed8:	1c9a      	adds	r2, r3, #2
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005eec:	2301      	movs	r3, #1
 8005eee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ef0:	f7fe fa78 	bl	80043e4 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d80d      	bhi.n	8005f1c <HAL_SPI_TransmitReceive+0x1d0>
 8005f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f06:	d009      	beq.n	8005f1c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e0bc      	b.n	8006096 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1a0      	bne.n	8005e68 <HAL_SPI_TransmitReceive+0x11c>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d19b      	bne.n	8005e68 <HAL_SPI_TransmitReceive+0x11c>
 8005f30:	e082      	b.n	8006038 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <HAL_SPI_TransmitReceive+0x1f4>
 8005f3a:	8afb      	ldrh	r3, [r7, #22]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d171      	bne.n	8006024 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	330c      	adds	r3, #12
 8005f4a:	7812      	ldrb	r2, [r2, #0]
 8005f4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f66:	e05d      	b.n	8006024 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d11c      	bne.n	8005fb0 <HAL_SPI_TransmitReceive+0x264>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d017      	beq.n	8005fb0 <HAL_SPI_TransmitReceive+0x264>
 8005f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d114      	bne.n	8005fb0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	330c      	adds	r3, #12
 8005f90:	7812      	ldrb	r2, [r2, #0]
 8005f92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d119      	bne.n	8005ff2 <HAL_SPI_TransmitReceive+0x2a6>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d014      	beq.n	8005ff2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd2:	b2d2      	uxtb	r2, r2
 8005fd4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ff2:	f7fe f9f7 	bl	80043e4 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d803      	bhi.n	800600a <HAL_SPI_TransmitReceive+0x2be>
 8006002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006008:	d102      	bne.n	8006010 <HAL_SPI_TransmitReceive+0x2c4>
 800600a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600c:	2b00      	cmp	r3, #0
 800600e:	d109      	bne.n	8006024 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e038      	b.n	8006096 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006028:	b29b      	uxth	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d19c      	bne.n	8005f68 <HAL_SPI_TransmitReceive+0x21c>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006032:	b29b      	uxth	r3, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	d197      	bne.n	8005f68 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006038:	6a3a      	ldr	r2, [r7, #32]
 800603a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 f91d 	bl	800627c <SPI_EndRxTxTransaction>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d008      	beq.n	800605a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2220      	movs	r2, #32
 800604c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e01d      	b.n	8006096 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10a      	bne.n	8006078 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006062:	2300      	movs	r3, #0
 8006064:	613b      	str	r3, [r7, #16]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	613b      	str	r3, [r7, #16]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e000      	b.n	8006096 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006094:	2300      	movs	r3, #0
  }
}
 8006096:	4618      	mov	r0, r3
 8006098:	3728      	adds	r7, #40	@ 0x28
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
	...

080060a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b088      	sub	sp, #32
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	603b      	str	r3, [r7, #0]
 80060ac:	4613      	mov	r3, r2
 80060ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80060b0:	f7fe f998 	bl	80043e4 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b8:	1a9b      	subs	r3, r3, r2
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	4413      	add	r3, r2
 80060be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80060c0:	f7fe f990 	bl	80043e4 <HAL_GetTick>
 80060c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060c6:	4b39      	ldr	r3, [pc, #228]	@ (80061ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	015b      	lsls	r3, r3, #5
 80060cc:	0d1b      	lsrs	r3, r3, #20
 80060ce:	69fa      	ldr	r2, [r7, #28]
 80060d0:	fb02 f303 	mul.w	r3, r2, r3
 80060d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060d6:	e054      	b.n	8006182 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060de:	d050      	beq.n	8006182 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060e0:	f7fe f980 	bl	80043e4 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	69fa      	ldr	r2, [r7, #28]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d902      	bls.n	80060f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d13d      	bne.n	8006172 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006104:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800610e:	d111      	bne.n	8006134 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006118:	d004      	beq.n	8006124 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006122:	d107      	bne.n	8006134 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006132:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006138:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800613c:	d10f      	bne.n	800615e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800615c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e017      	b.n	80061a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	3b01      	subs	r3, #1
 8006180:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	4013      	ands	r3, r2
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	429a      	cmp	r2, r3
 8006190:	bf0c      	ite	eq
 8006192:	2301      	moveq	r3, #1
 8006194:	2300      	movne	r3, #0
 8006196:	b2db      	uxtb	r3, r3
 8006198:	461a      	mov	r2, r3
 800619a:	79fb      	ldrb	r3, [r7, #7]
 800619c:	429a      	cmp	r2, r3
 800619e:	d19b      	bne.n	80060d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3720      	adds	r7, #32
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	20000110 	.word	0x20000110

080061b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af02      	add	r7, sp, #8
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061c4:	d111      	bne.n	80061ea <SPI_EndRxTransaction+0x3a>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061ce:	d004      	beq.n	80061da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061d8:	d107      	bne.n	80061ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061e8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061f2:	d12a      	bne.n	800624a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061fc:	d012      	beq.n	8006224 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2200      	movs	r2, #0
 8006206:	2180      	movs	r1, #128	@ 0x80
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f7ff ff49 	bl	80060a0 <SPI_WaitFlagStateUntilTimeout>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d02d      	beq.n	8006270 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006218:	f043 0220 	orr.w	r2, r3, #32
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e026      	b.n	8006272 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	2200      	movs	r2, #0
 800622c:	2101      	movs	r1, #1
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f7ff ff36 	bl	80060a0 <SPI_WaitFlagStateUntilTimeout>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d01a      	beq.n	8006270 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800623e:	f043 0220 	orr.w	r2, r3, #32
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e013      	b.n	8006272 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2200      	movs	r2, #0
 8006252:	2101      	movs	r1, #1
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f7ff ff23 	bl	80060a0 <SPI_WaitFlagStateUntilTimeout>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d007      	beq.n	8006270 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006264:	f043 0220 	orr.w	r2, r3, #32
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e000      	b.n	8006272 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b088      	sub	sp, #32
 8006280:	af02      	add	r7, sp, #8
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2201      	movs	r2, #1
 8006290:	2102      	movs	r1, #2
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f7ff ff04 	bl	80060a0 <SPI_WaitFlagStateUntilTimeout>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d007      	beq.n	80062ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062a2:	f043 0220 	orr.w	r2, r3, #32
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e032      	b.n	8006314 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80062ae:	4b1b      	ldr	r3, [pc, #108]	@ (800631c <SPI_EndRxTxTransaction+0xa0>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a1b      	ldr	r2, [pc, #108]	@ (8006320 <SPI_EndRxTxTransaction+0xa4>)
 80062b4:	fba2 2303 	umull	r2, r3, r2, r3
 80062b8:	0d5b      	lsrs	r3, r3, #21
 80062ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80062be:	fb02 f303 	mul.w	r3, r2, r3
 80062c2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062cc:	d112      	bne.n	80062f4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	2200      	movs	r2, #0
 80062d6:	2180      	movs	r1, #128	@ 0x80
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f7ff fee1 	bl	80060a0 <SPI_WaitFlagStateUntilTimeout>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d016      	beq.n	8006312 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062e8:	f043 0220 	orr.w	r2, r3, #32
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e00f      	b.n	8006314 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	3b01      	subs	r3, #1
 80062fe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800630a:	2b80      	cmp	r3, #128	@ 0x80
 800630c:	d0f2      	beq.n	80062f4 <SPI_EndRxTxTransaction+0x78>
 800630e:	e000      	b.n	8006312 <SPI_EndRxTxTransaction+0x96>
        break;
 8006310:	bf00      	nop
  }

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	20000110 	.word	0x20000110
 8006320:	165e9f81 	.word	0x165e9f81

08006324 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e041      	b.n	80063ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d106      	bne.n	8006350 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7fd fdcc 	bl	8003ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2202      	movs	r2, #2
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	3304      	adds	r3, #4
 8006360:	4619      	mov	r1, r3
 8006362:	4610      	mov	r0, r2
 8006364:	f000 fb2a 	bl	80069bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
	...

080063c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d001      	beq.n	80063dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e03c      	b.n	8006456 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a1e      	ldr	r2, [pc, #120]	@ (8006464 <HAL_TIM_Base_Start+0xa0>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d018      	beq.n	8006420 <HAL_TIM_Base_Start+0x5c>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063f6:	d013      	beq.n	8006420 <HAL_TIM_Base_Start+0x5c>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a1a      	ldr	r2, [pc, #104]	@ (8006468 <HAL_TIM_Base_Start+0xa4>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d00e      	beq.n	8006420 <HAL_TIM_Base_Start+0x5c>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a19      	ldr	r2, [pc, #100]	@ (800646c <HAL_TIM_Base_Start+0xa8>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d009      	beq.n	8006420 <HAL_TIM_Base_Start+0x5c>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a17      	ldr	r2, [pc, #92]	@ (8006470 <HAL_TIM_Base_Start+0xac>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d004      	beq.n	8006420 <HAL_TIM_Base_Start+0x5c>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a16      	ldr	r2, [pc, #88]	@ (8006474 <HAL_TIM_Base_Start+0xb0>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d111      	bne.n	8006444 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f003 0307 	and.w	r3, r3, #7
 800642a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2b06      	cmp	r3, #6
 8006430:	d010      	beq.n	8006454 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f042 0201 	orr.w	r2, r2, #1
 8006440:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006442:	e007      	b.n	8006454 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f042 0201 	orr.w	r2, r2, #1
 8006452:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	40010000 	.word	0x40010000
 8006468:	40000400 	.word	0x40000400
 800646c:	40000800 	.word	0x40000800
 8006470:	40000c00 	.word	0x40000c00
 8006474:	40014000 	.word	0x40014000

08006478 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6a1a      	ldr	r2, [r3, #32]
 8006486:	f241 1311 	movw	r3, #4369	@ 0x1111
 800648a:	4013      	ands	r3, r2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10f      	bne.n	80064b0 <HAL_TIM_Base_Stop+0x38>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6a1a      	ldr	r2, [r3, #32]
 8006496:	f240 4344 	movw	r3, #1092	@ 0x444
 800649a:	4013      	ands	r3, r2
 800649c:	2b00      	cmp	r3, #0
 800649e:	d107      	bne.n	80064b0 <HAL_TIM_Base_Stop+0x38>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 0201 	bic.w	r2, r2, #1
 80064ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
	...

080064c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d001      	beq.n	80064e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e044      	b.n	800656a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68da      	ldr	r2, [r3, #12]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f042 0201 	orr.w	r2, r2, #1
 80064f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a1e      	ldr	r2, [pc, #120]	@ (8006578 <HAL_TIM_Base_Start_IT+0xb0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d018      	beq.n	8006534 <HAL_TIM_Base_Start_IT+0x6c>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800650a:	d013      	beq.n	8006534 <HAL_TIM_Base_Start_IT+0x6c>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a1a      	ldr	r2, [pc, #104]	@ (800657c <HAL_TIM_Base_Start_IT+0xb4>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00e      	beq.n	8006534 <HAL_TIM_Base_Start_IT+0x6c>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a19      	ldr	r2, [pc, #100]	@ (8006580 <HAL_TIM_Base_Start_IT+0xb8>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d009      	beq.n	8006534 <HAL_TIM_Base_Start_IT+0x6c>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a17      	ldr	r2, [pc, #92]	@ (8006584 <HAL_TIM_Base_Start_IT+0xbc>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d004      	beq.n	8006534 <HAL_TIM_Base_Start_IT+0x6c>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a16      	ldr	r2, [pc, #88]	@ (8006588 <HAL_TIM_Base_Start_IT+0xc0>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d111      	bne.n	8006558 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 0307 	and.w	r3, r3, #7
 800653e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2b06      	cmp	r3, #6
 8006544:	d010      	beq.n	8006568 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f042 0201 	orr.w	r2, r2, #1
 8006554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006556:	e007      	b.n	8006568 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f042 0201 	orr.w	r2, r2, #1
 8006566:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	40010000 	.word	0x40010000
 800657c:	40000400 	.word	0x40000400
 8006580:	40000800 	.word	0x40000800
 8006584:	40000c00 	.word	0x40000c00
 8006588:	40014000 	.word	0x40014000

0800658c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68da      	ldr	r2, [r3, #12]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0201 	bic.w	r2, r2, #1
 80065a2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6a1a      	ldr	r2, [r3, #32]
 80065aa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80065ae:	4013      	ands	r3, r2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10f      	bne.n	80065d4 <HAL_TIM_Base_Stop_IT+0x48>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6a1a      	ldr	r2, [r3, #32]
 80065ba:	f240 4344 	movw	r3, #1092	@ 0x444
 80065be:	4013      	ands	r3, r2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d107      	bne.n	80065d4 <HAL_TIM_Base_Stop_IT+0x48>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0201 	bic.w	r2, r2, #1
 80065d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f003 0302 	and.w	r3, r3, #2
 8006608:	2b00      	cmp	r3, #0
 800660a:	d020      	beq.n	800664e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b00      	cmp	r3, #0
 8006614:	d01b      	beq.n	800664e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f06f 0202 	mvn.w	r2, #2
 800661e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	f003 0303 	and.w	r3, r3, #3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d003      	beq.n	800663c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 f9a3 	bl	8006980 <HAL_TIM_IC_CaptureCallback>
 800663a:	e005      	b.n	8006648 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f995 	bl	800696c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f9a6 	bl	8006994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	f003 0304 	and.w	r3, r3, #4
 8006654:	2b00      	cmp	r3, #0
 8006656:	d020      	beq.n	800669a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f003 0304 	and.w	r3, r3, #4
 800665e:	2b00      	cmp	r3, #0
 8006660:	d01b      	beq.n	800669a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f06f 0204 	mvn.w	r2, #4
 800666a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2202      	movs	r2, #2
 8006670:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800667c:	2b00      	cmp	r3, #0
 800667e:	d003      	beq.n	8006688 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f97d 	bl	8006980 <HAL_TIM_IC_CaptureCallback>
 8006686:	e005      	b.n	8006694 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f96f 	bl	800696c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f980 	bl	8006994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f003 0308 	and.w	r3, r3, #8
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d020      	beq.n	80066e6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f003 0308 	and.w	r3, r3, #8
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d01b      	beq.n	80066e6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f06f 0208 	mvn.w	r2, #8
 80066b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2204      	movs	r2, #4
 80066bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	f003 0303 	and.w	r3, r3, #3
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d003      	beq.n	80066d4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f957 	bl	8006980 <HAL_TIM_IC_CaptureCallback>
 80066d2:	e005      	b.n	80066e0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f949 	bl	800696c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f95a 	bl	8006994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	f003 0310 	and.w	r3, r3, #16
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d020      	beq.n	8006732 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f003 0310 	and.w	r3, r3, #16
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d01b      	beq.n	8006732 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f06f 0210 	mvn.w	r2, #16
 8006702:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2208      	movs	r2, #8
 8006708:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	69db      	ldr	r3, [r3, #28]
 8006710:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f931 	bl	8006980 <HAL_TIM_IC_CaptureCallback>
 800671e:	e005      	b.n	800672c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f923 	bl	800696c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f934 	bl	8006994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00c      	beq.n	8006756 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d007      	beq.n	8006756 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f06f 0201 	mvn.w	r2, #1
 800674e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f901 	bl	8006958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00c      	beq.n	800677a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006766:	2b00      	cmp	r3, #0
 8006768:	d007      	beq.n	800677a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fabf 	bl	8006cf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00c      	beq.n	800679e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800678a:	2b00      	cmp	r3, #0
 800678c:	d007      	beq.n	800679e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f905 	bl	80069a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	f003 0320 	and.w	r3, r3, #32
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00c      	beq.n	80067c2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f003 0320 	and.w	r3, r3, #32
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d007      	beq.n	80067c2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f06f 0220 	mvn.w	r2, #32
 80067ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fa91 	bl	8006ce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067c2:	bf00      	nop
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b084      	sub	sp, #16
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d101      	bne.n	80067e6 <HAL_TIM_ConfigClockSource+0x1c>
 80067e2:	2302      	movs	r3, #2
 80067e4:	e0b4      	b.n	8006950 <HAL_TIM_ConfigClockSource+0x186>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2202      	movs	r2, #2
 80067f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006804:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800680c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800681e:	d03e      	beq.n	800689e <HAL_TIM_ConfigClockSource+0xd4>
 8006820:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006824:	f200 8087 	bhi.w	8006936 <HAL_TIM_ConfigClockSource+0x16c>
 8006828:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800682c:	f000 8086 	beq.w	800693c <HAL_TIM_ConfigClockSource+0x172>
 8006830:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006834:	d87f      	bhi.n	8006936 <HAL_TIM_ConfigClockSource+0x16c>
 8006836:	2b70      	cmp	r3, #112	@ 0x70
 8006838:	d01a      	beq.n	8006870 <HAL_TIM_ConfigClockSource+0xa6>
 800683a:	2b70      	cmp	r3, #112	@ 0x70
 800683c:	d87b      	bhi.n	8006936 <HAL_TIM_ConfigClockSource+0x16c>
 800683e:	2b60      	cmp	r3, #96	@ 0x60
 8006840:	d050      	beq.n	80068e4 <HAL_TIM_ConfigClockSource+0x11a>
 8006842:	2b60      	cmp	r3, #96	@ 0x60
 8006844:	d877      	bhi.n	8006936 <HAL_TIM_ConfigClockSource+0x16c>
 8006846:	2b50      	cmp	r3, #80	@ 0x50
 8006848:	d03c      	beq.n	80068c4 <HAL_TIM_ConfigClockSource+0xfa>
 800684a:	2b50      	cmp	r3, #80	@ 0x50
 800684c:	d873      	bhi.n	8006936 <HAL_TIM_ConfigClockSource+0x16c>
 800684e:	2b40      	cmp	r3, #64	@ 0x40
 8006850:	d058      	beq.n	8006904 <HAL_TIM_ConfigClockSource+0x13a>
 8006852:	2b40      	cmp	r3, #64	@ 0x40
 8006854:	d86f      	bhi.n	8006936 <HAL_TIM_ConfigClockSource+0x16c>
 8006856:	2b30      	cmp	r3, #48	@ 0x30
 8006858:	d064      	beq.n	8006924 <HAL_TIM_ConfigClockSource+0x15a>
 800685a:	2b30      	cmp	r3, #48	@ 0x30
 800685c:	d86b      	bhi.n	8006936 <HAL_TIM_ConfigClockSource+0x16c>
 800685e:	2b20      	cmp	r3, #32
 8006860:	d060      	beq.n	8006924 <HAL_TIM_ConfigClockSource+0x15a>
 8006862:	2b20      	cmp	r3, #32
 8006864:	d867      	bhi.n	8006936 <HAL_TIM_ConfigClockSource+0x16c>
 8006866:	2b00      	cmp	r3, #0
 8006868:	d05c      	beq.n	8006924 <HAL_TIM_ConfigClockSource+0x15a>
 800686a:	2b10      	cmp	r3, #16
 800686c:	d05a      	beq.n	8006924 <HAL_TIM_ConfigClockSource+0x15a>
 800686e:	e062      	b.n	8006936 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006880:	f000 f9a2 	bl	8006bc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006892:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	609a      	str	r2, [r3, #8]
      break;
 800689c:	e04f      	b.n	800693e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068ae:	f000 f98b 	bl	8006bc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068c0:	609a      	str	r2, [r3, #8]
      break;
 80068c2:	e03c      	b.n	800693e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068d0:	461a      	mov	r2, r3
 80068d2:	f000 f8ff 	bl	8006ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2150      	movs	r1, #80	@ 0x50
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 f958 	bl	8006b92 <TIM_ITRx_SetConfig>
      break;
 80068e2:	e02c      	b.n	800693e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068f0:	461a      	mov	r2, r3
 80068f2:	f000 f91e 	bl	8006b32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2160      	movs	r1, #96	@ 0x60
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 f948 	bl	8006b92 <TIM_ITRx_SetConfig>
      break;
 8006902:	e01c      	b.n	800693e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006910:	461a      	mov	r2, r3
 8006912:	f000 f8df 	bl	8006ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2140      	movs	r1, #64	@ 0x40
 800691c:	4618      	mov	r0, r3
 800691e:	f000 f938 	bl	8006b92 <TIM_ITRx_SetConfig>
      break;
 8006922:	e00c      	b.n	800693e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4619      	mov	r1, r3
 800692e:	4610      	mov	r0, r2
 8006930:	f000 f92f 	bl	8006b92 <TIM_ITRx_SetConfig>
      break;
 8006934:	e003      	b.n	800693e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	73fb      	strb	r3, [r7, #15]
      break;
 800693a:	e000      	b.n	800693e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800693c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800694e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a3a      	ldr	r2, [pc, #232]	@ (8006ab8 <TIM_Base_SetConfig+0xfc>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d00f      	beq.n	80069f4 <TIM_Base_SetConfig+0x38>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069da:	d00b      	beq.n	80069f4 <TIM_Base_SetConfig+0x38>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a37      	ldr	r2, [pc, #220]	@ (8006abc <TIM_Base_SetConfig+0x100>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d007      	beq.n	80069f4 <TIM_Base_SetConfig+0x38>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a36      	ldr	r2, [pc, #216]	@ (8006ac0 <TIM_Base_SetConfig+0x104>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d003      	beq.n	80069f4 <TIM_Base_SetConfig+0x38>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a35      	ldr	r2, [pc, #212]	@ (8006ac4 <TIM_Base_SetConfig+0x108>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d108      	bne.n	8006a06 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a2b      	ldr	r2, [pc, #172]	@ (8006ab8 <TIM_Base_SetConfig+0xfc>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d01b      	beq.n	8006a46 <TIM_Base_SetConfig+0x8a>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a14:	d017      	beq.n	8006a46 <TIM_Base_SetConfig+0x8a>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a28      	ldr	r2, [pc, #160]	@ (8006abc <TIM_Base_SetConfig+0x100>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d013      	beq.n	8006a46 <TIM_Base_SetConfig+0x8a>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a27      	ldr	r2, [pc, #156]	@ (8006ac0 <TIM_Base_SetConfig+0x104>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d00f      	beq.n	8006a46 <TIM_Base_SetConfig+0x8a>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a26      	ldr	r2, [pc, #152]	@ (8006ac4 <TIM_Base_SetConfig+0x108>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00b      	beq.n	8006a46 <TIM_Base_SetConfig+0x8a>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a25      	ldr	r2, [pc, #148]	@ (8006ac8 <TIM_Base_SetConfig+0x10c>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d007      	beq.n	8006a46 <TIM_Base_SetConfig+0x8a>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a24      	ldr	r2, [pc, #144]	@ (8006acc <TIM_Base_SetConfig+0x110>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d003      	beq.n	8006a46 <TIM_Base_SetConfig+0x8a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a23      	ldr	r2, [pc, #140]	@ (8006ad0 <TIM_Base_SetConfig+0x114>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d108      	bne.n	8006a58 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8006ab8 <TIM_Base_SetConfig+0xfc>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d103      	bne.n	8006a8c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	691a      	ldr	r2, [r3, #16]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d105      	bne.n	8006aaa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	f023 0201 	bic.w	r2, r3, #1
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	611a      	str	r2, [r3, #16]
  }
}
 8006aaa:	bf00      	nop
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	40010000 	.word	0x40010000
 8006abc:	40000400 	.word	0x40000400
 8006ac0:	40000800 	.word	0x40000800
 8006ac4:	40000c00 	.word	0x40000c00
 8006ac8:	40014000 	.word	0x40014000
 8006acc:	40014400 	.word	0x40014400
 8006ad0:	40014800 	.word	0x40014800

08006ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
 8006ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	f023 0201 	bic.w	r2, r3, #1
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	011b      	lsls	r3, r3, #4
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f023 030a 	bic.w	r3, r3, #10
 8006b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	621a      	str	r2, [r3, #32]
}
 8006b26:	bf00      	nop
 8006b28:	371c      	adds	r7, #28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b087      	sub	sp, #28
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	60f8      	str	r0, [r7, #12]
 8006b3a:	60b9      	str	r1, [r7, #8]
 8006b3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6a1b      	ldr	r3, [r3, #32]
 8006b48:	f023 0210 	bic.w	r2, r3, #16
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	031b      	lsls	r3, r3, #12
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	011b      	lsls	r3, r3, #4
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	621a      	str	r2, [r3, #32]
}
 8006b86:	bf00      	nop
 8006b88:	371c      	adds	r7, #28
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b085      	sub	sp, #20
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ba8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	f043 0307 	orr.w	r3, r3, #7
 8006bb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	609a      	str	r2, [r3, #8]
}
 8006bbc:	bf00      	nop
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
 8006bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006be2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	021a      	lsls	r2, r3, #8
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	431a      	orrs	r2, r3
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	609a      	str	r2, [r3, #8]
}
 8006bfc:	bf00      	nop
 8006bfe:	371c      	adds	r7, #28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d101      	bne.n	8006c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	e050      	b.n	8006cc2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8006cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d018      	beq.n	8006c96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c6c:	d013      	beq.n	8006c96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a18      	ldr	r2, [pc, #96]	@ (8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d00e      	beq.n	8006c96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a16      	ldr	r2, [pc, #88]	@ (8006cd8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d009      	beq.n	8006c96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a15      	ldr	r2, [pc, #84]	@ (8006cdc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d004      	beq.n	8006c96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a13      	ldr	r2, [pc, #76]	@ (8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d10c      	bne.n	8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	40010000 	.word	0x40010000
 8006cd4:	40000400 	.word	0x40000400
 8006cd8:	40000800 	.word	0x40000800
 8006cdc:	40000c00 	.word	0x40000c00
 8006ce0:	40014000 	.word	0x40014000

08006ce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e042      	b.n	8006da4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d106      	bne.n	8006d38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7fd f950 	bl	8003fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2224      	movs	r2, #36	@ 0x24
 8006d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68da      	ldr	r2, [r3, #12]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fdc7 	bl	80078e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	691a      	ldr	r2, [r3, #16]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	695a      	ldr	r2, [r3, #20]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68da      	ldr	r2, [r3, #12]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2220      	movs	r2, #32
 8006d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08a      	sub	sp, #40	@ 0x28
 8006db0:	af02      	add	r7, sp, #8
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	603b      	str	r3, [r7, #0]
 8006db8:	4613      	mov	r3, r2
 8006dba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b20      	cmp	r3, #32
 8006dca:	d175      	bne.n	8006eb8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d002      	beq.n	8006dd8 <HAL_UART_Transmit+0x2c>
 8006dd2:	88fb      	ldrh	r3, [r7, #6]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e06e      	b.n	8006eba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2221      	movs	r2, #33	@ 0x21
 8006de6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dea:	f7fd fafb 	bl	80043e4 <HAL_GetTick>
 8006dee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	88fa      	ldrh	r2, [r7, #6]
 8006df4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	88fa      	ldrh	r2, [r7, #6]
 8006dfa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e04:	d108      	bne.n	8006e18 <HAL_UART_Transmit+0x6c>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d104      	bne.n	8006e18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	61bb      	str	r3, [r7, #24]
 8006e16:	e003      	b.n	8006e20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e20:	e02e      	b.n	8006e80 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2180      	movs	r1, #128	@ 0x80
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 fb29 	bl	8007484 <UART_WaitOnFlagUntilTimeout>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d005      	beq.n	8006e44 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e03a      	b.n	8006eba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10b      	bne.n	8006e62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	3302      	adds	r3, #2
 8006e5e:	61bb      	str	r3, [r7, #24]
 8006e60:	e007      	b.n	8006e72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	781a      	ldrb	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1cb      	bne.n	8006e22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2200      	movs	r2, #0
 8006e92:	2140      	movs	r1, #64	@ 0x40
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 faf5 	bl	8007484 <UART_WaitOnFlagUntilTimeout>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d005      	beq.n	8006eac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e006      	b.n	8006eba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	e000      	b.n	8006eba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006eb8:	2302      	movs	r3, #2
  }
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3720      	adds	r7, #32
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b084      	sub	sp, #16
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	60f8      	str	r0, [r7, #12]
 8006eca:	60b9      	str	r1, [r7, #8]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b20      	cmp	r3, #32
 8006eda:	d112      	bne.n	8006f02 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d002      	beq.n	8006ee8 <HAL_UART_Receive_IT+0x26>
 8006ee2:	88fb      	ldrh	r3, [r7, #6]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e00b      	b.n	8006f04 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ef2:	88fb      	ldrh	r3, [r7, #6]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	68b9      	ldr	r1, [r7, #8]
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 fb1c 	bl	8007536 <UART_Start_Receive_IT>
 8006efe:	4603      	mov	r3, r0
 8006f00:	e000      	b.n	8006f04 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006f02:	2302      	movs	r3, #2
  }
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b0ba      	sub	sp, #232	@ 0xe8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f42:	f003 030f 	and.w	r3, r3, #15
 8006f46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006f4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10f      	bne.n	8006f72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f56:	f003 0320 	and.w	r3, r3, #32
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d009      	beq.n	8006f72 <HAL_UART_IRQHandler+0x66>
 8006f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f62:	f003 0320 	and.w	r3, r3, #32
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fbfc 	bl	8007768 <UART_Receive_IT>
      return;
 8006f70:	e25b      	b.n	800742a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006f72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f000 80de 	beq.w	8007138 <HAL_UART_IRQHandler+0x22c>
 8006f7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d106      	bne.n	8006f96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f8c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f000 80d1 	beq.w	8007138 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00b      	beq.n	8006fba <HAL_UART_IRQHandler+0xae>
 8006fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d005      	beq.n	8006fba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fb2:	f043 0201 	orr.w	r2, r3, #1
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fbe:	f003 0304 	and.w	r3, r3, #4
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00b      	beq.n	8006fde <HAL_UART_IRQHandler+0xd2>
 8006fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d005      	beq.n	8006fde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fd6:	f043 0202 	orr.w	r2, r3, #2
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fe2:	f003 0302 	and.w	r3, r3, #2
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00b      	beq.n	8007002 <HAL_UART_IRQHandler+0xf6>
 8006fea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d005      	beq.n	8007002 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ffa:	f043 0204 	orr.w	r2, r3, #4
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007006:	f003 0308 	and.w	r3, r3, #8
 800700a:	2b00      	cmp	r3, #0
 800700c:	d011      	beq.n	8007032 <HAL_UART_IRQHandler+0x126>
 800700e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007012:	f003 0320 	and.w	r3, r3, #32
 8007016:	2b00      	cmp	r3, #0
 8007018:	d105      	bne.n	8007026 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800701a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	2b00      	cmp	r3, #0
 8007024:	d005      	beq.n	8007032 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800702a:	f043 0208 	orr.w	r2, r3, #8
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007036:	2b00      	cmp	r3, #0
 8007038:	f000 81f2 	beq.w	8007420 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800703c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007040:	f003 0320 	and.w	r3, r3, #32
 8007044:	2b00      	cmp	r3, #0
 8007046:	d008      	beq.n	800705a <HAL_UART_IRQHandler+0x14e>
 8007048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800704c:	f003 0320 	and.w	r3, r3, #32
 8007050:	2b00      	cmp	r3, #0
 8007052:	d002      	beq.n	800705a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fb87 	bl	8007768 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007064:	2b40      	cmp	r3, #64	@ 0x40
 8007066:	bf0c      	ite	eq
 8007068:	2301      	moveq	r3, #1
 800706a:	2300      	movne	r3, #0
 800706c:	b2db      	uxtb	r3, r3
 800706e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007076:	f003 0308 	and.w	r3, r3, #8
 800707a:	2b00      	cmp	r3, #0
 800707c:	d103      	bne.n	8007086 <HAL_UART_IRQHandler+0x17a>
 800707e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007082:	2b00      	cmp	r3, #0
 8007084:	d04f      	beq.n	8007126 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fa8f 	bl	80075aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007096:	2b40      	cmp	r3, #64	@ 0x40
 8007098:	d141      	bne.n	800711e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	3314      	adds	r3, #20
 80070a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80070a8:	e853 3f00 	ldrex	r3, [r3]
 80070ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80070b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	3314      	adds	r3, #20
 80070c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80070c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80070ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80070d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80070d6:	e841 2300 	strex	r3, r2, [r1]
 80070da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80070de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1d9      	bne.n	800709a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d013      	beq.n	8007116 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070f2:	4a7e      	ldr	r2, [pc, #504]	@ (80072ec <HAL_UART_IRQHandler+0x3e0>)
 80070f4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fd fb23 	bl	8004746 <HAL_DMA_Abort_IT>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d016      	beq.n	8007134 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800710a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007110:	4610      	mov	r0, r2
 8007112:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007114:	e00e      	b.n	8007134 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f99e 	bl	8007458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800711c:	e00a      	b.n	8007134 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f99a 	bl	8007458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007124:	e006      	b.n	8007134 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f996 	bl	8007458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007132:	e175      	b.n	8007420 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007134:	bf00      	nop
    return;
 8007136:	e173      	b.n	8007420 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800713c:	2b01      	cmp	r3, #1
 800713e:	f040 814f 	bne.w	80073e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007146:	f003 0310 	and.w	r3, r3, #16
 800714a:	2b00      	cmp	r3, #0
 800714c:	f000 8148 	beq.w	80073e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007154:	f003 0310 	and.w	r3, r3, #16
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 8141 	beq.w	80073e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800715e:	2300      	movs	r3, #0
 8007160:	60bb      	str	r3, [r7, #8]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	60bb      	str	r3, [r7, #8]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	60bb      	str	r3, [r7, #8]
 8007172:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800717e:	2b40      	cmp	r3, #64	@ 0x40
 8007180:	f040 80b6 	bne.w	80072f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007190:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 8145 	beq.w	8007424 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800719e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071a2:	429a      	cmp	r2, r3
 80071a4:	f080 813e 	bcs.w	8007424 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071b4:	69db      	ldr	r3, [r3, #28]
 80071b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071ba:	f000 8088 	beq.w	80072ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	330c      	adds	r3, #12
 80071c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80071cc:	e853 3f00 	ldrex	r3, [r3]
 80071d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80071d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80071d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	330c      	adds	r3, #12
 80071e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80071ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80071ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80071f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80071fa:	e841 2300 	strex	r3, r2, [r1]
 80071fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007202:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1d9      	bne.n	80071be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3314      	adds	r3, #20
 8007210:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007212:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007214:	e853 3f00 	ldrex	r3, [r3]
 8007218:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800721a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800721c:	f023 0301 	bic.w	r3, r3, #1
 8007220:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3314      	adds	r3, #20
 800722a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800722e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007232:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007234:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007236:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800723a:	e841 2300 	strex	r3, r2, [r1]
 800723e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007240:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1e1      	bne.n	800720a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	3314      	adds	r3, #20
 800724c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007250:	e853 3f00 	ldrex	r3, [r3]
 8007254:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007256:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007258:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800725c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3314      	adds	r3, #20
 8007266:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800726a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800726c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007270:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007272:	e841 2300 	strex	r3, r2, [r1]
 8007276:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007278:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1e3      	bne.n	8007246 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2220      	movs	r2, #32
 8007282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	330c      	adds	r3, #12
 8007292:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007294:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007296:	e853 3f00 	ldrex	r3, [r3]
 800729a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800729c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800729e:	f023 0310 	bic.w	r3, r3, #16
 80072a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	330c      	adds	r3, #12
 80072ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80072b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80072b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80072b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072b8:	e841 2300 	strex	r3, r2, [r1]
 80072bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80072be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1e3      	bne.n	800728c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7fd f9cc 	bl	8004666 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2202      	movs	r2, #2
 80072d2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072dc:	b29b      	uxth	r3, r3
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	4619      	mov	r1, r3
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 f8c1 	bl	800746c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80072ea:	e09b      	b.n	8007424 <HAL_UART_IRQHandler+0x518>
 80072ec:	08007671 	.word	0x08007671
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007304:	b29b      	uxth	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 808e 	beq.w	8007428 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800730c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 8089 	beq.w	8007428 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	330c      	adds	r3, #12
 800731c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007320:	e853 3f00 	ldrex	r3, [r3]
 8007324:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007328:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800732c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	330c      	adds	r3, #12
 8007336:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800733a:	647a      	str	r2, [r7, #68]	@ 0x44
 800733c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007340:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007342:	e841 2300 	strex	r3, r2, [r1]
 8007346:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1e3      	bne.n	8007316 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	3314      	adds	r3, #20
 8007354:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007358:	e853 3f00 	ldrex	r3, [r3]
 800735c:	623b      	str	r3, [r7, #32]
   return(result);
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	f023 0301 	bic.w	r3, r3, #1
 8007364:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3314      	adds	r3, #20
 800736e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007372:	633a      	str	r2, [r7, #48]	@ 0x30
 8007374:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007376:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007378:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e3      	bne.n	800734e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2220      	movs	r2, #32
 800738a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	330c      	adds	r3, #12
 800739a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	e853 3f00 	ldrex	r3, [r3]
 80073a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f023 0310 	bic.w	r3, r3, #16
 80073aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	330c      	adds	r3, #12
 80073b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80073b8:	61fa      	str	r2, [r7, #28]
 80073ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073bc:	69b9      	ldr	r1, [r7, #24]
 80073be:	69fa      	ldr	r2, [r7, #28]
 80073c0:	e841 2300 	strex	r3, r2, [r1]
 80073c4:	617b      	str	r3, [r7, #20]
   return(result);
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1e3      	bne.n	8007394 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2202      	movs	r2, #2
 80073d0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80073d6:	4619      	mov	r1, r3
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f847 	bl	800746c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073de:	e023      	b.n	8007428 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80073e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d009      	beq.n	8007400 <HAL_UART_IRQHandler+0x4f4>
 80073ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d003      	beq.n	8007400 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f94d 	bl	8007698 <UART_Transmit_IT>
    return;
 80073fe:	e014      	b.n	800742a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00e      	beq.n	800742a <HAL_UART_IRQHandler+0x51e>
 800740c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007414:	2b00      	cmp	r3, #0
 8007416:	d008      	beq.n	800742a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f98d 	bl	8007738 <UART_EndTransmit_IT>
    return;
 800741e:	e004      	b.n	800742a <HAL_UART_IRQHandler+0x51e>
    return;
 8007420:	bf00      	nop
 8007422:	e002      	b.n	800742a <HAL_UART_IRQHandler+0x51e>
      return;
 8007424:	bf00      	nop
 8007426:	e000      	b.n	800742a <HAL_UART_IRQHandler+0x51e>
      return;
 8007428:	bf00      	nop
  }
}
 800742a:	37e8      	adds	r7, #232	@ 0xe8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	460b      	mov	r3, r1
 8007476:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	603b      	str	r3, [r7, #0]
 8007490:	4613      	mov	r3, r2
 8007492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007494:	e03b      	b.n	800750e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749c:	d037      	beq.n	800750e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800749e:	f7fc ffa1 	bl	80043e4 <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	6a3a      	ldr	r2, [r7, #32]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d302      	bcc.n	80074b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e03a      	b.n	800752e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f003 0304 	and.w	r3, r3, #4
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d023      	beq.n	800750e <UART_WaitOnFlagUntilTimeout+0x8a>
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	2b80      	cmp	r3, #128	@ 0x80
 80074ca:	d020      	beq.n	800750e <UART_WaitOnFlagUntilTimeout+0x8a>
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	2b40      	cmp	r3, #64	@ 0x40
 80074d0:	d01d      	beq.n	800750e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0308 	and.w	r3, r3, #8
 80074dc:	2b08      	cmp	r3, #8
 80074de:	d116      	bne.n	800750e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80074e0:	2300      	movs	r3, #0
 80074e2:	617b      	str	r3, [r7, #20]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	617b      	str	r3, [r7, #20]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	617b      	str	r3, [r7, #20]
 80074f4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f000 f857 	bl	80075aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2208      	movs	r2, #8
 8007500:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e00f      	b.n	800752e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	4013      	ands	r3, r2
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	429a      	cmp	r2, r3
 800751c:	bf0c      	ite	eq
 800751e:	2301      	moveq	r3, #1
 8007520:	2300      	movne	r3, #0
 8007522:	b2db      	uxtb	r3, r3
 8007524:	461a      	mov	r2, r3
 8007526:	79fb      	ldrb	r3, [r7, #7]
 8007528:	429a      	cmp	r2, r3
 800752a:	d0b4      	beq.n	8007496 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3718      	adds	r7, #24
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007536:	b480      	push	{r7}
 8007538:	b085      	sub	sp, #20
 800753a:	af00      	add	r7, sp, #0
 800753c:	60f8      	str	r0, [r7, #12]
 800753e:	60b9      	str	r1, [r7, #8]
 8007540:	4613      	mov	r3, r2
 8007542:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	88fa      	ldrh	r2, [r7, #6]
 800754e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	88fa      	ldrh	r2, [r7, #6]
 8007554:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2222      	movs	r2, #34	@ 0x22
 8007560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d007      	beq.n	800757c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68da      	ldr	r2, [r3, #12]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800757a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	695a      	ldr	r2, [r3, #20]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f042 0201 	orr.w	r2, r2, #1
 800758a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68da      	ldr	r2, [r3, #12]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f042 0220 	orr.w	r2, r2, #32
 800759a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3714      	adds	r7, #20
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b095      	sub	sp, #84	@ 0x54
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	330c      	adds	r3, #12
 80075b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075bc:	e853 3f00 	ldrex	r3, [r3]
 80075c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	330c      	adds	r3, #12
 80075d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80075d2:	643a      	str	r2, [r7, #64]	@ 0x40
 80075d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075da:	e841 2300 	strex	r3, r2, [r1]
 80075de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1e5      	bne.n	80075b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	3314      	adds	r3, #20
 80075ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	e853 3f00 	ldrex	r3, [r3]
 80075f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	f023 0301 	bic.w	r3, r3, #1
 80075fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3314      	adds	r3, #20
 8007604:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007606:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007608:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800760c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800760e:	e841 2300 	strex	r3, r2, [r1]
 8007612:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e5      	bne.n	80075e6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800761e:	2b01      	cmp	r3, #1
 8007620:	d119      	bne.n	8007656 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	330c      	adds	r3, #12
 8007628:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	e853 3f00 	ldrex	r3, [r3]
 8007630:	60bb      	str	r3, [r7, #8]
   return(result);
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	f023 0310 	bic.w	r3, r3, #16
 8007638:	647b      	str	r3, [r7, #68]	@ 0x44
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	330c      	adds	r3, #12
 8007640:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007642:	61ba      	str	r2, [r7, #24]
 8007644:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007646:	6979      	ldr	r1, [r7, #20]
 8007648:	69ba      	ldr	r2, [r7, #24]
 800764a:	e841 2300 	strex	r3, r2, [r1]
 800764e:	613b      	str	r3, [r7, #16]
   return(result);
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1e5      	bne.n	8007622 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2220      	movs	r2, #32
 800765a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007664:	bf00      	nop
 8007666:	3754      	adds	r7, #84	@ 0x54
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f7ff fee4 	bl	8007458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007690:	bf00      	nop
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b21      	cmp	r3, #33	@ 0x21
 80076aa:	d13e      	bne.n	800772a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076b4:	d114      	bne.n	80076e0 <UART_Transmit_IT+0x48>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d110      	bne.n	80076e0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a1b      	ldr	r3, [r3, #32]
 80076c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	461a      	mov	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a1b      	ldr	r3, [r3, #32]
 80076d8:	1c9a      	adds	r2, r3, #2
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	621a      	str	r2, [r3, #32]
 80076de:	e008      	b.n	80076f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a1b      	ldr	r3, [r3, #32]
 80076e4:	1c59      	adds	r1, r3, #1
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	6211      	str	r1, [r2, #32]
 80076ea:	781a      	ldrb	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	3b01      	subs	r3, #1
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	4619      	mov	r1, r3
 8007700:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10f      	bne.n	8007726 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68da      	ldr	r2, [r3, #12]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007714:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68da      	ldr	r2, [r3, #12]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007724:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	e000      	b.n	800772c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800772a:	2302      	movs	r3, #2
  }
}
 800772c:	4618      	mov	r0, r3
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68da      	ldr	r2, [r3, #12]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800774e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2220      	movs	r2, #32
 8007754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7ff fe69 	bl	8007430 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b08c      	sub	sp, #48	@ 0x30
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2b22      	cmp	r3, #34	@ 0x22
 800777a:	f040 80ae 	bne.w	80078da <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007786:	d117      	bne.n	80077b8 <UART_Receive_IT+0x50>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d113      	bne.n	80077b8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007790:	2300      	movs	r3, #0
 8007792:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007798:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b0:	1c9a      	adds	r2, r3, #2
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80077b6:	e026      	b.n	8007806 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80077be:	2300      	movs	r3, #0
 80077c0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077ca:	d007      	beq.n	80077dc <UART_Receive_IT+0x74>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d10a      	bne.n	80077ea <UART_Receive_IT+0x82>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d106      	bne.n	80077ea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e6:	701a      	strb	r2, [r3, #0]
 80077e8:	e008      	b.n	80077fc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077fa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007800:	1c5a      	adds	r2, r3, #1
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800780a:	b29b      	uxth	r3, r3
 800780c:	3b01      	subs	r3, #1
 800780e:	b29b      	uxth	r3, r3
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	4619      	mov	r1, r3
 8007814:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007816:	2b00      	cmp	r3, #0
 8007818:	d15d      	bne.n	80078d6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68da      	ldr	r2, [r3, #12]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f022 0220 	bic.w	r2, r2, #32
 8007828:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68da      	ldr	r2, [r3, #12]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007838:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	695a      	ldr	r2, [r3, #20]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f022 0201 	bic.w	r2, r2, #1
 8007848:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2220      	movs	r2, #32
 800784e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800785c:	2b01      	cmp	r3, #1
 800785e:	d135      	bne.n	80078cc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	330c      	adds	r3, #12
 800786c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	e853 3f00 	ldrex	r3, [r3]
 8007874:	613b      	str	r3, [r7, #16]
   return(result);
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	f023 0310 	bic.w	r3, r3, #16
 800787c:	627b      	str	r3, [r7, #36]	@ 0x24
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	330c      	adds	r3, #12
 8007884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007886:	623a      	str	r2, [r7, #32]
 8007888:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788a:	69f9      	ldr	r1, [r7, #28]
 800788c:	6a3a      	ldr	r2, [r7, #32]
 800788e:	e841 2300 	strex	r3, r2, [r1]
 8007892:	61bb      	str	r3, [r7, #24]
   return(result);
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1e5      	bne.n	8007866 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0310 	and.w	r3, r3, #16
 80078a4:	2b10      	cmp	r3, #16
 80078a6:	d10a      	bne.n	80078be <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078a8:	2300      	movs	r3, #0
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	60fb      	str	r3, [r7, #12]
 80078bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80078c2:	4619      	mov	r1, r3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7ff fdd1 	bl	800746c <HAL_UARTEx_RxEventCallback>
 80078ca:	e002      	b.n	80078d2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7ff fdb9 	bl	8007444 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	e002      	b.n	80078dc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	e000      	b.n	80078dc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80078da:	2302      	movs	r3, #2
  }
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3730      	adds	r7, #48	@ 0x30
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078e8:	b0c0      	sub	sp, #256	@ 0x100
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80078fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007900:	68d9      	ldr	r1, [r3, #12]
 8007902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	ea40 0301 	orr.w	r3, r0, r1
 800790c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800790e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007912:	689a      	ldr	r2, [r3, #8]
 8007914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	431a      	orrs	r2, r3
 800791c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	431a      	orrs	r2, r3
 8007924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007928:	69db      	ldr	r3, [r3, #28]
 800792a:	4313      	orrs	r3, r2
 800792c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800793c:	f021 010c 	bic.w	r1, r1, #12
 8007940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800794a:	430b      	orrs	r3, r1
 800794c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800794e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800795a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800795e:	6999      	ldr	r1, [r3, #24]
 8007960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	ea40 0301 	orr.w	r3, r0, r1
 800796a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800796c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	4b8f      	ldr	r3, [pc, #572]	@ (8007bb0 <UART_SetConfig+0x2cc>)
 8007974:	429a      	cmp	r2, r3
 8007976:	d005      	beq.n	8007984 <UART_SetConfig+0xa0>
 8007978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	4b8d      	ldr	r3, [pc, #564]	@ (8007bb4 <UART_SetConfig+0x2d0>)
 8007980:	429a      	cmp	r2, r3
 8007982:	d104      	bne.n	800798e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007984:	f7fd fee8 	bl	8005758 <HAL_RCC_GetPCLK2Freq>
 8007988:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800798c:	e003      	b.n	8007996 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800798e:	f7fd fecf 	bl	8005730 <HAL_RCC_GetPCLK1Freq>
 8007992:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800799a:	69db      	ldr	r3, [r3, #28]
 800799c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079a0:	f040 810c 	bne.w	8007bbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079a8:	2200      	movs	r2, #0
 80079aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80079ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80079b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80079b6:	4622      	mov	r2, r4
 80079b8:	462b      	mov	r3, r5
 80079ba:	1891      	adds	r1, r2, r2
 80079bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80079be:	415b      	adcs	r3, r3
 80079c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80079c6:	4621      	mov	r1, r4
 80079c8:	eb12 0801 	adds.w	r8, r2, r1
 80079cc:	4629      	mov	r1, r5
 80079ce:	eb43 0901 	adc.w	r9, r3, r1
 80079d2:	f04f 0200 	mov.w	r2, #0
 80079d6:	f04f 0300 	mov.w	r3, #0
 80079da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079e6:	4690      	mov	r8, r2
 80079e8:	4699      	mov	r9, r3
 80079ea:	4623      	mov	r3, r4
 80079ec:	eb18 0303 	adds.w	r3, r8, r3
 80079f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079f4:	462b      	mov	r3, r5
 80079f6:	eb49 0303 	adc.w	r3, r9, r3
 80079fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80079fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a0a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007a0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007a12:	460b      	mov	r3, r1
 8007a14:	18db      	adds	r3, r3, r3
 8007a16:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a18:	4613      	mov	r3, r2
 8007a1a:	eb42 0303 	adc.w	r3, r2, r3
 8007a1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007a24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007a28:	f7f9 f828 	bl	8000a7c <__aeabi_uldivmod>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4b61      	ldr	r3, [pc, #388]	@ (8007bb8 <UART_SetConfig+0x2d4>)
 8007a32:	fba3 2302 	umull	r2, r3, r3, r2
 8007a36:	095b      	lsrs	r3, r3, #5
 8007a38:	011c      	lsls	r4, r3, #4
 8007a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a44:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007a48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007a4c:	4642      	mov	r2, r8
 8007a4e:	464b      	mov	r3, r9
 8007a50:	1891      	adds	r1, r2, r2
 8007a52:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007a54:	415b      	adcs	r3, r3
 8007a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007a5c:	4641      	mov	r1, r8
 8007a5e:	eb12 0a01 	adds.w	sl, r2, r1
 8007a62:	4649      	mov	r1, r9
 8007a64:	eb43 0b01 	adc.w	fp, r3, r1
 8007a68:	f04f 0200 	mov.w	r2, #0
 8007a6c:	f04f 0300 	mov.w	r3, #0
 8007a70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a7c:	4692      	mov	sl, r2
 8007a7e:	469b      	mov	fp, r3
 8007a80:	4643      	mov	r3, r8
 8007a82:	eb1a 0303 	adds.w	r3, sl, r3
 8007a86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a8a:	464b      	mov	r3, r9
 8007a8c:	eb4b 0303 	adc.w	r3, fp, r3
 8007a90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007aa0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007aa4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	18db      	adds	r3, r3, r3
 8007aac:	643b      	str	r3, [r7, #64]	@ 0x40
 8007aae:	4613      	mov	r3, r2
 8007ab0:	eb42 0303 	adc.w	r3, r2, r3
 8007ab4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ab6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007aba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007abe:	f7f8 ffdd 	bl	8000a7c <__aeabi_uldivmod>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	4611      	mov	r1, r2
 8007ac8:	4b3b      	ldr	r3, [pc, #236]	@ (8007bb8 <UART_SetConfig+0x2d4>)
 8007aca:	fba3 2301 	umull	r2, r3, r3, r1
 8007ace:	095b      	lsrs	r3, r3, #5
 8007ad0:	2264      	movs	r2, #100	@ 0x64
 8007ad2:	fb02 f303 	mul.w	r3, r2, r3
 8007ad6:	1acb      	subs	r3, r1, r3
 8007ad8:	00db      	lsls	r3, r3, #3
 8007ada:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007ade:	4b36      	ldr	r3, [pc, #216]	@ (8007bb8 <UART_SetConfig+0x2d4>)
 8007ae0:	fba3 2302 	umull	r2, r3, r3, r2
 8007ae4:	095b      	lsrs	r3, r3, #5
 8007ae6:	005b      	lsls	r3, r3, #1
 8007ae8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007aec:	441c      	add	r4, r3
 8007aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007af2:	2200      	movs	r2, #0
 8007af4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007af8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007afc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007b00:	4642      	mov	r2, r8
 8007b02:	464b      	mov	r3, r9
 8007b04:	1891      	adds	r1, r2, r2
 8007b06:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007b08:	415b      	adcs	r3, r3
 8007b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007b10:	4641      	mov	r1, r8
 8007b12:	1851      	adds	r1, r2, r1
 8007b14:	6339      	str	r1, [r7, #48]	@ 0x30
 8007b16:	4649      	mov	r1, r9
 8007b18:	414b      	adcs	r3, r1
 8007b1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b1c:	f04f 0200 	mov.w	r2, #0
 8007b20:	f04f 0300 	mov.w	r3, #0
 8007b24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007b28:	4659      	mov	r1, fp
 8007b2a:	00cb      	lsls	r3, r1, #3
 8007b2c:	4651      	mov	r1, sl
 8007b2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b32:	4651      	mov	r1, sl
 8007b34:	00ca      	lsls	r2, r1, #3
 8007b36:	4610      	mov	r0, r2
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	4642      	mov	r2, r8
 8007b3e:	189b      	adds	r3, r3, r2
 8007b40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b44:	464b      	mov	r3, r9
 8007b46:	460a      	mov	r2, r1
 8007b48:	eb42 0303 	adc.w	r3, r2, r3
 8007b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b5c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007b60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b64:	460b      	mov	r3, r1
 8007b66:	18db      	adds	r3, r3, r3
 8007b68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	eb42 0303 	adc.w	r3, r2, r3
 8007b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007b76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007b7a:	f7f8 ff7f 	bl	8000a7c <__aeabi_uldivmod>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	4b0d      	ldr	r3, [pc, #52]	@ (8007bb8 <UART_SetConfig+0x2d4>)
 8007b84:	fba3 1302 	umull	r1, r3, r3, r2
 8007b88:	095b      	lsrs	r3, r3, #5
 8007b8a:	2164      	movs	r1, #100	@ 0x64
 8007b8c:	fb01 f303 	mul.w	r3, r1, r3
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	00db      	lsls	r3, r3, #3
 8007b94:	3332      	adds	r3, #50	@ 0x32
 8007b96:	4a08      	ldr	r2, [pc, #32]	@ (8007bb8 <UART_SetConfig+0x2d4>)
 8007b98:	fba2 2303 	umull	r2, r3, r2, r3
 8007b9c:	095b      	lsrs	r3, r3, #5
 8007b9e:	f003 0207 	and.w	r2, r3, #7
 8007ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4422      	add	r2, r4
 8007baa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007bac:	e106      	b.n	8007dbc <UART_SetConfig+0x4d8>
 8007bae:	bf00      	nop
 8007bb0:	40011000 	.word	0x40011000
 8007bb4:	40011400 	.word	0x40011400
 8007bb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007bc6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007bca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007bce:	4642      	mov	r2, r8
 8007bd0:	464b      	mov	r3, r9
 8007bd2:	1891      	adds	r1, r2, r2
 8007bd4:	6239      	str	r1, [r7, #32]
 8007bd6:	415b      	adcs	r3, r3
 8007bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007bde:	4641      	mov	r1, r8
 8007be0:	1854      	adds	r4, r2, r1
 8007be2:	4649      	mov	r1, r9
 8007be4:	eb43 0501 	adc.w	r5, r3, r1
 8007be8:	f04f 0200 	mov.w	r2, #0
 8007bec:	f04f 0300 	mov.w	r3, #0
 8007bf0:	00eb      	lsls	r3, r5, #3
 8007bf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007bf6:	00e2      	lsls	r2, r4, #3
 8007bf8:	4614      	mov	r4, r2
 8007bfa:	461d      	mov	r5, r3
 8007bfc:	4643      	mov	r3, r8
 8007bfe:	18e3      	adds	r3, r4, r3
 8007c00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c04:	464b      	mov	r3, r9
 8007c06:	eb45 0303 	adc.w	r3, r5, r3
 8007c0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007c1e:	f04f 0200 	mov.w	r2, #0
 8007c22:	f04f 0300 	mov.w	r3, #0
 8007c26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007c2a:	4629      	mov	r1, r5
 8007c2c:	008b      	lsls	r3, r1, #2
 8007c2e:	4621      	mov	r1, r4
 8007c30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c34:	4621      	mov	r1, r4
 8007c36:	008a      	lsls	r2, r1, #2
 8007c38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007c3c:	f7f8 ff1e 	bl	8000a7c <__aeabi_uldivmod>
 8007c40:	4602      	mov	r2, r0
 8007c42:	460b      	mov	r3, r1
 8007c44:	4b60      	ldr	r3, [pc, #384]	@ (8007dc8 <UART_SetConfig+0x4e4>)
 8007c46:	fba3 2302 	umull	r2, r3, r3, r2
 8007c4a:	095b      	lsrs	r3, r3, #5
 8007c4c:	011c      	lsls	r4, r3, #4
 8007c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c52:	2200      	movs	r2, #0
 8007c54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007c5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007c60:	4642      	mov	r2, r8
 8007c62:	464b      	mov	r3, r9
 8007c64:	1891      	adds	r1, r2, r2
 8007c66:	61b9      	str	r1, [r7, #24]
 8007c68:	415b      	adcs	r3, r3
 8007c6a:	61fb      	str	r3, [r7, #28]
 8007c6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c70:	4641      	mov	r1, r8
 8007c72:	1851      	adds	r1, r2, r1
 8007c74:	6139      	str	r1, [r7, #16]
 8007c76:	4649      	mov	r1, r9
 8007c78:	414b      	adcs	r3, r1
 8007c7a:	617b      	str	r3, [r7, #20]
 8007c7c:	f04f 0200 	mov.w	r2, #0
 8007c80:	f04f 0300 	mov.w	r3, #0
 8007c84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c88:	4659      	mov	r1, fp
 8007c8a:	00cb      	lsls	r3, r1, #3
 8007c8c:	4651      	mov	r1, sl
 8007c8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c92:	4651      	mov	r1, sl
 8007c94:	00ca      	lsls	r2, r1, #3
 8007c96:	4610      	mov	r0, r2
 8007c98:	4619      	mov	r1, r3
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	4642      	mov	r2, r8
 8007c9e:	189b      	adds	r3, r3, r2
 8007ca0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ca4:	464b      	mov	r3, r9
 8007ca6:	460a      	mov	r2, r1
 8007ca8:	eb42 0303 	adc.w	r3, r2, r3
 8007cac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007cba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007cbc:	f04f 0200 	mov.w	r2, #0
 8007cc0:	f04f 0300 	mov.w	r3, #0
 8007cc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007cc8:	4649      	mov	r1, r9
 8007cca:	008b      	lsls	r3, r1, #2
 8007ccc:	4641      	mov	r1, r8
 8007cce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cd2:	4641      	mov	r1, r8
 8007cd4:	008a      	lsls	r2, r1, #2
 8007cd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007cda:	f7f8 fecf 	bl	8000a7c <__aeabi_uldivmod>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4611      	mov	r1, r2
 8007ce4:	4b38      	ldr	r3, [pc, #224]	@ (8007dc8 <UART_SetConfig+0x4e4>)
 8007ce6:	fba3 2301 	umull	r2, r3, r3, r1
 8007cea:	095b      	lsrs	r3, r3, #5
 8007cec:	2264      	movs	r2, #100	@ 0x64
 8007cee:	fb02 f303 	mul.w	r3, r2, r3
 8007cf2:	1acb      	subs	r3, r1, r3
 8007cf4:	011b      	lsls	r3, r3, #4
 8007cf6:	3332      	adds	r3, #50	@ 0x32
 8007cf8:	4a33      	ldr	r2, [pc, #204]	@ (8007dc8 <UART_SetConfig+0x4e4>)
 8007cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8007cfe:	095b      	lsrs	r3, r3, #5
 8007d00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d04:	441c      	add	r4, r3
 8007d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007d10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007d14:	4642      	mov	r2, r8
 8007d16:	464b      	mov	r3, r9
 8007d18:	1891      	adds	r1, r2, r2
 8007d1a:	60b9      	str	r1, [r7, #8]
 8007d1c:	415b      	adcs	r3, r3
 8007d1e:	60fb      	str	r3, [r7, #12]
 8007d20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d24:	4641      	mov	r1, r8
 8007d26:	1851      	adds	r1, r2, r1
 8007d28:	6039      	str	r1, [r7, #0]
 8007d2a:	4649      	mov	r1, r9
 8007d2c:	414b      	adcs	r3, r1
 8007d2e:	607b      	str	r3, [r7, #4]
 8007d30:	f04f 0200 	mov.w	r2, #0
 8007d34:	f04f 0300 	mov.w	r3, #0
 8007d38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d3c:	4659      	mov	r1, fp
 8007d3e:	00cb      	lsls	r3, r1, #3
 8007d40:	4651      	mov	r1, sl
 8007d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d46:	4651      	mov	r1, sl
 8007d48:	00ca      	lsls	r2, r1, #3
 8007d4a:	4610      	mov	r0, r2
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	4603      	mov	r3, r0
 8007d50:	4642      	mov	r2, r8
 8007d52:	189b      	adds	r3, r3, r2
 8007d54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d56:	464b      	mov	r3, r9
 8007d58:	460a      	mov	r2, r1
 8007d5a:	eb42 0303 	adc.w	r3, r2, r3
 8007d5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d6a:	667a      	str	r2, [r7, #100]	@ 0x64
 8007d6c:	f04f 0200 	mov.w	r2, #0
 8007d70:	f04f 0300 	mov.w	r3, #0
 8007d74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007d78:	4649      	mov	r1, r9
 8007d7a:	008b      	lsls	r3, r1, #2
 8007d7c:	4641      	mov	r1, r8
 8007d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d82:	4641      	mov	r1, r8
 8007d84:	008a      	lsls	r2, r1, #2
 8007d86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007d8a:	f7f8 fe77 	bl	8000a7c <__aeabi_uldivmod>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	460b      	mov	r3, r1
 8007d92:	4b0d      	ldr	r3, [pc, #52]	@ (8007dc8 <UART_SetConfig+0x4e4>)
 8007d94:	fba3 1302 	umull	r1, r3, r3, r2
 8007d98:	095b      	lsrs	r3, r3, #5
 8007d9a:	2164      	movs	r1, #100	@ 0x64
 8007d9c:	fb01 f303 	mul.w	r3, r1, r3
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	011b      	lsls	r3, r3, #4
 8007da4:	3332      	adds	r3, #50	@ 0x32
 8007da6:	4a08      	ldr	r2, [pc, #32]	@ (8007dc8 <UART_SetConfig+0x4e4>)
 8007da8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dac:	095b      	lsrs	r3, r3, #5
 8007dae:	f003 020f 	and.w	r2, r3, #15
 8007db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4422      	add	r2, r4
 8007dba:	609a      	str	r2, [r3, #8]
}
 8007dbc:	bf00      	nop
 8007dbe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dc8:	51eb851f 	.word	0x51eb851f

08007dcc <atoi>:
 8007dcc:	220a      	movs	r2, #10
 8007dce:	2100      	movs	r1, #0
 8007dd0:	f000 b87a 	b.w	8007ec8 <strtol>

08007dd4 <_strtol_l.constprop.0>:
 8007dd4:	2b24      	cmp	r3, #36	@ 0x24
 8007dd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dda:	4686      	mov	lr, r0
 8007ddc:	4690      	mov	r8, r2
 8007dde:	d801      	bhi.n	8007de4 <_strtol_l.constprop.0+0x10>
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d106      	bne.n	8007df2 <_strtol_l.constprop.0+0x1e>
 8007de4:	f000 f8de 	bl	8007fa4 <__errno>
 8007de8:	2316      	movs	r3, #22
 8007dea:	6003      	str	r3, [r0, #0]
 8007dec:	2000      	movs	r0, #0
 8007dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007df2:	4834      	ldr	r0, [pc, #208]	@ (8007ec4 <_strtol_l.constprop.0+0xf0>)
 8007df4:	460d      	mov	r5, r1
 8007df6:	462a      	mov	r2, r5
 8007df8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007dfc:	5d06      	ldrb	r6, [r0, r4]
 8007dfe:	f016 0608 	ands.w	r6, r6, #8
 8007e02:	d1f8      	bne.n	8007df6 <_strtol_l.constprop.0+0x22>
 8007e04:	2c2d      	cmp	r4, #45	@ 0x2d
 8007e06:	d12d      	bne.n	8007e64 <_strtol_l.constprop.0+0x90>
 8007e08:	782c      	ldrb	r4, [r5, #0]
 8007e0a:	2601      	movs	r6, #1
 8007e0c:	1c95      	adds	r5, r2, #2
 8007e0e:	f033 0210 	bics.w	r2, r3, #16
 8007e12:	d109      	bne.n	8007e28 <_strtol_l.constprop.0+0x54>
 8007e14:	2c30      	cmp	r4, #48	@ 0x30
 8007e16:	d12a      	bne.n	8007e6e <_strtol_l.constprop.0+0x9a>
 8007e18:	782a      	ldrb	r2, [r5, #0]
 8007e1a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007e1e:	2a58      	cmp	r2, #88	@ 0x58
 8007e20:	d125      	bne.n	8007e6e <_strtol_l.constprop.0+0x9a>
 8007e22:	786c      	ldrb	r4, [r5, #1]
 8007e24:	2310      	movs	r3, #16
 8007e26:	3502      	adds	r5, #2
 8007e28:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007e2c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007e30:	2200      	movs	r2, #0
 8007e32:	fbbc f9f3 	udiv	r9, ip, r3
 8007e36:	4610      	mov	r0, r2
 8007e38:	fb03 ca19 	mls	sl, r3, r9, ip
 8007e3c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007e40:	2f09      	cmp	r7, #9
 8007e42:	d81b      	bhi.n	8007e7c <_strtol_l.constprop.0+0xa8>
 8007e44:	463c      	mov	r4, r7
 8007e46:	42a3      	cmp	r3, r4
 8007e48:	dd27      	ble.n	8007e9a <_strtol_l.constprop.0+0xc6>
 8007e4a:	1c57      	adds	r7, r2, #1
 8007e4c:	d007      	beq.n	8007e5e <_strtol_l.constprop.0+0x8a>
 8007e4e:	4581      	cmp	r9, r0
 8007e50:	d320      	bcc.n	8007e94 <_strtol_l.constprop.0+0xc0>
 8007e52:	d101      	bne.n	8007e58 <_strtol_l.constprop.0+0x84>
 8007e54:	45a2      	cmp	sl, r4
 8007e56:	db1d      	blt.n	8007e94 <_strtol_l.constprop.0+0xc0>
 8007e58:	fb00 4003 	mla	r0, r0, r3, r4
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e62:	e7eb      	b.n	8007e3c <_strtol_l.constprop.0+0x68>
 8007e64:	2c2b      	cmp	r4, #43	@ 0x2b
 8007e66:	bf04      	itt	eq
 8007e68:	782c      	ldrbeq	r4, [r5, #0]
 8007e6a:	1c95      	addeq	r5, r2, #2
 8007e6c:	e7cf      	b.n	8007e0e <_strtol_l.constprop.0+0x3a>
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1da      	bne.n	8007e28 <_strtol_l.constprop.0+0x54>
 8007e72:	2c30      	cmp	r4, #48	@ 0x30
 8007e74:	bf0c      	ite	eq
 8007e76:	2308      	moveq	r3, #8
 8007e78:	230a      	movne	r3, #10
 8007e7a:	e7d5      	b.n	8007e28 <_strtol_l.constprop.0+0x54>
 8007e7c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007e80:	2f19      	cmp	r7, #25
 8007e82:	d801      	bhi.n	8007e88 <_strtol_l.constprop.0+0xb4>
 8007e84:	3c37      	subs	r4, #55	@ 0x37
 8007e86:	e7de      	b.n	8007e46 <_strtol_l.constprop.0+0x72>
 8007e88:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007e8c:	2f19      	cmp	r7, #25
 8007e8e:	d804      	bhi.n	8007e9a <_strtol_l.constprop.0+0xc6>
 8007e90:	3c57      	subs	r4, #87	@ 0x57
 8007e92:	e7d8      	b.n	8007e46 <_strtol_l.constprop.0+0x72>
 8007e94:	f04f 32ff 	mov.w	r2, #4294967295
 8007e98:	e7e1      	b.n	8007e5e <_strtol_l.constprop.0+0x8a>
 8007e9a:	1c53      	adds	r3, r2, #1
 8007e9c:	d108      	bne.n	8007eb0 <_strtol_l.constprop.0+0xdc>
 8007e9e:	2322      	movs	r3, #34	@ 0x22
 8007ea0:	f8ce 3000 	str.w	r3, [lr]
 8007ea4:	4660      	mov	r0, ip
 8007ea6:	f1b8 0f00 	cmp.w	r8, #0
 8007eaa:	d0a0      	beq.n	8007dee <_strtol_l.constprop.0+0x1a>
 8007eac:	1e69      	subs	r1, r5, #1
 8007eae:	e006      	b.n	8007ebe <_strtol_l.constprop.0+0xea>
 8007eb0:	b106      	cbz	r6, 8007eb4 <_strtol_l.constprop.0+0xe0>
 8007eb2:	4240      	negs	r0, r0
 8007eb4:	f1b8 0f00 	cmp.w	r8, #0
 8007eb8:	d099      	beq.n	8007dee <_strtol_l.constprop.0+0x1a>
 8007eba:	2a00      	cmp	r2, #0
 8007ebc:	d1f6      	bne.n	8007eac <_strtol_l.constprop.0+0xd8>
 8007ebe:	f8c8 1000 	str.w	r1, [r8]
 8007ec2:	e794      	b.n	8007dee <_strtol_l.constprop.0+0x1a>
 8007ec4:	0800961d 	.word	0x0800961d

08007ec8 <strtol>:
 8007ec8:	4613      	mov	r3, r2
 8007eca:	460a      	mov	r2, r1
 8007ecc:	4601      	mov	r1, r0
 8007ece:	4802      	ldr	r0, [pc, #8]	@ (8007ed8 <strtol+0x10>)
 8007ed0:	6800      	ldr	r0, [r0, #0]
 8007ed2:	f7ff bf7f 	b.w	8007dd4 <_strtol_l.constprop.0>
 8007ed6:	bf00      	nop
 8007ed8:	2000011c 	.word	0x2000011c

08007edc <siprintf>:
 8007edc:	b40e      	push	{r1, r2, r3}
 8007ede:	b500      	push	{lr}
 8007ee0:	b09c      	sub	sp, #112	@ 0x70
 8007ee2:	ab1d      	add	r3, sp, #116	@ 0x74
 8007ee4:	9002      	str	r0, [sp, #8]
 8007ee6:	9006      	str	r0, [sp, #24]
 8007ee8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007eec:	4809      	ldr	r0, [pc, #36]	@ (8007f14 <siprintf+0x38>)
 8007eee:	9107      	str	r1, [sp, #28]
 8007ef0:	9104      	str	r1, [sp, #16]
 8007ef2:	4909      	ldr	r1, [pc, #36]	@ (8007f18 <siprintf+0x3c>)
 8007ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ef8:	9105      	str	r1, [sp, #20]
 8007efa:	6800      	ldr	r0, [r0, #0]
 8007efc:	9301      	str	r3, [sp, #4]
 8007efe:	a902      	add	r1, sp, #8
 8007f00:	f000 f9d8 	bl	80082b4 <_svfiprintf_r>
 8007f04:	9b02      	ldr	r3, [sp, #8]
 8007f06:	2200      	movs	r2, #0
 8007f08:	701a      	strb	r2, [r3, #0]
 8007f0a:	b01c      	add	sp, #112	@ 0x70
 8007f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f10:	b003      	add	sp, #12
 8007f12:	4770      	bx	lr
 8007f14:	2000011c 	.word	0x2000011c
 8007f18:	ffff0208 	.word	0xffff0208

08007f1c <memset>:
 8007f1c:	4402      	add	r2, r0
 8007f1e:	4603      	mov	r3, r0
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d100      	bne.n	8007f26 <memset+0xa>
 8007f24:	4770      	bx	lr
 8007f26:	f803 1b01 	strb.w	r1, [r3], #1
 8007f2a:	e7f9      	b.n	8007f20 <memset+0x4>

08007f2c <strcat>:
 8007f2c:	b510      	push	{r4, lr}
 8007f2e:	4602      	mov	r2, r0
 8007f30:	7814      	ldrb	r4, [r2, #0]
 8007f32:	4613      	mov	r3, r2
 8007f34:	3201      	adds	r2, #1
 8007f36:	2c00      	cmp	r4, #0
 8007f38:	d1fa      	bne.n	8007f30 <strcat+0x4>
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f40:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f44:	2a00      	cmp	r2, #0
 8007f46:	d1f9      	bne.n	8007f3c <strcat+0x10>
 8007f48:	bd10      	pop	{r4, pc}

08007f4a <strsep>:
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	6800      	ldr	r0, [r0, #0]
 8007f50:	f000 b800 	b.w	8007f54 <__strtok_r>

08007f54 <__strtok_r>:
 8007f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f56:	4604      	mov	r4, r0
 8007f58:	b908      	cbnz	r0, 8007f5e <__strtok_r+0xa>
 8007f5a:	6814      	ldr	r4, [r2, #0]
 8007f5c:	b144      	cbz	r4, 8007f70 <__strtok_r+0x1c>
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007f64:	460f      	mov	r7, r1
 8007f66:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007f6a:	b91e      	cbnz	r6, 8007f74 <__strtok_r+0x20>
 8007f6c:	b965      	cbnz	r5, 8007f88 <__strtok_r+0x34>
 8007f6e:	6015      	str	r5, [r2, #0]
 8007f70:	2000      	movs	r0, #0
 8007f72:	e005      	b.n	8007f80 <__strtok_r+0x2c>
 8007f74:	42b5      	cmp	r5, r6
 8007f76:	d1f6      	bne.n	8007f66 <__strtok_r+0x12>
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1f0      	bne.n	8007f5e <__strtok_r+0xa>
 8007f7c:	6014      	str	r4, [r2, #0]
 8007f7e:	7003      	strb	r3, [r0, #0]
 8007f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f82:	461c      	mov	r4, r3
 8007f84:	e00c      	b.n	8007fa0 <__strtok_r+0x4c>
 8007f86:	b915      	cbnz	r5, 8007f8e <__strtok_r+0x3a>
 8007f88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007f8c:	460e      	mov	r6, r1
 8007f8e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007f92:	42ab      	cmp	r3, r5
 8007f94:	d1f7      	bne.n	8007f86 <__strtok_r+0x32>
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d0f3      	beq.n	8007f82 <__strtok_r+0x2e>
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007fa0:	6014      	str	r4, [r2, #0]
 8007fa2:	e7ed      	b.n	8007f80 <__strtok_r+0x2c>

08007fa4 <__errno>:
 8007fa4:	4b01      	ldr	r3, [pc, #4]	@ (8007fac <__errno+0x8>)
 8007fa6:	6818      	ldr	r0, [r3, #0]
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	2000011c 	.word	0x2000011c

08007fb0 <__libc_init_array>:
 8007fb0:	b570      	push	{r4, r5, r6, lr}
 8007fb2:	4d0d      	ldr	r5, [pc, #52]	@ (8007fe8 <__libc_init_array+0x38>)
 8007fb4:	4c0d      	ldr	r4, [pc, #52]	@ (8007fec <__libc_init_array+0x3c>)
 8007fb6:	1b64      	subs	r4, r4, r5
 8007fb8:	10a4      	asrs	r4, r4, #2
 8007fba:	2600      	movs	r6, #0
 8007fbc:	42a6      	cmp	r6, r4
 8007fbe:	d109      	bne.n	8007fd4 <__libc_init_array+0x24>
 8007fc0:	4d0b      	ldr	r5, [pc, #44]	@ (8007ff0 <__libc_init_array+0x40>)
 8007fc2:	4c0c      	ldr	r4, [pc, #48]	@ (8007ff4 <__libc_init_array+0x44>)
 8007fc4:	f000 fcec 	bl	80089a0 <_init>
 8007fc8:	1b64      	subs	r4, r4, r5
 8007fca:	10a4      	asrs	r4, r4, #2
 8007fcc:	2600      	movs	r6, #0
 8007fce:	42a6      	cmp	r6, r4
 8007fd0:	d105      	bne.n	8007fde <__libc_init_array+0x2e>
 8007fd2:	bd70      	pop	{r4, r5, r6, pc}
 8007fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fd8:	4798      	blx	r3
 8007fda:	3601      	adds	r6, #1
 8007fdc:	e7ee      	b.n	8007fbc <__libc_init_array+0xc>
 8007fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fe2:	4798      	blx	r3
 8007fe4:	3601      	adds	r6, #1
 8007fe6:	e7f2      	b.n	8007fce <__libc_init_array+0x1e>
 8007fe8:	08009758 	.word	0x08009758
 8007fec:	08009758 	.word	0x08009758
 8007ff0:	08009758 	.word	0x08009758
 8007ff4:	0800975c 	.word	0x0800975c

08007ff8 <__retarget_lock_acquire_recursive>:
 8007ff8:	4770      	bx	lr

08007ffa <__retarget_lock_release_recursive>:
 8007ffa:	4770      	bx	lr

08007ffc <strcpy>:
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008002:	f803 2b01 	strb.w	r2, [r3], #1
 8008006:	2a00      	cmp	r2, #0
 8008008:	d1f9      	bne.n	8007ffe <strcpy+0x2>
 800800a:	4770      	bx	lr

0800800c <_free_r>:
 800800c:	b538      	push	{r3, r4, r5, lr}
 800800e:	4605      	mov	r5, r0
 8008010:	2900      	cmp	r1, #0
 8008012:	d041      	beq.n	8008098 <_free_r+0x8c>
 8008014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008018:	1f0c      	subs	r4, r1, #4
 800801a:	2b00      	cmp	r3, #0
 800801c:	bfb8      	it	lt
 800801e:	18e4      	addlt	r4, r4, r3
 8008020:	f000 f8e0 	bl	80081e4 <__malloc_lock>
 8008024:	4a1d      	ldr	r2, [pc, #116]	@ (800809c <_free_r+0x90>)
 8008026:	6813      	ldr	r3, [r2, #0]
 8008028:	b933      	cbnz	r3, 8008038 <_free_r+0x2c>
 800802a:	6063      	str	r3, [r4, #4]
 800802c:	6014      	str	r4, [r2, #0]
 800802e:	4628      	mov	r0, r5
 8008030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008034:	f000 b8dc 	b.w	80081f0 <__malloc_unlock>
 8008038:	42a3      	cmp	r3, r4
 800803a:	d908      	bls.n	800804e <_free_r+0x42>
 800803c:	6820      	ldr	r0, [r4, #0]
 800803e:	1821      	adds	r1, r4, r0
 8008040:	428b      	cmp	r3, r1
 8008042:	bf01      	itttt	eq
 8008044:	6819      	ldreq	r1, [r3, #0]
 8008046:	685b      	ldreq	r3, [r3, #4]
 8008048:	1809      	addeq	r1, r1, r0
 800804a:	6021      	streq	r1, [r4, #0]
 800804c:	e7ed      	b.n	800802a <_free_r+0x1e>
 800804e:	461a      	mov	r2, r3
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	b10b      	cbz	r3, 8008058 <_free_r+0x4c>
 8008054:	42a3      	cmp	r3, r4
 8008056:	d9fa      	bls.n	800804e <_free_r+0x42>
 8008058:	6811      	ldr	r1, [r2, #0]
 800805a:	1850      	adds	r0, r2, r1
 800805c:	42a0      	cmp	r0, r4
 800805e:	d10b      	bne.n	8008078 <_free_r+0x6c>
 8008060:	6820      	ldr	r0, [r4, #0]
 8008062:	4401      	add	r1, r0
 8008064:	1850      	adds	r0, r2, r1
 8008066:	4283      	cmp	r3, r0
 8008068:	6011      	str	r1, [r2, #0]
 800806a:	d1e0      	bne.n	800802e <_free_r+0x22>
 800806c:	6818      	ldr	r0, [r3, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	6053      	str	r3, [r2, #4]
 8008072:	4408      	add	r0, r1
 8008074:	6010      	str	r0, [r2, #0]
 8008076:	e7da      	b.n	800802e <_free_r+0x22>
 8008078:	d902      	bls.n	8008080 <_free_r+0x74>
 800807a:	230c      	movs	r3, #12
 800807c:	602b      	str	r3, [r5, #0]
 800807e:	e7d6      	b.n	800802e <_free_r+0x22>
 8008080:	6820      	ldr	r0, [r4, #0]
 8008082:	1821      	adds	r1, r4, r0
 8008084:	428b      	cmp	r3, r1
 8008086:	bf04      	itt	eq
 8008088:	6819      	ldreq	r1, [r3, #0]
 800808a:	685b      	ldreq	r3, [r3, #4]
 800808c:	6063      	str	r3, [r4, #4]
 800808e:	bf04      	itt	eq
 8008090:	1809      	addeq	r1, r1, r0
 8008092:	6021      	streq	r1, [r4, #0]
 8008094:	6054      	str	r4, [r2, #4]
 8008096:	e7ca      	b.n	800802e <_free_r+0x22>
 8008098:	bd38      	pop	{r3, r4, r5, pc}
 800809a:	bf00      	nop
 800809c:	20000f14 	.word	0x20000f14

080080a0 <sbrk_aligned>:
 80080a0:	b570      	push	{r4, r5, r6, lr}
 80080a2:	4e0f      	ldr	r6, [pc, #60]	@ (80080e0 <sbrk_aligned+0x40>)
 80080a4:	460c      	mov	r4, r1
 80080a6:	6831      	ldr	r1, [r6, #0]
 80080a8:	4605      	mov	r5, r0
 80080aa:	b911      	cbnz	r1, 80080b2 <sbrk_aligned+0x12>
 80080ac:	f000 fba6 	bl	80087fc <_sbrk_r>
 80080b0:	6030      	str	r0, [r6, #0]
 80080b2:	4621      	mov	r1, r4
 80080b4:	4628      	mov	r0, r5
 80080b6:	f000 fba1 	bl	80087fc <_sbrk_r>
 80080ba:	1c43      	adds	r3, r0, #1
 80080bc:	d103      	bne.n	80080c6 <sbrk_aligned+0x26>
 80080be:	f04f 34ff 	mov.w	r4, #4294967295
 80080c2:	4620      	mov	r0, r4
 80080c4:	bd70      	pop	{r4, r5, r6, pc}
 80080c6:	1cc4      	adds	r4, r0, #3
 80080c8:	f024 0403 	bic.w	r4, r4, #3
 80080cc:	42a0      	cmp	r0, r4
 80080ce:	d0f8      	beq.n	80080c2 <sbrk_aligned+0x22>
 80080d0:	1a21      	subs	r1, r4, r0
 80080d2:	4628      	mov	r0, r5
 80080d4:	f000 fb92 	bl	80087fc <_sbrk_r>
 80080d8:	3001      	adds	r0, #1
 80080da:	d1f2      	bne.n	80080c2 <sbrk_aligned+0x22>
 80080dc:	e7ef      	b.n	80080be <sbrk_aligned+0x1e>
 80080de:	bf00      	nop
 80080e0:	20000f10 	.word	0x20000f10

080080e4 <_malloc_r>:
 80080e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080e8:	1ccd      	adds	r5, r1, #3
 80080ea:	f025 0503 	bic.w	r5, r5, #3
 80080ee:	3508      	adds	r5, #8
 80080f0:	2d0c      	cmp	r5, #12
 80080f2:	bf38      	it	cc
 80080f4:	250c      	movcc	r5, #12
 80080f6:	2d00      	cmp	r5, #0
 80080f8:	4606      	mov	r6, r0
 80080fa:	db01      	blt.n	8008100 <_malloc_r+0x1c>
 80080fc:	42a9      	cmp	r1, r5
 80080fe:	d904      	bls.n	800810a <_malloc_r+0x26>
 8008100:	230c      	movs	r3, #12
 8008102:	6033      	str	r3, [r6, #0]
 8008104:	2000      	movs	r0, #0
 8008106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800810a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80081e0 <_malloc_r+0xfc>
 800810e:	f000 f869 	bl	80081e4 <__malloc_lock>
 8008112:	f8d8 3000 	ldr.w	r3, [r8]
 8008116:	461c      	mov	r4, r3
 8008118:	bb44      	cbnz	r4, 800816c <_malloc_r+0x88>
 800811a:	4629      	mov	r1, r5
 800811c:	4630      	mov	r0, r6
 800811e:	f7ff ffbf 	bl	80080a0 <sbrk_aligned>
 8008122:	1c43      	adds	r3, r0, #1
 8008124:	4604      	mov	r4, r0
 8008126:	d158      	bne.n	80081da <_malloc_r+0xf6>
 8008128:	f8d8 4000 	ldr.w	r4, [r8]
 800812c:	4627      	mov	r7, r4
 800812e:	2f00      	cmp	r7, #0
 8008130:	d143      	bne.n	80081ba <_malloc_r+0xd6>
 8008132:	2c00      	cmp	r4, #0
 8008134:	d04b      	beq.n	80081ce <_malloc_r+0xea>
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	4639      	mov	r1, r7
 800813a:	4630      	mov	r0, r6
 800813c:	eb04 0903 	add.w	r9, r4, r3
 8008140:	f000 fb5c 	bl	80087fc <_sbrk_r>
 8008144:	4581      	cmp	r9, r0
 8008146:	d142      	bne.n	80081ce <_malloc_r+0xea>
 8008148:	6821      	ldr	r1, [r4, #0]
 800814a:	1a6d      	subs	r5, r5, r1
 800814c:	4629      	mov	r1, r5
 800814e:	4630      	mov	r0, r6
 8008150:	f7ff ffa6 	bl	80080a0 <sbrk_aligned>
 8008154:	3001      	adds	r0, #1
 8008156:	d03a      	beq.n	80081ce <_malloc_r+0xea>
 8008158:	6823      	ldr	r3, [r4, #0]
 800815a:	442b      	add	r3, r5
 800815c:	6023      	str	r3, [r4, #0]
 800815e:	f8d8 3000 	ldr.w	r3, [r8]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	bb62      	cbnz	r2, 80081c0 <_malloc_r+0xdc>
 8008166:	f8c8 7000 	str.w	r7, [r8]
 800816a:	e00f      	b.n	800818c <_malloc_r+0xa8>
 800816c:	6822      	ldr	r2, [r4, #0]
 800816e:	1b52      	subs	r2, r2, r5
 8008170:	d420      	bmi.n	80081b4 <_malloc_r+0xd0>
 8008172:	2a0b      	cmp	r2, #11
 8008174:	d917      	bls.n	80081a6 <_malloc_r+0xc2>
 8008176:	1961      	adds	r1, r4, r5
 8008178:	42a3      	cmp	r3, r4
 800817a:	6025      	str	r5, [r4, #0]
 800817c:	bf18      	it	ne
 800817e:	6059      	strne	r1, [r3, #4]
 8008180:	6863      	ldr	r3, [r4, #4]
 8008182:	bf08      	it	eq
 8008184:	f8c8 1000 	streq.w	r1, [r8]
 8008188:	5162      	str	r2, [r4, r5]
 800818a:	604b      	str	r3, [r1, #4]
 800818c:	4630      	mov	r0, r6
 800818e:	f000 f82f 	bl	80081f0 <__malloc_unlock>
 8008192:	f104 000b 	add.w	r0, r4, #11
 8008196:	1d23      	adds	r3, r4, #4
 8008198:	f020 0007 	bic.w	r0, r0, #7
 800819c:	1ac2      	subs	r2, r0, r3
 800819e:	bf1c      	itt	ne
 80081a0:	1a1b      	subne	r3, r3, r0
 80081a2:	50a3      	strne	r3, [r4, r2]
 80081a4:	e7af      	b.n	8008106 <_malloc_r+0x22>
 80081a6:	6862      	ldr	r2, [r4, #4]
 80081a8:	42a3      	cmp	r3, r4
 80081aa:	bf0c      	ite	eq
 80081ac:	f8c8 2000 	streq.w	r2, [r8]
 80081b0:	605a      	strne	r2, [r3, #4]
 80081b2:	e7eb      	b.n	800818c <_malloc_r+0xa8>
 80081b4:	4623      	mov	r3, r4
 80081b6:	6864      	ldr	r4, [r4, #4]
 80081b8:	e7ae      	b.n	8008118 <_malloc_r+0x34>
 80081ba:	463c      	mov	r4, r7
 80081bc:	687f      	ldr	r7, [r7, #4]
 80081be:	e7b6      	b.n	800812e <_malloc_r+0x4a>
 80081c0:	461a      	mov	r2, r3
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	42a3      	cmp	r3, r4
 80081c6:	d1fb      	bne.n	80081c0 <_malloc_r+0xdc>
 80081c8:	2300      	movs	r3, #0
 80081ca:	6053      	str	r3, [r2, #4]
 80081cc:	e7de      	b.n	800818c <_malloc_r+0xa8>
 80081ce:	230c      	movs	r3, #12
 80081d0:	6033      	str	r3, [r6, #0]
 80081d2:	4630      	mov	r0, r6
 80081d4:	f000 f80c 	bl	80081f0 <__malloc_unlock>
 80081d8:	e794      	b.n	8008104 <_malloc_r+0x20>
 80081da:	6005      	str	r5, [r0, #0]
 80081dc:	e7d6      	b.n	800818c <_malloc_r+0xa8>
 80081de:	bf00      	nop
 80081e0:	20000f14 	.word	0x20000f14

080081e4 <__malloc_lock>:
 80081e4:	4801      	ldr	r0, [pc, #4]	@ (80081ec <__malloc_lock+0x8>)
 80081e6:	f7ff bf07 	b.w	8007ff8 <__retarget_lock_acquire_recursive>
 80081ea:	bf00      	nop
 80081ec:	20000f0c 	.word	0x20000f0c

080081f0 <__malloc_unlock>:
 80081f0:	4801      	ldr	r0, [pc, #4]	@ (80081f8 <__malloc_unlock+0x8>)
 80081f2:	f7ff bf02 	b.w	8007ffa <__retarget_lock_release_recursive>
 80081f6:	bf00      	nop
 80081f8:	20000f0c 	.word	0x20000f0c

080081fc <__ssputs_r>:
 80081fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008200:	688e      	ldr	r6, [r1, #8]
 8008202:	461f      	mov	r7, r3
 8008204:	42be      	cmp	r6, r7
 8008206:	680b      	ldr	r3, [r1, #0]
 8008208:	4682      	mov	sl, r0
 800820a:	460c      	mov	r4, r1
 800820c:	4690      	mov	r8, r2
 800820e:	d82d      	bhi.n	800826c <__ssputs_r+0x70>
 8008210:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008214:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008218:	d026      	beq.n	8008268 <__ssputs_r+0x6c>
 800821a:	6965      	ldr	r5, [r4, #20]
 800821c:	6909      	ldr	r1, [r1, #16]
 800821e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008222:	eba3 0901 	sub.w	r9, r3, r1
 8008226:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800822a:	1c7b      	adds	r3, r7, #1
 800822c:	444b      	add	r3, r9
 800822e:	106d      	asrs	r5, r5, #1
 8008230:	429d      	cmp	r5, r3
 8008232:	bf38      	it	cc
 8008234:	461d      	movcc	r5, r3
 8008236:	0553      	lsls	r3, r2, #21
 8008238:	d527      	bpl.n	800828a <__ssputs_r+0x8e>
 800823a:	4629      	mov	r1, r5
 800823c:	f7ff ff52 	bl	80080e4 <_malloc_r>
 8008240:	4606      	mov	r6, r0
 8008242:	b360      	cbz	r0, 800829e <__ssputs_r+0xa2>
 8008244:	6921      	ldr	r1, [r4, #16]
 8008246:	464a      	mov	r2, r9
 8008248:	f000 fae8 	bl	800881c <memcpy>
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008256:	81a3      	strh	r3, [r4, #12]
 8008258:	6126      	str	r6, [r4, #16]
 800825a:	6165      	str	r5, [r4, #20]
 800825c:	444e      	add	r6, r9
 800825e:	eba5 0509 	sub.w	r5, r5, r9
 8008262:	6026      	str	r6, [r4, #0]
 8008264:	60a5      	str	r5, [r4, #8]
 8008266:	463e      	mov	r6, r7
 8008268:	42be      	cmp	r6, r7
 800826a:	d900      	bls.n	800826e <__ssputs_r+0x72>
 800826c:	463e      	mov	r6, r7
 800826e:	6820      	ldr	r0, [r4, #0]
 8008270:	4632      	mov	r2, r6
 8008272:	4641      	mov	r1, r8
 8008274:	f000 faa8 	bl	80087c8 <memmove>
 8008278:	68a3      	ldr	r3, [r4, #8]
 800827a:	1b9b      	subs	r3, r3, r6
 800827c:	60a3      	str	r3, [r4, #8]
 800827e:	6823      	ldr	r3, [r4, #0]
 8008280:	4433      	add	r3, r6
 8008282:	6023      	str	r3, [r4, #0]
 8008284:	2000      	movs	r0, #0
 8008286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800828a:	462a      	mov	r2, r5
 800828c:	f000 fad4 	bl	8008838 <_realloc_r>
 8008290:	4606      	mov	r6, r0
 8008292:	2800      	cmp	r0, #0
 8008294:	d1e0      	bne.n	8008258 <__ssputs_r+0x5c>
 8008296:	6921      	ldr	r1, [r4, #16]
 8008298:	4650      	mov	r0, sl
 800829a:	f7ff feb7 	bl	800800c <_free_r>
 800829e:	230c      	movs	r3, #12
 80082a0:	f8ca 3000 	str.w	r3, [sl]
 80082a4:	89a3      	ldrh	r3, [r4, #12]
 80082a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082aa:	81a3      	strh	r3, [r4, #12]
 80082ac:	f04f 30ff 	mov.w	r0, #4294967295
 80082b0:	e7e9      	b.n	8008286 <__ssputs_r+0x8a>
	...

080082b4 <_svfiprintf_r>:
 80082b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b8:	4698      	mov	r8, r3
 80082ba:	898b      	ldrh	r3, [r1, #12]
 80082bc:	061b      	lsls	r3, r3, #24
 80082be:	b09d      	sub	sp, #116	@ 0x74
 80082c0:	4607      	mov	r7, r0
 80082c2:	460d      	mov	r5, r1
 80082c4:	4614      	mov	r4, r2
 80082c6:	d510      	bpl.n	80082ea <_svfiprintf_r+0x36>
 80082c8:	690b      	ldr	r3, [r1, #16]
 80082ca:	b973      	cbnz	r3, 80082ea <_svfiprintf_r+0x36>
 80082cc:	2140      	movs	r1, #64	@ 0x40
 80082ce:	f7ff ff09 	bl	80080e4 <_malloc_r>
 80082d2:	6028      	str	r0, [r5, #0]
 80082d4:	6128      	str	r0, [r5, #16]
 80082d6:	b930      	cbnz	r0, 80082e6 <_svfiprintf_r+0x32>
 80082d8:	230c      	movs	r3, #12
 80082da:	603b      	str	r3, [r7, #0]
 80082dc:	f04f 30ff 	mov.w	r0, #4294967295
 80082e0:	b01d      	add	sp, #116	@ 0x74
 80082e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e6:	2340      	movs	r3, #64	@ 0x40
 80082e8:	616b      	str	r3, [r5, #20]
 80082ea:	2300      	movs	r3, #0
 80082ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80082ee:	2320      	movs	r3, #32
 80082f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80082f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80082f8:	2330      	movs	r3, #48	@ 0x30
 80082fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008498 <_svfiprintf_r+0x1e4>
 80082fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008302:	f04f 0901 	mov.w	r9, #1
 8008306:	4623      	mov	r3, r4
 8008308:	469a      	mov	sl, r3
 800830a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800830e:	b10a      	cbz	r2, 8008314 <_svfiprintf_r+0x60>
 8008310:	2a25      	cmp	r2, #37	@ 0x25
 8008312:	d1f9      	bne.n	8008308 <_svfiprintf_r+0x54>
 8008314:	ebba 0b04 	subs.w	fp, sl, r4
 8008318:	d00b      	beq.n	8008332 <_svfiprintf_r+0x7e>
 800831a:	465b      	mov	r3, fp
 800831c:	4622      	mov	r2, r4
 800831e:	4629      	mov	r1, r5
 8008320:	4638      	mov	r0, r7
 8008322:	f7ff ff6b 	bl	80081fc <__ssputs_r>
 8008326:	3001      	adds	r0, #1
 8008328:	f000 80a7 	beq.w	800847a <_svfiprintf_r+0x1c6>
 800832c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800832e:	445a      	add	r2, fp
 8008330:	9209      	str	r2, [sp, #36]	@ 0x24
 8008332:	f89a 3000 	ldrb.w	r3, [sl]
 8008336:	2b00      	cmp	r3, #0
 8008338:	f000 809f 	beq.w	800847a <_svfiprintf_r+0x1c6>
 800833c:	2300      	movs	r3, #0
 800833e:	f04f 32ff 	mov.w	r2, #4294967295
 8008342:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008346:	f10a 0a01 	add.w	sl, sl, #1
 800834a:	9304      	str	r3, [sp, #16]
 800834c:	9307      	str	r3, [sp, #28]
 800834e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008352:	931a      	str	r3, [sp, #104]	@ 0x68
 8008354:	4654      	mov	r4, sl
 8008356:	2205      	movs	r2, #5
 8008358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800835c:	484e      	ldr	r0, [pc, #312]	@ (8008498 <_svfiprintf_r+0x1e4>)
 800835e:	f7f7 ff57 	bl	8000210 <memchr>
 8008362:	9a04      	ldr	r2, [sp, #16]
 8008364:	b9d8      	cbnz	r0, 800839e <_svfiprintf_r+0xea>
 8008366:	06d0      	lsls	r0, r2, #27
 8008368:	bf44      	itt	mi
 800836a:	2320      	movmi	r3, #32
 800836c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008370:	0711      	lsls	r1, r2, #28
 8008372:	bf44      	itt	mi
 8008374:	232b      	movmi	r3, #43	@ 0x2b
 8008376:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800837a:	f89a 3000 	ldrb.w	r3, [sl]
 800837e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008380:	d015      	beq.n	80083ae <_svfiprintf_r+0xfa>
 8008382:	9a07      	ldr	r2, [sp, #28]
 8008384:	4654      	mov	r4, sl
 8008386:	2000      	movs	r0, #0
 8008388:	f04f 0c0a 	mov.w	ip, #10
 800838c:	4621      	mov	r1, r4
 800838e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008392:	3b30      	subs	r3, #48	@ 0x30
 8008394:	2b09      	cmp	r3, #9
 8008396:	d94b      	bls.n	8008430 <_svfiprintf_r+0x17c>
 8008398:	b1b0      	cbz	r0, 80083c8 <_svfiprintf_r+0x114>
 800839a:	9207      	str	r2, [sp, #28]
 800839c:	e014      	b.n	80083c8 <_svfiprintf_r+0x114>
 800839e:	eba0 0308 	sub.w	r3, r0, r8
 80083a2:	fa09 f303 	lsl.w	r3, r9, r3
 80083a6:	4313      	orrs	r3, r2
 80083a8:	9304      	str	r3, [sp, #16]
 80083aa:	46a2      	mov	sl, r4
 80083ac:	e7d2      	b.n	8008354 <_svfiprintf_r+0xa0>
 80083ae:	9b03      	ldr	r3, [sp, #12]
 80083b0:	1d19      	adds	r1, r3, #4
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	9103      	str	r1, [sp, #12]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	bfbb      	ittet	lt
 80083ba:	425b      	neglt	r3, r3
 80083bc:	f042 0202 	orrlt.w	r2, r2, #2
 80083c0:	9307      	strge	r3, [sp, #28]
 80083c2:	9307      	strlt	r3, [sp, #28]
 80083c4:	bfb8      	it	lt
 80083c6:	9204      	strlt	r2, [sp, #16]
 80083c8:	7823      	ldrb	r3, [r4, #0]
 80083ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80083cc:	d10a      	bne.n	80083e4 <_svfiprintf_r+0x130>
 80083ce:	7863      	ldrb	r3, [r4, #1]
 80083d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80083d2:	d132      	bne.n	800843a <_svfiprintf_r+0x186>
 80083d4:	9b03      	ldr	r3, [sp, #12]
 80083d6:	1d1a      	adds	r2, r3, #4
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	9203      	str	r2, [sp, #12]
 80083dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083e0:	3402      	adds	r4, #2
 80083e2:	9305      	str	r3, [sp, #20]
 80083e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80084a8 <_svfiprintf_r+0x1f4>
 80083e8:	7821      	ldrb	r1, [r4, #0]
 80083ea:	2203      	movs	r2, #3
 80083ec:	4650      	mov	r0, sl
 80083ee:	f7f7 ff0f 	bl	8000210 <memchr>
 80083f2:	b138      	cbz	r0, 8008404 <_svfiprintf_r+0x150>
 80083f4:	9b04      	ldr	r3, [sp, #16]
 80083f6:	eba0 000a 	sub.w	r0, r0, sl
 80083fa:	2240      	movs	r2, #64	@ 0x40
 80083fc:	4082      	lsls	r2, r0
 80083fe:	4313      	orrs	r3, r2
 8008400:	3401      	adds	r4, #1
 8008402:	9304      	str	r3, [sp, #16]
 8008404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008408:	4824      	ldr	r0, [pc, #144]	@ (800849c <_svfiprintf_r+0x1e8>)
 800840a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800840e:	2206      	movs	r2, #6
 8008410:	f7f7 fefe 	bl	8000210 <memchr>
 8008414:	2800      	cmp	r0, #0
 8008416:	d036      	beq.n	8008486 <_svfiprintf_r+0x1d2>
 8008418:	4b21      	ldr	r3, [pc, #132]	@ (80084a0 <_svfiprintf_r+0x1ec>)
 800841a:	bb1b      	cbnz	r3, 8008464 <_svfiprintf_r+0x1b0>
 800841c:	9b03      	ldr	r3, [sp, #12]
 800841e:	3307      	adds	r3, #7
 8008420:	f023 0307 	bic.w	r3, r3, #7
 8008424:	3308      	adds	r3, #8
 8008426:	9303      	str	r3, [sp, #12]
 8008428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800842a:	4433      	add	r3, r6
 800842c:	9309      	str	r3, [sp, #36]	@ 0x24
 800842e:	e76a      	b.n	8008306 <_svfiprintf_r+0x52>
 8008430:	fb0c 3202 	mla	r2, ip, r2, r3
 8008434:	460c      	mov	r4, r1
 8008436:	2001      	movs	r0, #1
 8008438:	e7a8      	b.n	800838c <_svfiprintf_r+0xd8>
 800843a:	2300      	movs	r3, #0
 800843c:	3401      	adds	r4, #1
 800843e:	9305      	str	r3, [sp, #20]
 8008440:	4619      	mov	r1, r3
 8008442:	f04f 0c0a 	mov.w	ip, #10
 8008446:	4620      	mov	r0, r4
 8008448:	f810 2b01 	ldrb.w	r2, [r0], #1
 800844c:	3a30      	subs	r2, #48	@ 0x30
 800844e:	2a09      	cmp	r2, #9
 8008450:	d903      	bls.n	800845a <_svfiprintf_r+0x1a6>
 8008452:	2b00      	cmp	r3, #0
 8008454:	d0c6      	beq.n	80083e4 <_svfiprintf_r+0x130>
 8008456:	9105      	str	r1, [sp, #20]
 8008458:	e7c4      	b.n	80083e4 <_svfiprintf_r+0x130>
 800845a:	fb0c 2101 	mla	r1, ip, r1, r2
 800845e:	4604      	mov	r4, r0
 8008460:	2301      	movs	r3, #1
 8008462:	e7f0      	b.n	8008446 <_svfiprintf_r+0x192>
 8008464:	ab03      	add	r3, sp, #12
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	462a      	mov	r2, r5
 800846a:	4b0e      	ldr	r3, [pc, #56]	@ (80084a4 <_svfiprintf_r+0x1f0>)
 800846c:	a904      	add	r1, sp, #16
 800846e:	4638      	mov	r0, r7
 8008470:	f3af 8000 	nop.w
 8008474:	1c42      	adds	r2, r0, #1
 8008476:	4606      	mov	r6, r0
 8008478:	d1d6      	bne.n	8008428 <_svfiprintf_r+0x174>
 800847a:	89ab      	ldrh	r3, [r5, #12]
 800847c:	065b      	lsls	r3, r3, #25
 800847e:	f53f af2d 	bmi.w	80082dc <_svfiprintf_r+0x28>
 8008482:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008484:	e72c      	b.n	80082e0 <_svfiprintf_r+0x2c>
 8008486:	ab03      	add	r3, sp, #12
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	462a      	mov	r2, r5
 800848c:	4b05      	ldr	r3, [pc, #20]	@ (80084a4 <_svfiprintf_r+0x1f0>)
 800848e:	a904      	add	r1, sp, #16
 8008490:	4638      	mov	r0, r7
 8008492:	f000 f879 	bl	8008588 <_printf_i>
 8008496:	e7ed      	b.n	8008474 <_svfiprintf_r+0x1c0>
 8008498:	0800971d 	.word	0x0800971d
 800849c:	08009727 	.word	0x08009727
 80084a0:	00000000 	.word	0x00000000
 80084a4:	080081fd 	.word	0x080081fd
 80084a8:	08009723 	.word	0x08009723

080084ac <_printf_common>:
 80084ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084b0:	4616      	mov	r6, r2
 80084b2:	4698      	mov	r8, r3
 80084b4:	688a      	ldr	r2, [r1, #8]
 80084b6:	690b      	ldr	r3, [r1, #16]
 80084b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084bc:	4293      	cmp	r3, r2
 80084be:	bfb8      	it	lt
 80084c0:	4613      	movlt	r3, r2
 80084c2:	6033      	str	r3, [r6, #0]
 80084c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80084c8:	4607      	mov	r7, r0
 80084ca:	460c      	mov	r4, r1
 80084cc:	b10a      	cbz	r2, 80084d2 <_printf_common+0x26>
 80084ce:	3301      	adds	r3, #1
 80084d0:	6033      	str	r3, [r6, #0]
 80084d2:	6823      	ldr	r3, [r4, #0]
 80084d4:	0699      	lsls	r1, r3, #26
 80084d6:	bf42      	ittt	mi
 80084d8:	6833      	ldrmi	r3, [r6, #0]
 80084da:	3302      	addmi	r3, #2
 80084dc:	6033      	strmi	r3, [r6, #0]
 80084de:	6825      	ldr	r5, [r4, #0]
 80084e0:	f015 0506 	ands.w	r5, r5, #6
 80084e4:	d106      	bne.n	80084f4 <_printf_common+0x48>
 80084e6:	f104 0a19 	add.w	sl, r4, #25
 80084ea:	68e3      	ldr	r3, [r4, #12]
 80084ec:	6832      	ldr	r2, [r6, #0]
 80084ee:	1a9b      	subs	r3, r3, r2
 80084f0:	42ab      	cmp	r3, r5
 80084f2:	dc26      	bgt.n	8008542 <_printf_common+0x96>
 80084f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80084f8:	6822      	ldr	r2, [r4, #0]
 80084fa:	3b00      	subs	r3, #0
 80084fc:	bf18      	it	ne
 80084fe:	2301      	movne	r3, #1
 8008500:	0692      	lsls	r2, r2, #26
 8008502:	d42b      	bmi.n	800855c <_printf_common+0xb0>
 8008504:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008508:	4641      	mov	r1, r8
 800850a:	4638      	mov	r0, r7
 800850c:	47c8      	blx	r9
 800850e:	3001      	adds	r0, #1
 8008510:	d01e      	beq.n	8008550 <_printf_common+0xa4>
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	6922      	ldr	r2, [r4, #16]
 8008516:	f003 0306 	and.w	r3, r3, #6
 800851a:	2b04      	cmp	r3, #4
 800851c:	bf02      	ittt	eq
 800851e:	68e5      	ldreq	r5, [r4, #12]
 8008520:	6833      	ldreq	r3, [r6, #0]
 8008522:	1aed      	subeq	r5, r5, r3
 8008524:	68a3      	ldr	r3, [r4, #8]
 8008526:	bf0c      	ite	eq
 8008528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800852c:	2500      	movne	r5, #0
 800852e:	4293      	cmp	r3, r2
 8008530:	bfc4      	itt	gt
 8008532:	1a9b      	subgt	r3, r3, r2
 8008534:	18ed      	addgt	r5, r5, r3
 8008536:	2600      	movs	r6, #0
 8008538:	341a      	adds	r4, #26
 800853a:	42b5      	cmp	r5, r6
 800853c:	d11a      	bne.n	8008574 <_printf_common+0xc8>
 800853e:	2000      	movs	r0, #0
 8008540:	e008      	b.n	8008554 <_printf_common+0xa8>
 8008542:	2301      	movs	r3, #1
 8008544:	4652      	mov	r2, sl
 8008546:	4641      	mov	r1, r8
 8008548:	4638      	mov	r0, r7
 800854a:	47c8      	blx	r9
 800854c:	3001      	adds	r0, #1
 800854e:	d103      	bne.n	8008558 <_printf_common+0xac>
 8008550:	f04f 30ff 	mov.w	r0, #4294967295
 8008554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008558:	3501      	adds	r5, #1
 800855a:	e7c6      	b.n	80084ea <_printf_common+0x3e>
 800855c:	18e1      	adds	r1, r4, r3
 800855e:	1c5a      	adds	r2, r3, #1
 8008560:	2030      	movs	r0, #48	@ 0x30
 8008562:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008566:	4422      	add	r2, r4
 8008568:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800856c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008570:	3302      	adds	r3, #2
 8008572:	e7c7      	b.n	8008504 <_printf_common+0x58>
 8008574:	2301      	movs	r3, #1
 8008576:	4622      	mov	r2, r4
 8008578:	4641      	mov	r1, r8
 800857a:	4638      	mov	r0, r7
 800857c:	47c8      	blx	r9
 800857e:	3001      	adds	r0, #1
 8008580:	d0e6      	beq.n	8008550 <_printf_common+0xa4>
 8008582:	3601      	adds	r6, #1
 8008584:	e7d9      	b.n	800853a <_printf_common+0x8e>
	...

08008588 <_printf_i>:
 8008588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800858c:	7e0f      	ldrb	r7, [r1, #24]
 800858e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008590:	2f78      	cmp	r7, #120	@ 0x78
 8008592:	4691      	mov	r9, r2
 8008594:	4680      	mov	r8, r0
 8008596:	460c      	mov	r4, r1
 8008598:	469a      	mov	sl, r3
 800859a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800859e:	d807      	bhi.n	80085b0 <_printf_i+0x28>
 80085a0:	2f62      	cmp	r7, #98	@ 0x62
 80085a2:	d80a      	bhi.n	80085ba <_printf_i+0x32>
 80085a4:	2f00      	cmp	r7, #0
 80085a6:	f000 80d2 	beq.w	800874e <_printf_i+0x1c6>
 80085aa:	2f58      	cmp	r7, #88	@ 0x58
 80085ac:	f000 80b9 	beq.w	8008722 <_printf_i+0x19a>
 80085b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80085b8:	e03a      	b.n	8008630 <_printf_i+0xa8>
 80085ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80085be:	2b15      	cmp	r3, #21
 80085c0:	d8f6      	bhi.n	80085b0 <_printf_i+0x28>
 80085c2:	a101      	add	r1, pc, #4	@ (adr r1, 80085c8 <_printf_i+0x40>)
 80085c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085c8:	08008621 	.word	0x08008621
 80085cc:	08008635 	.word	0x08008635
 80085d0:	080085b1 	.word	0x080085b1
 80085d4:	080085b1 	.word	0x080085b1
 80085d8:	080085b1 	.word	0x080085b1
 80085dc:	080085b1 	.word	0x080085b1
 80085e0:	08008635 	.word	0x08008635
 80085e4:	080085b1 	.word	0x080085b1
 80085e8:	080085b1 	.word	0x080085b1
 80085ec:	080085b1 	.word	0x080085b1
 80085f0:	080085b1 	.word	0x080085b1
 80085f4:	08008735 	.word	0x08008735
 80085f8:	0800865f 	.word	0x0800865f
 80085fc:	080086ef 	.word	0x080086ef
 8008600:	080085b1 	.word	0x080085b1
 8008604:	080085b1 	.word	0x080085b1
 8008608:	08008757 	.word	0x08008757
 800860c:	080085b1 	.word	0x080085b1
 8008610:	0800865f 	.word	0x0800865f
 8008614:	080085b1 	.word	0x080085b1
 8008618:	080085b1 	.word	0x080085b1
 800861c:	080086f7 	.word	0x080086f7
 8008620:	6833      	ldr	r3, [r6, #0]
 8008622:	1d1a      	adds	r2, r3, #4
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6032      	str	r2, [r6, #0]
 8008628:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800862c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008630:	2301      	movs	r3, #1
 8008632:	e09d      	b.n	8008770 <_printf_i+0x1e8>
 8008634:	6833      	ldr	r3, [r6, #0]
 8008636:	6820      	ldr	r0, [r4, #0]
 8008638:	1d19      	adds	r1, r3, #4
 800863a:	6031      	str	r1, [r6, #0]
 800863c:	0606      	lsls	r6, r0, #24
 800863e:	d501      	bpl.n	8008644 <_printf_i+0xbc>
 8008640:	681d      	ldr	r5, [r3, #0]
 8008642:	e003      	b.n	800864c <_printf_i+0xc4>
 8008644:	0645      	lsls	r5, r0, #25
 8008646:	d5fb      	bpl.n	8008640 <_printf_i+0xb8>
 8008648:	f9b3 5000 	ldrsh.w	r5, [r3]
 800864c:	2d00      	cmp	r5, #0
 800864e:	da03      	bge.n	8008658 <_printf_i+0xd0>
 8008650:	232d      	movs	r3, #45	@ 0x2d
 8008652:	426d      	negs	r5, r5
 8008654:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008658:	4859      	ldr	r0, [pc, #356]	@ (80087c0 <_printf_i+0x238>)
 800865a:	230a      	movs	r3, #10
 800865c:	e011      	b.n	8008682 <_printf_i+0xfa>
 800865e:	6821      	ldr	r1, [r4, #0]
 8008660:	6833      	ldr	r3, [r6, #0]
 8008662:	0608      	lsls	r0, r1, #24
 8008664:	f853 5b04 	ldr.w	r5, [r3], #4
 8008668:	d402      	bmi.n	8008670 <_printf_i+0xe8>
 800866a:	0649      	lsls	r1, r1, #25
 800866c:	bf48      	it	mi
 800866e:	b2ad      	uxthmi	r5, r5
 8008670:	2f6f      	cmp	r7, #111	@ 0x6f
 8008672:	4853      	ldr	r0, [pc, #332]	@ (80087c0 <_printf_i+0x238>)
 8008674:	6033      	str	r3, [r6, #0]
 8008676:	bf14      	ite	ne
 8008678:	230a      	movne	r3, #10
 800867a:	2308      	moveq	r3, #8
 800867c:	2100      	movs	r1, #0
 800867e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008682:	6866      	ldr	r6, [r4, #4]
 8008684:	60a6      	str	r6, [r4, #8]
 8008686:	2e00      	cmp	r6, #0
 8008688:	bfa2      	ittt	ge
 800868a:	6821      	ldrge	r1, [r4, #0]
 800868c:	f021 0104 	bicge.w	r1, r1, #4
 8008690:	6021      	strge	r1, [r4, #0]
 8008692:	b90d      	cbnz	r5, 8008698 <_printf_i+0x110>
 8008694:	2e00      	cmp	r6, #0
 8008696:	d04b      	beq.n	8008730 <_printf_i+0x1a8>
 8008698:	4616      	mov	r6, r2
 800869a:	fbb5 f1f3 	udiv	r1, r5, r3
 800869e:	fb03 5711 	mls	r7, r3, r1, r5
 80086a2:	5dc7      	ldrb	r7, [r0, r7]
 80086a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086a8:	462f      	mov	r7, r5
 80086aa:	42bb      	cmp	r3, r7
 80086ac:	460d      	mov	r5, r1
 80086ae:	d9f4      	bls.n	800869a <_printf_i+0x112>
 80086b0:	2b08      	cmp	r3, #8
 80086b2:	d10b      	bne.n	80086cc <_printf_i+0x144>
 80086b4:	6823      	ldr	r3, [r4, #0]
 80086b6:	07df      	lsls	r7, r3, #31
 80086b8:	d508      	bpl.n	80086cc <_printf_i+0x144>
 80086ba:	6923      	ldr	r3, [r4, #16]
 80086bc:	6861      	ldr	r1, [r4, #4]
 80086be:	4299      	cmp	r1, r3
 80086c0:	bfde      	ittt	le
 80086c2:	2330      	movle	r3, #48	@ 0x30
 80086c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086cc:	1b92      	subs	r2, r2, r6
 80086ce:	6122      	str	r2, [r4, #16]
 80086d0:	f8cd a000 	str.w	sl, [sp]
 80086d4:	464b      	mov	r3, r9
 80086d6:	aa03      	add	r2, sp, #12
 80086d8:	4621      	mov	r1, r4
 80086da:	4640      	mov	r0, r8
 80086dc:	f7ff fee6 	bl	80084ac <_printf_common>
 80086e0:	3001      	adds	r0, #1
 80086e2:	d14a      	bne.n	800877a <_printf_i+0x1f2>
 80086e4:	f04f 30ff 	mov.w	r0, #4294967295
 80086e8:	b004      	add	sp, #16
 80086ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	f043 0320 	orr.w	r3, r3, #32
 80086f4:	6023      	str	r3, [r4, #0]
 80086f6:	4833      	ldr	r0, [pc, #204]	@ (80087c4 <_printf_i+0x23c>)
 80086f8:	2778      	movs	r7, #120	@ 0x78
 80086fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	6831      	ldr	r1, [r6, #0]
 8008702:	061f      	lsls	r7, r3, #24
 8008704:	f851 5b04 	ldr.w	r5, [r1], #4
 8008708:	d402      	bmi.n	8008710 <_printf_i+0x188>
 800870a:	065f      	lsls	r7, r3, #25
 800870c:	bf48      	it	mi
 800870e:	b2ad      	uxthmi	r5, r5
 8008710:	6031      	str	r1, [r6, #0]
 8008712:	07d9      	lsls	r1, r3, #31
 8008714:	bf44      	itt	mi
 8008716:	f043 0320 	orrmi.w	r3, r3, #32
 800871a:	6023      	strmi	r3, [r4, #0]
 800871c:	b11d      	cbz	r5, 8008726 <_printf_i+0x19e>
 800871e:	2310      	movs	r3, #16
 8008720:	e7ac      	b.n	800867c <_printf_i+0xf4>
 8008722:	4827      	ldr	r0, [pc, #156]	@ (80087c0 <_printf_i+0x238>)
 8008724:	e7e9      	b.n	80086fa <_printf_i+0x172>
 8008726:	6823      	ldr	r3, [r4, #0]
 8008728:	f023 0320 	bic.w	r3, r3, #32
 800872c:	6023      	str	r3, [r4, #0]
 800872e:	e7f6      	b.n	800871e <_printf_i+0x196>
 8008730:	4616      	mov	r6, r2
 8008732:	e7bd      	b.n	80086b0 <_printf_i+0x128>
 8008734:	6833      	ldr	r3, [r6, #0]
 8008736:	6825      	ldr	r5, [r4, #0]
 8008738:	6961      	ldr	r1, [r4, #20]
 800873a:	1d18      	adds	r0, r3, #4
 800873c:	6030      	str	r0, [r6, #0]
 800873e:	062e      	lsls	r6, r5, #24
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	d501      	bpl.n	8008748 <_printf_i+0x1c0>
 8008744:	6019      	str	r1, [r3, #0]
 8008746:	e002      	b.n	800874e <_printf_i+0x1c6>
 8008748:	0668      	lsls	r0, r5, #25
 800874a:	d5fb      	bpl.n	8008744 <_printf_i+0x1bc>
 800874c:	8019      	strh	r1, [r3, #0]
 800874e:	2300      	movs	r3, #0
 8008750:	6123      	str	r3, [r4, #16]
 8008752:	4616      	mov	r6, r2
 8008754:	e7bc      	b.n	80086d0 <_printf_i+0x148>
 8008756:	6833      	ldr	r3, [r6, #0]
 8008758:	1d1a      	adds	r2, r3, #4
 800875a:	6032      	str	r2, [r6, #0]
 800875c:	681e      	ldr	r6, [r3, #0]
 800875e:	6862      	ldr	r2, [r4, #4]
 8008760:	2100      	movs	r1, #0
 8008762:	4630      	mov	r0, r6
 8008764:	f7f7 fd54 	bl	8000210 <memchr>
 8008768:	b108      	cbz	r0, 800876e <_printf_i+0x1e6>
 800876a:	1b80      	subs	r0, r0, r6
 800876c:	6060      	str	r0, [r4, #4]
 800876e:	6863      	ldr	r3, [r4, #4]
 8008770:	6123      	str	r3, [r4, #16]
 8008772:	2300      	movs	r3, #0
 8008774:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008778:	e7aa      	b.n	80086d0 <_printf_i+0x148>
 800877a:	6923      	ldr	r3, [r4, #16]
 800877c:	4632      	mov	r2, r6
 800877e:	4649      	mov	r1, r9
 8008780:	4640      	mov	r0, r8
 8008782:	47d0      	blx	sl
 8008784:	3001      	adds	r0, #1
 8008786:	d0ad      	beq.n	80086e4 <_printf_i+0x15c>
 8008788:	6823      	ldr	r3, [r4, #0]
 800878a:	079b      	lsls	r3, r3, #30
 800878c:	d413      	bmi.n	80087b6 <_printf_i+0x22e>
 800878e:	68e0      	ldr	r0, [r4, #12]
 8008790:	9b03      	ldr	r3, [sp, #12]
 8008792:	4298      	cmp	r0, r3
 8008794:	bfb8      	it	lt
 8008796:	4618      	movlt	r0, r3
 8008798:	e7a6      	b.n	80086e8 <_printf_i+0x160>
 800879a:	2301      	movs	r3, #1
 800879c:	4632      	mov	r2, r6
 800879e:	4649      	mov	r1, r9
 80087a0:	4640      	mov	r0, r8
 80087a2:	47d0      	blx	sl
 80087a4:	3001      	adds	r0, #1
 80087a6:	d09d      	beq.n	80086e4 <_printf_i+0x15c>
 80087a8:	3501      	adds	r5, #1
 80087aa:	68e3      	ldr	r3, [r4, #12]
 80087ac:	9903      	ldr	r1, [sp, #12]
 80087ae:	1a5b      	subs	r3, r3, r1
 80087b0:	42ab      	cmp	r3, r5
 80087b2:	dcf2      	bgt.n	800879a <_printf_i+0x212>
 80087b4:	e7eb      	b.n	800878e <_printf_i+0x206>
 80087b6:	2500      	movs	r5, #0
 80087b8:	f104 0619 	add.w	r6, r4, #25
 80087bc:	e7f5      	b.n	80087aa <_printf_i+0x222>
 80087be:	bf00      	nop
 80087c0:	0800972e 	.word	0x0800972e
 80087c4:	0800973f 	.word	0x0800973f

080087c8 <memmove>:
 80087c8:	4288      	cmp	r0, r1
 80087ca:	b510      	push	{r4, lr}
 80087cc:	eb01 0402 	add.w	r4, r1, r2
 80087d0:	d902      	bls.n	80087d8 <memmove+0x10>
 80087d2:	4284      	cmp	r4, r0
 80087d4:	4623      	mov	r3, r4
 80087d6:	d807      	bhi.n	80087e8 <memmove+0x20>
 80087d8:	1e43      	subs	r3, r0, #1
 80087da:	42a1      	cmp	r1, r4
 80087dc:	d008      	beq.n	80087f0 <memmove+0x28>
 80087de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087e6:	e7f8      	b.n	80087da <memmove+0x12>
 80087e8:	4402      	add	r2, r0
 80087ea:	4601      	mov	r1, r0
 80087ec:	428a      	cmp	r2, r1
 80087ee:	d100      	bne.n	80087f2 <memmove+0x2a>
 80087f0:	bd10      	pop	{r4, pc}
 80087f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087fa:	e7f7      	b.n	80087ec <memmove+0x24>

080087fc <_sbrk_r>:
 80087fc:	b538      	push	{r3, r4, r5, lr}
 80087fe:	4d06      	ldr	r5, [pc, #24]	@ (8008818 <_sbrk_r+0x1c>)
 8008800:	2300      	movs	r3, #0
 8008802:	4604      	mov	r4, r0
 8008804:	4608      	mov	r0, r1
 8008806:	602b      	str	r3, [r5, #0]
 8008808:	f7fb fd14 	bl	8004234 <_sbrk>
 800880c:	1c43      	adds	r3, r0, #1
 800880e:	d102      	bne.n	8008816 <_sbrk_r+0x1a>
 8008810:	682b      	ldr	r3, [r5, #0]
 8008812:	b103      	cbz	r3, 8008816 <_sbrk_r+0x1a>
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	bd38      	pop	{r3, r4, r5, pc}
 8008818:	20000f08 	.word	0x20000f08

0800881c <memcpy>:
 800881c:	440a      	add	r2, r1
 800881e:	4291      	cmp	r1, r2
 8008820:	f100 33ff 	add.w	r3, r0, #4294967295
 8008824:	d100      	bne.n	8008828 <memcpy+0xc>
 8008826:	4770      	bx	lr
 8008828:	b510      	push	{r4, lr}
 800882a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800882e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008832:	4291      	cmp	r1, r2
 8008834:	d1f9      	bne.n	800882a <memcpy+0xe>
 8008836:	bd10      	pop	{r4, pc}

08008838 <_realloc_r>:
 8008838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800883c:	4680      	mov	r8, r0
 800883e:	4615      	mov	r5, r2
 8008840:	460c      	mov	r4, r1
 8008842:	b921      	cbnz	r1, 800884e <_realloc_r+0x16>
 8008844:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008848:	4611      	mov	r1, r2
 800884a:	f7ff bc4b 	b.w	80080e4 <_malloc_r>
 800884e:	b92a      	cbnz	r2, 800885c <_realloc_r+0x24>
 8008850:	f7ff fbdc 	bl	800800c <_free_r>
 8008854:	2400      	movs	r4, #0
 8008856:	4620      	mov	r0, r4
 8008858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800885c:	f000 f81a 	bl	8008894 <_malloc_usable_size_r>
 8008860:	4285      	cmp	r5, r0
 8008862:	4606      	mov	r6, r0
 8008864:	d802      	bhi.n	800886c <_realloc_r+0x34>
 8008866:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800886a:	d8f4      	bhi.n	8008856 <_realloc_r+0x1e>
 800886c:	4629      	mov	r1, r5
 800886e:	4640      	mov	r0, r8
 8008870:	f7ff fc38 	bl	80080e4 <_malloc_r>
 8008874:	4607      	mov	r7, r0
 8008876:	2800      	cmp	r0, #0
 8008878:	d0ec      	beq.n	8008854 <_realloc_r+0x1c>
 800887a:	42b5      	cmp	r5, r6
 800887c:	462a      	mov	r2, r5
 800887e:	4621      	mov	r1, r4
 8008880:	bf28      	it	cs
 8008882:	4632      	movcs	r2, r6
 8008884:	f7ff ffca 	bl	800881c <memcpy>
 8008888:	4621      	mov	r1, r4
 800888a:	4640      	mov	r0, r8
 800888c:	f7ff fbbe 	bl	800800c <_free_r>
 8008890:	463c      	mov	r4, r7
 8008892:	e7e0      	b.n	8008856 <_realloc_r+0x1e>

08008894 <_malloc_usable_size_r>:
 8008894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008898:	1f18      	subs	r0, r3, #4
 800889a:	2b00      	cmp	r3, #0
 800889c:	bfbc      	itt	lt
 800889e:	580b      	ldrlt	r3, [r1, r0]
 80088a0:	18c0      	addlt	r0, r0, r3
 80088a2:	4770      	bx	lr
 80088a4:	0000      	movs	r0, r0
	...

080088a8 <floor>:
 80088a8:	ec51 0b10 	vmov	r0, r1, d0
 80088ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80088b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80088b8:	2e13      	cmp	r6, #19
 80088ba:	460c      	mov	r4, r1
 80088bc:	4605      	mov	r5, r0
 80088be:	4680      	mov	r8, r0
 80088c0:	dc34      	bgt.n	800892c <floor+0x84>
 80088c2:	2e00      	cmp	r6, #0
 80088c4:	da17      	bge.n	80088f6 <floor+0x4e>
 80088c6:	a332      	add	r3, pc, #200	@ (adr r3, 8008990 <floor+0xe8>)
 80088c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088cc:	f7f7 fe20 	bl	8000510 <__adddf3>
 80088d0:	2200      	movs	r2, #0
 80088d2:	2300      	movs	r3, #0
 80088d4:	f7f8 f850 	bl	8000978 <__aeabi_dcmpgt>
 80088d8:	b150      	cbz	r0, 80088f0 <floor+0x48>
 80088da:	2c00      	cmp	r4, #0
 80088dc:	da55      	bge.n	800898a <floor+0xe2>
 80088de:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80088e2:	432c      	orrs	r4, r5
 80088e4:	2500      	movs	r5, #0
 80088e6:	42ac      	cmp	r4, r5
 80088e8:	4c2b      	ldr	r4, [pc, #172]	@ (8008998 <floor+0xf0>)
 80088ea:	bf08      	it	eq
 80088ec:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80088f0:	4621      	mov	r1, r4
 80088f2:	4628      	mov	r0, r5
 80088f4:	e023      	b.n	800893e <floor+0x96>
 80088f6:	4f29      	ldr	r7, [pc, #164]	@ (800899c <floor+0xf4>)
 80088f8:	4137      	asrs	r7, r6
 80088fa:	ea01 0307 	and.w	r3, r1, r7
 80088fe:	4303      	orrs	r3, r0
 8008900:	d01d      	beq.n	800893e <floor+0x96>
 8008902:	a323      	add	r3, pc, #140	@ (adr r3, 8008990 <floor+0xe8>)
 8008904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008908:	f7f7 fe02 	bl	8000510 <__adddf3>
 800890c:	2200      	movs	r2, #0
 800890e:	2300      	movs	r3, #0
 8008910:	f7f8 f832 	bl	8000978 <__aeabi_dcmpgt>
 8008914:	2800      	cmp	r0, #0
 8008916:	d0eb      	beq.n	80088f0 <floor+0x48>
 8008918:	2c00      	cmp	r4, #0
 800891a:	bfbe      	ittt	lt
 800891c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8008920:	4133      	asrlt	r3, r6
 8008922:	18e4      	addlt	r4, r4, r3
 8008924:	ea24 0407 	bic.w	r4, r4, r7
 8008928:	2500      	movs	r5, #0
 800892a:	e7e1      	b.n	80088f0 <floor+0x48>
 800892c:	2e33      	cmp	r6, #51	@ 0x33
 800892e:	dd0a      	ble.n	8008946 <floor+0x9e>
 8008930:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8008934:	d103      	bne.n	800893e <floor+0x96>
 8008936:	4602      	mov	r2, r0
 8008938:	460b      	mov	r3, r1
 800893a:	f7f7 fde9 	bl	8000510 <__adddf3>
 800893e:	ec41 0b10 	vmov	d0, r0, r1
 8008942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008946:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800894a:	f04f 37ff 	mov.w	r7, #4294967295
 800894e:	40df      	lsrs	r7, r3
 8008950:	4207      	tst	r7, r0
 8008952:	d0f4      	beq.n	800893e <floor+0x96>
 8008954:	a30e      	add	r3, pc, #56	@ (adr r3, 8008990 <floor+0xe8>)
 8008956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895a:	f7f7 fdd9 	bl	8000510 <__adddf3>
 800895e:	2200      	movs	r2, #0
 8008960:	2300      	movs	r3, #0
 8008962:	f7f8 f809 	bl	8000978 <__aeabi_dcmpgt>
 8008966:	2800      	cmp	r0, #0
 8008968:	d0c2      	beq.n	80088f0 <floor+0x48>
 800896a:	2c00      	cmp	r4, #0
 800896c:	da0a      	bge.n	8008984 <floor+0xdc>
 800896e:	2e14      	cmp	r6, #20
 8008970:	d101      	bne.n	8008976 <floor+0xce>
 8008972:	3401      	adds	r4, #1
 8008974:	e006      	b.n	8008984 <floor+0xdc>
 8008976:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800897a:	2301      	movs	r3, #1
 800897c:	40b3      	lsls	r3, r6
 800897e:	441d      	add	r5, r3
 8008980:	4545      	cmp	r5, r8
 8008982:	d3f6      	bcc.n	8008972 <floor+0xca>
 8008984:	ea25 0507 	bic.w	r5, r5, r7
 8008988:	e7b2      	b.n	80088f0 <floor+0x48>
 800898a:	2500      	movs	r5, #0
 800898c:	462c      	mov	r4, r5
 800898e:	e7af      	b.n	80088f0 <floor+0x48>
 8008990:	8800759c 	.word	0x8800759c
 8008994:	7e37e43c 	.word	0x7e37e43c
 8008998:	bff00000 	.word	0xbff00000
 800899c:	000fffff 	.word	0x000fffff

080089a0 <_init>:
 80089a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a2:	bf00      	nop
 80089a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089a6:	bc08      	pop	{r3}
 80089a8:	469e      	mov	lr, r3
 80089aa:	4770      	bx	lr

080089ac <_fini>:
 80089ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ae:	bf00      	nop
 80089b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089b2:	bc08      	pop	{r3}
 80089b4:	469e      	mov	lr, r3
 80089b6:	4770      	bx	lr
